%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: T058_FTPH_RL2_cmyk.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Brigden, Chantal
%%CreationDate: 4/6/09
%%BoundingBox: 0 0 314 85
%%HiResBoundingBox: 0 0 313.0694 84.0733
%%CropBox: 0 0 313.0694 84.0733
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 36 8%%BeginData: 3966 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45527DA8A8FFA8FFA8FFA87DA8FF7DFF527DA8FFA8FFA8FFA8FD68FF%27A8525252275252527D5227277DFF527D52275252275252FD68FFA8A8A8%7D7D52A87D7D7DA8527D7DFF7DA87DA87D7D527D7DFD7AFFA8FFFFFFA8FD%69FF7D7DFFFFFFA8FF7DA8A8FFFFFFA87D7DFFA87D7DFD6CFF277D525227%5252527D5252527DA827522752527DFD6CFF7DFFA8FD057DA87D7D52A8A8%7D7D7D527D7DFD6CFFA8FD07FFA8FD77FFA8FD07FFA8FD06FFA8FFFFA8A8%FFFFA87DFD68FF527DA8A8277D52FF5252527D5252527D525252A87D5227%A8FD68FF7D7DFFA8527D7DA87D527D7D7D52A8A87D7D7DA8A8527DA8FD68%FFA8FFFFFFA8FFA8FFFFFFA8FF7DFD05FFA8FDFCFFFD71FF7853534D5353%534D5353534D5353534D5353534D535353297EFD67FF2828222801282228%0128222801282228012822280128222828FD67FF532829537E2954292953%29537E285428FD055329292853FD67FF2829227EA87E7E5329FF28A87E29%7E53535377A27E7E222828FD67FF4D28297E7828A94DFD057E28A8777E53%7E53A87E292853FD67FF282801292828285328284C534C53532928530129%2829012928FD67FF532829284D4C775277527D5277527D767752774C2928%292853FD67FF282822534C5328292828222922282229282928534C292229%28FD67FF29282922292829222928292229282922292829222928292253FD%67FFFD047E7D7E7E7E7D7E7E7E7D7E7E7E7D7E7E7E7DFD047EFDFCFFFDF5%FFA8FD0BFFA8FD23FFA8FD45FFA87DFFA8A8A8FFA8FFFFA8A8FFFD07A8FF%A8FFFFFFA8FF7DA8A8A8FFFFA87DA8A8A8FFFF7DA8FFA8A8FFFFA87DA8FF%FD05A8FFFFFF84FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFFFFF7DFD08A8FFFF%FF7DFFA8A8A8FFA8AFA8FFFFA87DFD04A8FFA8FFA8A8A8FFFFFF7DFD05A8%FF7DA8FFA8FFA87D7D527D7D7D59527DFF52A87DFD04527D52A8A8A87D7D%527D7D527D7D52FFA8A8527D527D52FF7D7D527D52AF7DFF527D527D7D7D%52FD04A87D277D7DA87D7D277D527D527D7D7DA8A8FFA8FD067D527DA8A8%A87D527D527D597D52A87DFFFD047D525252FD057DFD04A8FD047D52A852%7D527D7D52FD07FFA8FD05FF7DA8A8FD07FFA8FFFFFFA8FD3EFFA8FD05FF%A8FD06FFA87DA8A8A8FD0BFFA87DFD06FF7D7DFD09FFA8FD07FFA8A8FD08%FFA8FD05FFA8A8FFFFA8FFA8FFFFA8A8FD05FFA8FD07FFA8FFA8FFFFFFA8%FD0EFFA8A8FD05FFA8FD0FFFA8FFA8FD09FFA8FD09FFA8FFFFFFA87DA852%A87DA8FFFFA87D7DA87DA87DFFA8FF7DA87D7D7DA8A8FFA8FD047DA8A8A8%52A87D7D7DFFA8A852A87D7D7DFFA87D7DA87D7D7DFFFFA87D7D7DA852A8%A87DA8FFA87D58A87DA87DA87DFF52A87DA8A8FFFFA852A87DA87DA884A8%7DA87D7DA8FFA8A87D7DA8A87DA87D7DFFFFA87D7DA87DA8A8FFA87D52A8%7D7D7DA8A87D7D52A87DFFA8FF7D7D7DA87DA8A8A8FFA8527D52A87DFFA8%FFA87D7D7D52FFA8A8FD047DA8A8A87D7D7D52A87DFFA8A87D7D7DA8A8FF%A8FD067DA87DFFA8FF7DA8FD067DA87D7DA852A8A8FF7D7D7DA87DA87DA8%7D7D527D7DA8A8FFA8FD047DA852A87DFFA8FFA87D52A87DFFA8FF7D7DA8%7D52A8FDFCFFFFFFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-04-06T16:58:13+01:00</xap:CreateDate>
         <xap:ModifyDate>2009-04-06T16:58:16+01:00</xap:ModifyDate>
         <xap:MetadataDate>2009-04-06T16:58:16+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>72</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgASAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6Dp35X+f9H8vWVto98LL&#xA;VDZ2yahdwNCkjTxpc+opcxnmvN4fibc0xVfdeXv+cgLifVl/S6wRvP62mPDLCOIFrdcY94z8Jna3&#xA;5Ar0Bp/MyqI1Tyx+b10bq8inRdXhfUDZXDTxGIRzuht0t0EYaL9ynBuTVLftAfFiq3/lX3njUvIv&#xA;mmx1tIZvMesLZ3Frc+qlPrcNhBaSOWRVCNzgY1ApRvniq7U/Iv5nW+oXcflrUP0Vo7z3D29tbPDG&#xA;oRolWHZo3I3XFVp0T8/muNQrqsHCa+tmtF/drGtonIyDmv7xa1XnRK1XbkCcVev4q7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXi+jfl/8AmxoPly2j0rWZRqc2&#xA;n3U17bySRPCmoiC2htkrN9YLfYmdmUhS9KimxVdceWvz0vNPmhvNUmcS24jaKOSzgJMZikFGRXKy&#xA;vxdGPPj9GKou50T85LS31BNFb6sXS8k02NZLMRiW41S5nZrgMjFpGs3iEZX4Q1eXfFWvM/k780dW&#xA;/Qc6Xbi6t9Nt4dW4SRQie4TUbSaQMqtxU+jE7lk8OPRqYqlbeTvzm1KW0m8wBbyWwun9F1ntwTb/&#xA;AFzTbrYoIeQYWUwXkoPxKCAOir3LFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXnXlKy/M600m4tr1DG9vodpBpsTvaIi6klqoloYluSw9cGrvRR0CMN8VU/&#xA;J8f5xDU9Ik8wu/1JV9LU4X+oUIY6ifVb6v8AF6iiOwX4Dx+NtjvxVS+w0386YLpSJ5IbOFi62o/R&#xA;zRycrmSRgxIaQck4jZhsdt8VQkdv+c+taLq4+sXMdvPHenTlkGnJLK/1aVYYvsDhC85QLzo/XkQK&#xA;HFU5h0z81H8z20t7PcPoUGqm5EUUlnGwtTPqMCQ0TiZIVgaymdZKtTlxPqKFCqGl0T809T83wjVG&#xA;kPlu21xLtUD2aobWH620PBU/eNHT6rzWX4vUqVApyxV6pirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVeFzf85WaJHM8f6AuTwYrX1o96Gn8ubQdln+cw41n/Q2&#xA;Gh/9WC5/5HR/804f5LP85eMO/wChsND/AOrBc/8AI6P/AJpx/ks/zl4w7/obDQ/+rBc/8jo/+acf&#xA;5LP85eMO/wChsND/AOrBc/8AI6P/AJpx/ks/zl4w7/obDQ/+rBc/8jo/+acf5LP85eMPXPJfmiDz&#xA;T5Ysdfgga2ivldlgchmXhI0e5G37Ga/Ni4JGPczBTvKldirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVfCPlubTofPWlzanw/RsWqQPe+qOUfoLcKZOakGq8K1FM6nIC&#xA;YGudNPVlUnmPylqdt5gmXTrW0uPqtrb2IcWiSSPEJRNOpNsY1Z6rUIisdvirvlPhyFb9fP8AWysI&#xA;q0uPy0hTy8Ukge50cSw6v69tGUujcWjyq45GVZxDdBkDOg2ZBSi1yJGT1efL5/ZsuyF1K68m3D+b&#xA;Z4X062hvI4ZtFaKFfVCqoPoCBoikTy1/eNFw4SLt+7NMMRMcPPbn+Px812RTap5Hi1MzSR6XcabH&#xA;qUcui2yW6q408QS8o71gis5J9FW9Us3MMVNKkjhnXW639/l9q7MU88yeVXfRj5boLX6gWukK0ljn&#xA;kvLiUxStQeo0UbpGH7qF+WXYeLfi7/0BiX1T+RP/AJKfy/8A8Y5v+omXNHrv72X46NseTPMxEuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KviOf8svzC+vSyHyxqMq&#xA;eox4/VpqMKmm4HT5Z0v5jHX1BqrdGR+TvzOg/wB4/J89sPbTmmb5h7hZnH0NmJLFhnXHklKv6Zj9&#xA;kOEH4hsEyOQHy/Wq/oD88QCsen65Cpp8MMU8Q26bRhcqydn9nz+uGKX9YRl99p8bJ0JcNB/PShBs&#xA;9fdT1V1uXG3s1RkY9m9mxNxx4QfKMR9wT4+X+cfmsfyp+bEwK3Xla5ugepl0xS5/56rGsn3Nl4wa&#xA;eJuMjH3TlX+lvh+xj4kjzo/AJfc/lr+YM0nOPylf24pvHHbXBX/kpzb8cyseaERRnxe+v0UwIvo+&#xA;q/yb03UNM/LTRLHUbaS0vIY5RNbzKUkUtPIw5KdxsQc0mskJZSRyZjkzPMZLsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirz2LylqUqxyaR5sEdqENteNETIXaS&#xA;J4kCSLLSMq8wddiagUIxVFjyJ5lhSSOy80XFrF6nO2iSMMqA+oSjcmJcFnDV6nepPw0VV7vyvq93&#xA;PoTXGqLDe6fa3dtKUZmlmWb0lEySHg4kVY/iYDq3h1VSG/8AI3n+61GZpPMptrOzih/R17KGdlmF&#xA;tLbyScEljFQJeXMkEn7QYYqmF35U1qB7GbVfNn+ix6gl9cQ3I4pMyXAnVEJkXgEWNVVN06njWhCq&#xA;eX2hazOY/qetEXUJu0a5ljjeSNbshowiRiNKwLxC8wajriqS33kPzLfaTeWR80SyNeBYrnkrNEUW&#xA;COExhBJyQchI5o1WJAfkAaqpnpPl/WYtUt7x/MUt9bxO8j25+y8MyScVIVuP22SQNTahC8U+EKqH&#xA;mHypNd3GmSyeYJLa7t1ECyyempuazxzOjxr6cbclioOK1BofEFVS0jyt5h07U7R7/wA4XF/DaoZb&#xA;u0mEaGZPjDSPxI4qGWGlBQUcb89lVsfke702OsPmCWz0pZBLNCGZB6a3iyqhn5hgotI0tvEBRQgF&#xA;gVU00Dy7qdlolhZTay94LaCeF5FRAlwJmBhd682HpLsvpsq79KUAVSDTPJmqaTa6fog83MjQxxgW&#xA;lBG8lLv6xIV4yLJxZFaIU7V37BVHWPknzNarZofMs7w2f1X04grKGFvGUcOS7FxJ1IP01xVNNb8v&#xA;3V7HHG+qUb9JQ3tv9YjRgiRAH6tGqGEMDxYgvyYVJG4Uqqkek+TvMkWjXsGqeam1L63Y3lk87BhE&#xA;jStSGQK0j0MC8kJ5cm/aNRiq+98ma5JqVv8AUvM8tppwnK3dkhZGeLjCRDEY3RISFhY/u4wfiJ6Y&#xA;qpyeUfNolhnuPNqrd2ylpLkwkEx/uCeUXqrGF5QNWgAavxVxVNtL8veYbOO6F95ikc3VvHBbsiLW&#xA;CfjRpENwZ+RLfEoYd6GoC8VV2q+WJjrba3aaiumfDai7dYkq8Vs0zSh3JWnqCVN+nwCoO1FUts/K&#xA;WvuI3g823FzbxCEwgMXPOOEqxkkDn1Fdzz4n6a4qjdG8r65pmmz2U/mOZvUt4LWymCJzheKMIZF9&#xA;czhmcitCPv2oqp6r5T1mXzDLqVjqrWMF29ubr0lAdIbaNwy8nMnL1JCm3FVVQ37TMWVSyy/L7zVY&#xA;6Y8C+bbi3lImaS4iWqhprxrtn4TtMOXF+BY7kdfDFWR6Ho2t29pbG91SdpkuZJ5Yz6cnOAo0UFvI&#xA;zKx+BODOyEcpATWjYqkdt5F1exu3mt9eMDysGhjhT0yxW7kuWVubP637mV4x6nKn2jWmKpPpvkz8&#xA;y7jTIXvPNhgS4WQTekZJDGhnllimWb19z6LKnEGnclwuKsim8p+YJxII/Nd0lwZvXtnjCUWBpkkK&#xA;PHuj1WMqGoKciFAX4cVTHV9Dmv3a3bVpFeW4F3BD+7Vookh9Fo4+AVivNuZLV3NPDFUoTyf5mh4r&#xA;D5ouDJbIDDAiqoUExBaoxKN+7iljXmOO4anMMzKoKz8neZZ9L0STWNbFtrGkfX5pmJadTHc3POBn&#xA;9SQ8vq8KjhzLASBT8QXdVT1Xyj5+Pl+9/Q/miW71K4iMcDcuEStxhERVi7sgiKynkGLuGHMvT4lU&#xA;y1X8r7S+hmhj1W8skleSThbMqIrvfG+5BQPtBjwr4BfDFUZ5f8l3Om3cV9cardTTqJhJbeoWt+Mh&#xA;pEiqwrSKIIlerFFY96qt6z5GTUo7dV1S7t5ba0azF2j1uJFZkYmaXq3L0/ipxbc0ZeRqqh7n8vJZ&#xA;2Ytrt80c0sstzDIwdHEoAChTTiEIqKYqnOo+W7e/t54J7iZ1mu7e9X1Csgia3kikEcQYUVG9Hcf5&#xA;RxVidp+VN/DLarL5n1KaK2guk9f1THOZbgBEccP3Y9JKhdvbpirKtG8uNp1tZxNqFzO1o0jklyFl&#xA;9ReNJQxcsF6rVuuKsdj/ACotrURrp2tX9jFDH6dvBE4EcVIuClVFK8Hq6K/JVqQBSnFVXvvyxsb3&#xA;RItIu7+e7hQzq9xdUnuDHKy8OMrGqyQpEipLu23L7W+KoWf8poZrmW6bXL/621vJbQ3RkJmRZLkz&#xA;sedfiqHZKfZodgNsVT/zF5Rh1q1nhlvJ09W5tbuNH4zQo9m6uiiFxxKOyVdT1O4oaYqkMv5Y30uu&#xA;x30nmK+FkDcStbQObf05ZUgjj9AR/AqIsLdQftU7k4qmt75FjvLGygfUbiO6srN7JL6IlZirywyc&#xA;uZLP/wAe/H7W4Y4qgpfyzEl21ydf1M0eSW3jM7BYpJFkUFQpWoQvGyqfhrGDSpaqqa+YfKEWsxKr&#xA;X9zbyRXa39tKjKxhmjt2hj9IMCAqsfU4moLVrscVY3b/AJOxW8MlrDr+oLp7PE8djyBiQRSSycT3&#xA;fkZzyLEkkDwxVN9N/L2Kx1PS70areTrpicUt5nMiO/1Y27TEsS3qPyLO1TU/iq7W/wAurPVreOGf&#xA;Ubuq2gsZZmcPJNEOTfvWI+I+qY5CRTdKdCwKqFk/LW6aWWRPMupIzxyxxsJOTJ6kxnEg5Ej1VZqB&#xA;qUptTFUTefl6l7pOpafc6pcumofVCFIVoYWs3WRPTgk9RODsgDo1Qy7HFWj5ClGsW2oLqLp+/imv&#xA;UirCrpAHKQoilgI2kerqfDbvVVGeYPJi6zBbxPqd3B9Uu2v4HVgWFwH5xVJH93HVlCeB64qlB/Kq&#xA;D0GtxrN81u4/eRSyPMGcJMoakjsBvOC1NzwG43xVXuvy1S5iZJNZvixlDhjK7D0+byNEyluJVmk/&#xA;4VfDFVmm/lo1pc211Pr2oXdxbTCVHkldQV+s/WTGyKwQqd46cfs7Yqmus+TYNUijSS/u45IrmS6i&#xA;uFcGWP1gUkjjYj4UMTPGPANtviqUWP5YLaRW9vHrd79Us4La3srdXKLF9Wr8Q4MoPKpHEinHbFUX&#xA;ovkD9Hapa6lNq1zeXNq0lHkJBkikWRRFNRqOE9VeNRtwX3JVVNX8gWWpQxCS+uhd21pPaWl+zh54&#xA;zcfal5EcWfjVRUdDtiqzR/IcmnalaX7a1eXUkCt9YEzFvXZvWoz8iVBAnA+EV+BaEAsGVU9c/Lay&#xA;1dYRPqV4Gisjp8kpcNJNEat++Yj4j6vCQ9N0p0LAqqVz+WrXF9HOdcvo7dbU2z2kTmNHeoYTsyFW&#xA;9RSNjXx8cVf/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3916B7E8245E11DE88E3FB8C24020358</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3916B7E9245E11DE88E3FB8C24020358</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2830386ACFEADD11A338BF163782AA9B</stRef:instanceID>
            <stRef:documentID>uuid:588C34A778D311DD9C4AD2A45E86598A</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.902778</stDim:w>
            <stDim:h>297.038889</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=16 Y=100 K=0</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>15.999996</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=92 Y=0 K=10</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>91.999992</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -84.0732 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 84.0732 li
313.069 84.0732 li
313.069 0 li
cp
clp
[1 0 0 1 0 0 ]ct
4.23584 73.4482 mo
3.60645 73.4482 li
3.60645 71.1865 li
1.38721 71.1865 li
1.38721 73.4482 li
0.757813 73.4482 li
0.757813 68.8984 li
1.38721 68.8984 li
1.38721 70.7314 li
3.60645 70.7314 li
3.60645 68.8984 li
4.23584 68.8984 li
4.23584 73.4482 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 nzopmsc
f
6.45557 71.7061 mo
5.94287 71.8623 5.67676 72.1094 5.67676 72.5186 cv
5.67676 72.8564 5.91016 73.0713 6.14404 73.0713 cv
6.55908 73.0713 7.09131 72.5576 7.01318 71.5439 cv
6.45557 71.7061 li
cp
6.80566 73.0967 mo
6.57861 73.3252 6.29297 73.5264 5.99463 73.5264 cv
5.44971 73.5264 5.07324 73.1357 5.07324 72.5254 cv
5.07324 71.96 5.55322 71.6025 6.22803 71.4014 cv
7.01318 71.1533 li
6.9873 70.7568 6.68262 70.5039 6.36426 70.5039 cv
5.98828 70.5039 5.74805 70.6592 5.51416 70.8545 cv
5.28711 70.5615 li
5.61182 70.25 5.94287 70.1201 6.39697 70.1201 cv
6.88379 70.1201 7.59717 70.2764 7.59717 71.2256 cv
7.59717 72.6553 li
7.59717 72.9023 7.62988 73.2139 7.74023 73.4482 cv
7.104 73.4482 li
7.02637 73.3115 7.01318 73.1035 7.01318 72.8955 cv
6.80566 73.0967 li
cp
f
9.1416 70.6006 mo
9.37549 70.3545 li
9.51172 70.2178 9.72559 70.1201 9.8623 70.1201 cv
10.0049 70.1201 10.2192 70.2236 10.4009 70.4385 cv
10.1348 70.8154 li
9.9917 70.7441 9.84912 70.6787 9.69971 70.6787 cv
9.40137 70.6787 9.15479 70.9775 9.15479 71.7002 cv
9.15479 73.4482 li
8.5708 73.4482 li
8.5708 70.1982 li
9.1416 70.1982 li
9.1416 70.6006 li
cp
f
10.8613 73.4482 mo
10.8613 68.6709 li
11.4453 68.6709 li
11.4453 73.4482 li
10.8613 73.4482 li
cp
f
12.8472 71.7842 mo
12.8472 72.3955 13.0547 73.1104 13.814 73.1104 cv
14.5796 73.1104 14.7871 72.3955 14.7871 71.7842 cv
14.7871 71.1992 14.5469 70.5361 13.814 70.5361 cv
13.0869 70.5361 12.8472 71.1992 12.8472 71.7842 cv
cp
12.2173 71.7842 mo
12.2173 70.7314 12.9961 70.1201 13.814 70.1201 cv
14.6313 70.1201 15.4165 70.7314 15.4165 71.7842 cv
15.4165 72.792 14.7744 73.5264 13.814 73.5264 cv
12.8599 73.5264 12.2173 72.792 12.2173 71.7842 cv
cp
f
18.4536 70.1982 mo
18.7715 70.9717 19.0894 71.752 19.4009 72.6807 cv
19.4141 72.6807 li
19.667 71.7256 19.9331 70.9326 20.1924 70.1338 cv
20.731 70.2236 li
19.5889 73.4482 li
19.1802 73.4482 li
18.856 72.6416 18.5249 71.8369 18.207 70.9131 cv
18.1938 70.9131 li
17.8823 71.8369 17.5645 72.6416 17.2466 73.4482 cv
16.8638 73.4482 li
15.7412 70.2764 li
16.312 70.1338 li
16.5781 70.9326 16.8506 71.7256 17.1104 72.6807 cv
17.123 72.6807 li
17.4346 71.752 17.7524 70.9717 18.0708 70.1982 cv
18.4536 70.1982 li
cp
f
20.4131 74.4502 mo
20.8418 73.3057 li
21.0103 72.8369 21.0815 72.6943 21.335 72.6943 cv
21.4775 72.6943 21.8018 72.8311 21.4775 73.377 cv
20.77 74.5928 li
20.4131 74.4502 li
cp
f
26.8892 69.3525 mo
25.2798 69.3525 li
25.2798 70.8223 li
26.8569 70.8223 li
26.8569 71.2773 li
25.2798 71.2773 li
25.2798 72.9932 li
27.1685 72.9932 li
27.1685 73.4482 li
24.6504 73.4482 li
24.6504 68.8984 li
26.8892 68.8984 li
26.8892 69.3525 li
cp
f
28.4204 70.6006 mo
28.7256 70.2764 29.1929 70.1201 29.5303 70.1201 cv
30.2764 70.1201 30.6787 70.5361 30.6787 71.3555 cv
30.6787 73.4482 li
30.0947 73.4482 li
30.0947 71.4785 li
30.0947 70.8682 29.8354 70.5498 29.3096 70.5498 cv
28.8491 70.5498 28.4272 70.8682 28.4272 71.4912 cv
28.4272 73.4482 li
27.8433 73.4482 li
27.8433 70.1982 li
28.4204 70.1982 li
28.4204 70.6006 li
cp
f
34.001 71.7197 mo
34.001 71.1084 33.6704 70.5361 33.0342 70.5361 cv
32.3594 70.5361 32.0806 71.0693 32.0806 71.7588 cv
32.0806 72.4541 32.3789 73.1104 32.9956 73.1104 cv
33.7026 73.1104 34.001 72.4404 34.001 71.7197 cv
cp
34.585 73.3311 mo
34.585 74.5732 33.813 75.0732 32.937 75.0732 cv
32.4565 75.0732 31.9766 74.9814 31.6001 74.749 cv
31.7627 74.3643 li
32.1582 74.5928 32.5215 74.6572 32.9238 74.6572 cv
33.5923 74.6572 34.001 74.2275 34.001 73.377 cv
34.001 72.9346 li
33.9883 72.9346 li
33.7612 73.2529 33.417 73.5264 32.9048 73.5264 cv
32.0093 73.5264 31.4512 72.8242 31.4512 71.7842 cv
31.4512 70.9395 32.0737 70.1201 33.002 70.1201 cv
33.3911 70.1201 33.8066 70.3154 33.9883 70.6475 cv
34.001 70.6475 li
34.001 70.1982 li
34.585 70.1982 li
34.585 73.3311 li
cp
f
35.5649 73.4482 mo
35.5649 68.6709 li
36.1489 68.6709 li
36.1489 73.4482 li
35.5649 73.4482 li
cp
f
38.3032 71.7061 mo
37.7905 71.8623 37.5244 72.1094 37.5244 72.5186 cv
37.5244 72.8564 37.7583 73.0713 37.9917 73.0713 cv
38.4072 73.0713 38.9395 72.5576 38.8613 71.5439 cv
38.3032 71.7061 li
cp
38.6538 73.0967 mo
38.4268 73.3252 38.1411 73.5264 37.8428 73.5264 cv
37.2974 73.5264 36.9209 73.1357 36.9209 72.5254 cv
36.9209 71.96 37.4014 71.6025 38.0762 71.4014 cv
38.8613 71.1533 li
38.8354 70.7568 38.5303 70.5039 38.2124 70.5039 cv
37.8359 70.5039 37.5962 70.6592 37.3623 70.8545 cv
37.1353 70.5615 li
37.4595 70.25 37.7905 70.1201 38.2451 70.1201 cv
38.7314 70.1201 39.4453 70.2764 39.4453 71.2256 cv
39.4453 72.6553 li
39.4453 72.9023 39.478 73.2139 39.5879 73.4482 cv
38.9521 73.4482 li
38.8745 73.3115 38.8613 73.1035 38.8613 72.8955 cv
38.6538 73.0967 li
cp
f
40.9961 70.6006 mo
41.3013 70.2764 41.7686 70.1201 42.106 70.1201 cv
42.8521 70.1201 43.2544 70.5361 43.2544 71.3555 cv
43.2544 73.4482 li
42.6704 73.4482 li
42.6704 71.4785 li
42.6704 70.8682 42.4106 70.5498 41.8853 70.5498 cv
41.4243 70.5498 41.0029 70.8682 41.0029 71.4912 cv
41.0029 73.4482 li
40.4189 73.4482 li
40.4189 70.1982 li
40.9961 70.1982 li
40.9961 70.6006 li
cp
f
46.5767 71.7197 mo
46.5767 71.1084 46.2461 70.5361 45.6099 70.5361 cv
44.9351 70.5361 44.6563 71.0693 44.6563 71.7588 cv
44.6563 72.4541 44.9546 73.1104 45.5708 73.1104 cv
46.2783 73.1104 46.5767 72.4404 46.5767 71.7197 cv
cp
46.5767 72.9346 mo
46.564 72.9346 li
46.3369 73.2529 45.9927 73.5264 45.4604 73.5264 cv
44.5845 73.5264 44.0269 72.8242 44.0269 71.7842 cv
44.0269 70.9395 44.6367 70.1201 45.5254 70.1201 cv
45.9668 70.1201 46.3628 70.2891 46.564 70.6006 cv
46.5767 70.6006 li
46.5767 68.6709 li
47.1606 68.6709 li
47.1606 73.4482 li
46.5767 73.4482 li
46.5767 72.9346 li
cp
f
50.8032 72.5732 mo
50.3188 72.5732 49.9297 72.1885 49.9297 71.6982 cv
49.9243 71.2139 50.314 70.8232 50.8032 70.8232 cv
51.2871 70.8232 51.6768 71.2139 51.6768 71.6982 cv
51.6768 72.1826 51.2871 72.5732 50.8032 72.5732 cv
cp
f
54.5156 68.8984 mo
55.145 68.8984 li
55.145 72.9932 li
57.0337 72.9932 li
57.0337 73.4482 li
54.5156 73.4482 li
54.5156 68.8984 li
cp
f
58.0132 71.7842 mo
58.0132 72.3955 58.2207 73.1104 58.98 73.1104 cv
59.7456 73.1104 59.9536 72.3955 59.9536 71.7842 cv
59.9536 71.1992 59.7134 70.5361 58.98 70.5361 cv
58.2534 70.5361 58.0132 71.1992 58.0132 71.7842 cv
cp
57.3838 71.7842 mo
57.3838 70.7314 58.1626 70.1201 58.98 70.1201 cv
59.7979 70.1201 60.583 70.7314 60.583 71.7842 cv
60.583 72.792 59.9404 73.5264 58.98 73.5264 cv
58.0264 73.5264 57.3838 72.792 57.3838 71.7842 cv
cp
f
61.9326 70.6006 mo
62.2378 70.2764 62.7046 70.1201 63.0425 70.1201 cv
63.7886 70.1201 64.1909 70.5361 64.1909 71.3555 cv
64.1909 73.4482 li
63.6069 73.4482 li
63.6069 71.4785 li
63.6069 70.8682 63.3472 70.5498 62.8218 70.5498 cv
62.3608 70.5498 61.939 70.8682 61.939 71.4912 cv
61.939 73.4482 li
61.355 73.4482 li
61.355 70.1982 li
61.9326 70.1982 li
61.9326 70.6006 li
cp
f
67.5132 71.7197 mo
67.5132 71.1084 67.1821 70.5361 66.5464 70.5361 cv
65.8716 70.5361 65.5923 71.0693 65.5923 71.7588 cv
65.5923 72.4541 65.8911 73.1104 66.5073 73.1104 cv
67.2148 73.1104 67.5132 72.4404 67.5132 71.7197 cv
cp
67.5132 72.9346 mo
67.5 72.9346 li
67.2729 73.2529 66.9292 73.5264 66.397 73.5264 cv
65.521 73.5264 64.9629 72.8242 64.9629 71.7842 cv
64.9629 70.9395 65.5728 70.1201 66.4619 70.1201 cv
66.9033 70.1201 67.2988 70.2891 67.5 70.6006 cv
67.5132 70.6006 li
67.5132 68.6709 li
68.0972 68.6709 li
68.0972 73.4482 li
67.5132 73.4482 li
67.5132 72.9346 li
cp
f
69.4858 71.7842 mo
69.4858 72.3955 69.6934 73.1104 70.4526 73.1104 cv
71.2183 73.1104 71.4258 72.3955 71.4258 71.7842 cv
71.4258 71.1992 71.186 70.5361 70.4526 70.5361 cv
69.7261 70.5361 69.4858 71.1992 69.4858 71.7842 cv
cp
68.8564 71.7842 mo
68.8564 70.7314 69.6353 70.1201 70.4526 70.1201 cv
71.27 70.1201 72.0552 70.7314 72.0552 71.7842 cv
72.0552 72.792 71.4131 73.5264 70.4526 73.5264 cv
69.4985 73.5264 68.8564 72.792 68.8564 71.7842 cv
cp
f
73.4053 70.6006 mo
73.71 70.2764 74.1772 70.1201 74.5146 70.1201 cv
75.2612 70.1201 75.6636 70.5361 75.6636 71.3555 cv
75.6636 73.4482 li
75.0791 73.4482 li
75.0791 71.4785 li
75.0791 70.8682 74.8198 70.5498 74.2939 70.5498 cv
73.8335 70.5498 73.4116 70.8682 73.4116 71.4912 cv
73.4116 73.4482 li
72.8276 73.4482 li
72.8276 70.1982 li
73.4053 70.1982 li
73.4053 70.6006 li
cp
f
79.3184 72.5732 mo
78.8345 72.5732 78.4448 72.1885 78.4448 71.6982 cv
78.4399 71.2139 78.8296 70.8232 79.3184 70.8232 cv
79.8027 70.8232 80.1919 71.2139 80.1919 71.6982 cv
80.1919 72.1826 79.8027 72.5732 79.3184 72.5732 cv
cp
f
87.0088 73.4482 mo
86.5156 73.4482 li
85.5293 72.2646 83.8359 70.2236 83.5635 69.8271 cv
83.5503 69.8271 li
83.5503 73.4482 li
83.0313 73.4482 li
83.0313 68.8984 li
83.4985 68.8984 li
84.4976 70.0811 86.1719 72.0703 86.4771 72.5254 cv
86.4897 72.5254 li
86.4897 68.8984 li
87.0088 68.8984 li
87.0088 73.4482 li
cp
f
90.1045 71.4717 mo
90.1045 70.9658 89.8901 70.5361 89.3774 70.5361 cv
88.7544 70.5361 88.5078 71.0557 88.4883 71.4717 cv
90.1045 71.4717 li
cp
88.4497 71.8623 mo
88.4429 72.5127 88.9038 73.1104 89.5464 73.1104 cv
89.8447 73.1104 90.208 72.999 90.4351 72.8311 cv
90.604 73.1494 li
90.2666 73.3896 89.8643 73.5264 89.5269 73.5264 cv
88.5146 73.5264 87.8462 72.9023 87.8462 71.7588 cv
87.8462 70.6338 88.6509 70.1201 89.3838 70.1201 cv
90.3701 70.1201 90.7012 71.0107 90.6362 71.8623 cv
88.4497 71.8623 li
cp
f
93.6538 70.1982 mo
93.9717 70.9717 94.2896 71.752 94.6011 72.6807 cv
94.6143 72.6807 li
94.8672 71.7256 95.1333 70.9326 95.3926 70.1338 cv
95.9312 70.2236 li
94.7891 73.4482 li
94.3804 73.4482 li
94.0562 72.6416 93.7251 71.8369 93.4072 70.9131 cv
93.394 70.9131 li
93.0825 71.8369 92.7646 72.6416 92.4468 73.4482 cv
92.064 73.4482 li
90.9414 70.2764 li
91.5122 70.1338 li
91.7783 70.9326 92.0508 71.7256 92.3105 72.6807 cv
92.3232 72.6807 li
92.6348 71.752 92.9531 70.9717 93.271 70.1982 cv
93.6538 70.1982 li
cp
f
99.2407 73.4482 mo
99.2407 71.4785 li
97.8716 68.9639 li
98.5527 68.833 li
99.6494 70.9912 li
100.843 68.833 li
101.401 68.9111 li
99.8701 71.4785 li
99.8701 73.4482 li
99.2407 73.4482 li
cp
f
101.993 71.7842 mo
101.993 72.3955 102.201 73.1104 102.96 73.1104 cv
103.726 73.1104 103.933 72.3955 103.933 71.7842 cv
103.933 71.1992 103.693 70.5361 102.96 70.5361 cv
102.233 70.5361 101.993 71.1992 101.993 71.7842 cv
cp
101.364 71.7842 mo
101.364 70.7314 102.142 70.1201 102.96 70.1201 cv
103.777 70.1201 104.563 70.7314 104.563 71.7842 cv
104.563 72.792 103.92 73.5264 102.96 73.5264 cv
102.006 73.5264 101.364 72.792 101.364 71.7842 cv
cp
f
105.906 70.6006 mo
106.14 70.3545 li
106.276 70.2178 106.49 70.1201 106.626 70.1201 cv
106.769 70.1201 106.983 70.2236 107.165 70.4385 cv
106.899 70.8154 li
106.756 70.7441 106.613 70.6787 106.464 70.6787 cv
106.166 70.6787 105.919 70.9775 105.919 71.7002 cv
105.919 73.4482 li
105.335 73.4482 li
105.335 70.1982 li
105.906 70.1982 li
105.906 70.6006 li
cp
f
107.625 68.6709 mo
108.209 68.6709 li
108.209 71.5107 li
108.307 71.5107 li
109.579 70.1338 li
110.013 70.3799 li
108.858 71.5889 li
110.228 73.2471 li
109.65 73.5127 li
108.223 71.6738 li
108.209 71.6738 li
108.209 73.4482 li
107.625 73.4482 li
107.625 68.6709 li
cp
f
114.289 71.6982 mo
114.289 71.2139 113.9 70.8232 113.416 70.8232 cv
112.926 70.8232 112.537 71.2139 112.542 71.6982 cv
112.542 72.1885 112.931 72.5732 113.416 72.5732 cv
113.9 72.5732 114.289 72.1826 114.289 71.6982 cv
cp
f
117.758 72.9932 mo
118.368 72.9932 li
118.88 72.9932 119.321 72.7139 119.321 72.168 cv
119.321 71.5303 118.776 71.3037 118.264 71.3037 cv
117.758 71.3037 li
117.758 72.9932 li
cp
117.758 70.8486 mo
118.069 70.8486 li
118.614 70.8486 119.088 70.4717 119.088 69.9834 cv
119.088 69.5811 118.809 69.3525 118.29 69.3525 cv
117.758 69.3525 li
117.758 70.8486 li
cp
117.128 73.4482 mo
117.128 68.8984 li
118.536 68.8984 li
119.211 68.8984 119.717 69.2363 119.717 69.8271 cv
119.717 70.5693 119.14 70.9199 118.79 70.9854 cv
118.79 70.9971 li
119.386 71.0166 119.997 71.3877 119.997 72.1289 cv
119.997 72.8896 119.348 73.4482 118.407 73.4482 cv
117.128 73.4482 li
cp
f
121.229 71.7842 mo
121.229 72.3955 121.437 73.1104 122.196 73.1104 cv
122.962 73.1104 123.169 72.3955 123.169 71.7842 cv
123.169 71.1992 122.929 70.5361 122.196 70.5361 cv
121.469 70.5361 121.229 71.1992 121.229 71.7842 cv
cp
120.6 71.7842 mo
120.6 70.7314 121.378 70.1201 122.196 70.1201 cv
123.014 70.1201 123.799 70.7314 123.799 71.7842 cv
123.799 72.792 123.157 73.5264 122.196 73.5264 cv
121.242 73.5264 120.6 72.792 120.6 71.7842 cv
cp
f
126.096 70.7178 mo
125.862 70.5615 125.674 70.5107 125.499 70.5107 cv
125.292 70.5107 125.025 70.6084 125.025 70.8809 cv
125.025 71.1533 125.324 71.29 125.694 71.5693 cv
126.109 71.8877 126.381 72.1553 126.381 72.6104 cv
126.381 73.1553 125.843 73.5264 125.246 73.5264 cv
124.876 73.5264 124.461 73.3643 124.247 73.1162 cv
124.532 72.7852 li
124.72 72.9609 124.974 73.1104 125.233 73.1104 cv
125.505 73.1104 125.785 72.9678 125.785 72.6494 cv
125.785 72.2725 125.447 72.1094 125.142 71.8877 cv
124.772 71.6221 124.448 71.4014 124.448 70.958 cv
124.448 70.4453 124.954 70.1201 125.525 70.1201 cv
125.843 70.1201 126.154 70.25 126.323 70.4189 cv
126.096 70.7178 li
cp
f
127.848 69.2236 mo
127.264 69.4189 li
127.264 70.1982 li
126.81 70.1982 li
126.81 70.5361 li
127.264 70.5361 li
127.264 72.4863 li
127.264 73.1494 127.576 73.5264 128.225 73.5264 cv
128.445 73.5264 128.685 73.4482 128.886 73.3184 cv
128.744 72.9932 li
128.633 73.0518 128.51 73.1035 128.296 73.1035 cv
127.939 73.1035 127.848 72.8311 127.848 72.376 cv
127.848 70.5361 li
128.698 70.5361 li
128.698 70.1982 li
127.848 70.1982 li
127.848 69.2236 li
cp
f
129.808 71.7842 mo
129.808 72.3955 130.015 73.1104 130.774 73.1104 cv
131.54 73.1104 131.748 72.3955 131.748 71.7842 cv
131.748 71.1992 131.508 70.5361 130.774 70.5361 cv
130.048 70.5361 129.808 71.1992 129.808 71.7842 cv
cp
129.178 71.7842 mo
129.178 70.7314 129.957 70.1201 130.774 70.1201 cv
131.592 70.1201 132.377 70.7314 132.377 71.7842 cv
132.377 72.792 131.735 73.5264 130.774 73.5264 cv
129.821 73.5264 129.178 72.792 129.178 71.7842 cv
cp
f
133.727 70.6006 mo
134.032 70.2764 134.499 70.1201 134.836 70.1201 cv
135.583 70.1201 135.985 70.5361 135.985 71.3555 cv
135.985 73.4482 li
135.401 73.4482 li
135.401 71.4785 li
135.401 70.8682 135.142 70.5498 134.616 70.5498 cv
134.155 70.5498 133.733 70.8682 133.733 71.4912 cv
133.733 73.4482 li
133.149 73.4482 li
133.149 70.1982 li
133.727 70.1982 li
133.727 70.6006 li
cp
f
139.641 72.5732 mo
139.156 72.5732 138.767 72.1885 138.767 71.6982 cv
138.762 71.2139 139.151 70.8232 139.641 70.8232 cv
140.125 70.8232 140.514 71.2139 140.514 71.6982 cv
140.514 72.1826 140.125 72.5732 139.641 72.5732 cv
cp
f
145.481 69.6006 mo
145.261 69.4375 144.969 69.2754 144.696 69.2754 cv
144.242 69.2754 143.989 69.542 143.989 69.8926 cv
143.989 70.2178 144.268 70.458 144.852 70.8809 cv
145.475 71.3359 145.838 71.752 145.838 72.3369 cv
145.838 73.0576 145.157 73.5264 144.43 73.5264 cv
143.996 73.5264 143.477 73.3701 143.152 73.0518 cv
143.431 72.6748 li
143.697 72.8633 143.989 73.0713 144.417 73.0713 cv
144.865 73.0713 145.209 72.8311 145.209 72.3232 cv
145.209 71.752 144.528 71.3818 144.158 71.1084 cv
143.781 70.8154 143.36 70.5361 143.36 69.8926 cv
143.36 69.2822 143.95 68.8203 144.657 68.8203 cv
145.131 68.8203 145.527 68.9893 145.78 69.2754 cv
145.481 69.6006 li
cp
f
147.856 71.7061 mo
147.344 71.8623 147.078 72.1094 147.078 72.5186 cv
147.078 72.8564 147.312 73.0713 147.545 73.0713 cv
147.961 73.0713 148.492 72.5576 148.414 71.5439 cv
147.856 71.7061 li
cp
148.207 73.0967 mo
147.98 73.3252 147.694 73.5264 147.396 73.5264 cv
146.851 73.5264 146.474 73.1357 146.474 72.5254 cv
146.474 71.96 146.955 71.6025 147.629 71.4014 cv
148.414 71.1533 li
148.389 70.7568 148.084 70.5039 147.766 70.5039 cv
147.389 70.5039 147.149 70.6592 146.916 70.8545 cv
146.688 70.5615 li
147.013 70.25 147.344 70.1201 147.798 70.1201 cv
148.285 70.1201 148.998 70.2764 148.998 71.2256 cv
148.998 72.6553 li
148.998 72.9023 149.031 73.2139 149.141 73.4482 cv
148.506 73.4482 li
148.428 73.3115 148.414 73.1035 148.414 72.8955 cv
148.207 73.0967 li
cp
f
150.549 70.1982 mo
149.973 70.1982 li
149.973 73.4482 li
150.557 73.4482 li
150.557 71.4912 li
150.557 70.8682 150.979 70.5498 151.438 70.5498 cv
151.965 70.5498 152.223 70.8682 152.223 71.4785 cv
152.223 73.4482 li
152.809 73.4482 li
152.809 71.3555 li
152.809 70.5361 152.406 70.1201 151.658 70.1201 cv
151.322 70.1201 150.854 70.2764 150.549 70.6006 cv
150.549 70.1982 li
cp
f
157.998 69.3525 mo
156.389 69.3525 li
156.389 71.082 li
157.967 71.082 li
157.967 71.5371 li
156.389 71.5371 li
156.389 73.4482 li
155.76 73.4482 li
155.76 68.8984 li
157.998 68.8984 li
157.998 69.3525 li
cp
f
159.42 70.6006 mo
159.654 70.3545 li
159.789 70.2178 160.004 70.1201 160.141 70.1201 cv
160.283 70.1201 160.496 70.2236 160.678 70.4385 cv
160.412 70.8154 li
160.27 70.7441 160.127 70.6787 159.979 70.6787 cv
159.68 70.6787 159.434 70.9775 159.434 71.7002 cv
159.434 73.4482 li
158.85 73.4482 li
158.85 70.1982 li
159.42 70.1982 li
159.42 70.6006 li
cp
f
162.859 71.5439 mo
162.938 72.5576 162.404 73.0713 161.99 73.0713 cv
161.756 73.0713 161.521 72.8564 161.521 72.5186 cv
161.521 72.1094 161.789 71.8623 162.301 71.7061 cv
162.859 71.5439 li
cp
162.859 72.8955 mo
162.859 73.1035 162.871 73.3115 162.949 73.4482 cv
163.585 73.4482 li
163.474 73.2139 163.442 72.9023 163.442 72.6553 cv
163.442 71.2256 li
163.442 70.2764 162.729 70.1201 162.242 70.1201 cv
161.789 70.1201 161.457 70.25 161.133 70.5615 cv
161.359 70.8545 li
161.594 70.6592 161.834 70.5039 162.211 70.5039 cv
162.527 70.5039 162.832 70.7568 162.859 71.1533 cv
162.074 71.4014 li
161.398 71.6025 160.918 71.96 160.918 72.5254 cv
160.918 73.1357 161.295 73.5264 161.84 73.5264 cv
162.139 73.5264 162.424 73.3252 162.65 73.0967 cv
162.859 72.8955 li
cp
f
164.993 70.6006 mo
165.298 70.2764 165.765 70.1201 166.103 70.1201 cv
166.849 70.1201 167.251 70.5361 167.251 71.3555 cv
167.251 73.4482 li
166.667 73.4482 li
166.667 71.4785 li
166.667 70.8682 166.407 70.5498 165.882 70.5498 cv
165.421 70.5498 164.999 70.8682 164.999 71.4912 cv
164.999 73.4482 li
164.415 73.4482 li
164.415 70.1982 li
164.993 70.1982 li
164.993 70.6006 li
cp
f
170.735 73.1885 mo
170.417 73.415 170.034 73.5264 169.755 73.5264 cv
168.218 73.5264 168.022 72.2646 168.022 71.8174 cv
168.022 71.0049 168.562 70.1201 169.782 70.1201 cv
170.112 70.1201 170.411 70.2041 170.651 70.3867 cv
170.456 70.7178 li
170.269 70.6279 170.028 70.5498 169.788 70.5498 cv
169.257 70.5498 168.653 70.9004 168.653 71.7842 cv
168.653 72.46 168.997 73.0967 169.782 73.0967 cv
170.062 73.0967 170.321 73.0264 170.573 72.8633 cv
170.735 73.1885 li
cp
f
171.981 70.1982 mo
171.981 73.4482 li
171.397 73.4482 li
171.397 70.1982 li
171.981 70.1982 li
cp
171.319 69.126 mo
171.319 68.9639 171.456 68.7813 171.688 68.7813 cv
171.923 68.7813 172.06 68.9639 172.06 69.126 cv
172.06 69.3018 171.976 69.5225 171.688 69.5225 cv
171.403 69.5225 171.319 69.3018 171.319 69.126 cv
cp
f
174.726 70.4189 mo
174.558 70.25 174.245 70.1201 173.929 70.1201 cv
173.356 70.1201 172.851 70.4453 172.851 70.958 cv
172.851 71.4014 173.175 71.6221 173.546 71.8877 cv
173.851 72.1094 174.188 72.2725 174.188 72.6494 cv
174.188 72.9678 173.909 73.1104 173.636 73.1104 cv
173.376 73.1104 173.124 72.9609 172.935 72.7852 cv
172.649 73.1162 li
172.864 73.3643 173.278 73.5264 173.649 73.5264 cv
174.245 73.5264 174.784 73.1553 174.784 72.6104 cv
174.784 72.1553 174.513 71.8877 174.097 71.5693 cv
173.728 71.29 173.429 71.1533 173.429 70.8809 cv
173.429 70.6084 173.694 70.5107 173.901 70.5107 cv
174.077 70.5107 174.265 70.5615 174.499 70.7178 cv
174.726 70.4189 li
cp
f
178.022 73.1885 mo
177.704 73.415 177.321 73.5264 177.042 73.5264 cv
175.505 73.5264 175.31 72.2646 175.31 71.8174 cv
175.31 71.0049 175.849 70.1201 177.069 70.1201 cv
177.399 70.1201 177.698 70.2041 177.938 70.3867 cv
177.743 70.7178 li
177.556 70.6279 177.315 70.5498 177.075 70.5498 cv
176.544 70.5498 175.94 70.9004 175.94 71.7842 cv
175.94 72.46 176.284 73.0967 177.069 73.0967 cv
177.349 73.0967 177.606 73.0264 177.86 72.8633 cv
178.022 73.1885 li
cp
f
179.093 71.7842 mo
179.093 72.3955 179.302 73.1104 180.06 73.1104 cv
180.825 73.1104 181.034 72.3955 181.034 71.7842 cv
181.034 71.1992 180.794 70.5361 180.06 70.5361 cv
179.333 70.5361 179.093 71.1992 179.093 71.7842 cv
cp
178.464 71.7842 mo
178.464 70.7314 179.243 70.1201 180.06 70.1201 cv
180.878 70.1201 181.663 70.7314 181.663 71.7842 cv
181.663 72.792 181.021 73.5264 180.06 73.5264 cv
179.106 73.5264 178.464 72.792 178.464 71.7842 cv
cp
f
185.097 72.5732 mo
184.614 72.5732 184.224 72.1885 184.224 71.6982 cv
184.22 71.2139 184.608 70.8232 185.097 70.8232 cv
185.581 70.8232 185.972 71.2139 185.972 71.6982 cv
185.972 72.1826 185.581 72.5732 185.097 72.5732 cv
cp
f
189.751 73.4482 mo
189.751 69.3525 li
188.298 69.3525 li
188.298 68.8984 li
191.841 68.8984 li
191.841 69.3525 li
190.38 69.3525 li
190.38 73.4482 li
189.751 73.4482 li
cp
f
192.329 71.7842 mo
192.329 72.3955 192.536 73.1104 193.296 73.1104 cv
194.062 73.1104 194.269 72.3955 194.269 71.7842 cv
194.269 71.1992 194.028 70.5361 193.296 70.5361 cv
192.569 70.5361 192.329 71.1992 192.329 71.7842 cv
cp
191.7 71.7842 mo
191.7 70.7314 192.478 70.1201 193.296 70.1201 cv
194.112 70.1201 194.899 70.7314 194.899 71.7842 cv
194.899 72.792 194.257 73.5264 193.296 73.5264 cv
192.341 73.5264 191.7 72.792 191.7 71.7842 cv
cp
f
196.241 70.6006 mo
196.476 70.3545 li
196.612 70.2178 196.825 70.1201 196.962 70.1201 cv
197.104 70.1201 197.319 70.2236 197.501 70.4385 cv
197.235 70.8154 li
197.091 70.7441 196.948 70.6787 196.8 70.6787 cv
196.501 70.6787 196.255 70.9775 196.255 71.7002 cv
196.255 73.4482 li
195.671 73.4482 li
195.671 70.1982 li
196.241 70.1982 li
196.241 70.6006 li
cp
f
198.37 71.7842 mo
198.37 72.3955 198.577 73.1104 199.337 73.1104 cv
200.103 73.1104 200.31 72.3955 200.31 71.7842 cv
200.31 71.1992 200.069 70.5361 199.337 70.5361 cv
198.61 70.5361 198.37 71.1992 198.37 71.7842 cv
cp
197.741 71.7842 mo
197.741 70.7314 198.519 70.1201 199.337 70.1201 cv
200.155 70.1201 200.94 70.7314 200.94 71.7842 cv
200.94 72.792 200.298 73.5264 199.337 73.5264 cv
198.384 73.5264 197.741 72.792 197.741 71.7842 cv
cp
f
202.29 70.6006 mo
202.595 70.2764 203.062 70.1201 203.399 70.1201 cv
204.146 70.1201 204.548 70.5361 204.548 71.3555 cv
204.548 73.4482 li
203.964 73.4482 li
203.964 71.4785 li
203.964 70.8682 203.704 70.5498 203.179 70.5498 cv
202.718 70.5498 202.296 70.8682 202.296 71.4912 cv
202.296 73.4482 li
201.712 73.4482 li
201.712 70.1982 li
202.29 70.1982 li
202.29 70.6006 li
cp
f
206.261 70.1982 mo
207.11 70.1982 li
207.11 70.5361 li
206.261 70.5361 li
206.261 72.376 li
206.261 72.8311 206.351 73.1035 206.708 73.1035 cv
206.923 73.1035 207.046 73.0518 207.155 72.9932 cv
207.3 73.3184 li
207.099 73.4482 206.858 73.5264 206.638 73.5264 cv
205.987 73.5264 205.677 73.1494 205.677 72.4863 cv
205.677 70.5361 li
205.222 70.5361 li
205.222 70.1982 li
205.677 70.1982 li
205.677 69.4189 li
206.261 69.2236 li
206.261 70.1982 li
cp
f
208.22 71.7842 mo
208.22 72.3955 208.429 73.1104 209.187 73.1104 cv
209.952 73.1104 210.161 72.3955 210.161 71.7842 cv
210.161 71.1992 209.921 70.5361 209.187 70.5361 cv
208.46 70.5361 208.22 71.1992 208.22 71.7842 cv
cp
207.591 71.7842 mo
207.591 70.7314 208.37 70.1201 209.187 70.1201 cv
210.005 70.1201 210.79 70.7314 210.79 71.7842 cv
210.79 72.792 210.147 73.5264 209.187 73.5264 cv
208.233 73.5264 207.591 72.792 207.591 71.7842 cv
cp
f
215.099 71.6982 mo
215.099 71.2139 214.708 70.8232 214.226 70.8232 cv
213.735 70.8232 213.347 71.2139 213.351 71.6982 cv
213.351 72.1885 213.741 72.5732 214.226 72.5732 cv
214.708 72.5732 215.099 72.1826 215.099 71.6982 cv
cp
f
220.065 69.6006 mo
219.845 69.4375 219.554 69.2754 219.28 69.2754 cv
218.827 69.2754 218.573 69.542 218.573 69.8926 cv
218.573 70.2178 218.853 70.458 219.437 70.8809 cv
220.06 71.3359 220.423 71.752 220.423 72.3369 cv
220.423 73.0576 219.741 73.5264 219.015 73.5264 cv
218.579 73.5264 218.062 73.3701 217.735 73.0518 cv
218.015 72.6748 li
218.28 72.8633 218.573 73.0713 219.001 73.0713 cv
219.45 73.0713 219.794 72.8311 219.794 72.3232 cv
219.794 71.752 219.112 71.3818 218.741 71.1084 cv
218.366 70.8154 217.944 70.5361 217.944 69.8926 cv
217.944 69.2822 218.534 68.8203 219.241 68.8203 cv
219.716 68.8203 220.11 68.9893 220.364 69.2754 cv
220.065 69.6006 li
cp
f
221.44 70.1338 mo
221.772 70.958 222.11 71.79 222.435 72.7725 cv
222.446 72.7725 li
222.784 71.79 223.122 70.958 223.466 70.1338 cv
223.979 70.2568 li
222.312 74.0205 li
222.005 74.71 221.604 75.0732 221.046 75.0732 cv
220.753 75.0732 li
220.753 74.6572 li
220.981 74.6572 li
221.384 74.6572 221.669 74.5537 222.13 73.2666 cv
220.856 70.2959 li
221.44 70.1338 li
cp
f
226.853 71.7197 mo
226.853 71.1084 226.522 70.5361 225.886 70.5361 cv
225.212 70.5361 224.933 71.0693 224.933 71.7588 cv
224.933 72.4541 225.231 73.1104 225.847 73.1104 cv
226.554 73.1104 226.853 72.4404 226.853 71.7197 cv
cp
226.853 72.9346 mo
226.841 72.9346 li
226.612 73.2529 226.269 73.5264 225.737 73.5264 cv
224.86 73.5264 224.304 72.8242 224.304 71.7842 cv
224.304 70.9395 224.913 70.1201 225.802 70.1201 cv
226.243 70.1201 226.64 70.2891 226.841 70.6006 cv
226.853 70.6006 li
226.853 68.6709 li
227.437 68.6709 li
227.437 73.4482 li
226.853 73.4482 li
226.853 72.9346 li
cp
f
228.995 70.1982 mo
228.417 70.1982 li
228.417 73.4482 li
229.001 73.4482 li
229.001 71.4912 li
229.001 70.8682 229.423 70.5498 229.884 70.5498 cv
230.409 70.5498 230.669 70.8682 230.669 71.4785 cv
230.669 73.4482 li
231.253 73.4482 li
231.253 71.3555 li
231.253 70.5361 230.851 70.1201 230.104 70.1201 cv
229.767 70.1201 229.3 70.2764 228.995 70.6006 cv
228.995 70.1982 li
cp
f
234.282 71.4717 mo
234.282 70.9658 234.069 70.5361 233.556 70.5361 cv
232.933 70.5361 232.687 71.0557 232.667 71.4717 cv
234.282 71.4717 li
cp
232.628 71.8623 mo
232.622 72.5127 233.083 73.1104 233.726 73.1104 cv
234.022 73.1104 234.388 72.999 234.614 72.8311 cv
234.782 73.1494 li
234.444 73.3896 234.042 73.5264 233.706 73.5264 cv
232.692 73.5264 232.024 72.9023 232.024 71.7588 cv
232.024 70.6338 232.829 70.1201 233.563 70.1201 cv
234.55 70.1201 234.88 71.0107 234.815 71.8623 cv
232.628 71.8623 li
cp
f
235.729 70.1338 mo
236.062 70.958 236.397 71.79 236.724 72.7725 cv
236.735 72.7725 li
237.073 71.79 237.411 70.958 237.755 70.1338 cv
238.267 70.2568 li
236.599 74.0205 li
236.294 74.71 235.892 75.0732 235.335 75.0732 cv
235.042 75.0732 li
235.042 74.6572 li
235.269 74.6572 li
235.671 74.6572 235.958 74.5537 236.417 73.2666 cv
235.146 70.2959 li
235.729 70.1338 li
cp
f
242.349 71.6982 mo
242.349 71.2139 241.958 70.8232 241.476 70.8232 cv
240.985 70.8232 240.597 71.2139 240.601 71.6982 cv
240.601 72.1885 240.991 72.5732 241.476 72.5732 cv
241.958 72.5732 242.349 72.1826 242.349 71.6982 cv
cp
f
247.315 69.6006 mo
247.095 69.4375 246.804 69.2754 246.53 69.2754 cv
246.077 69.2754 245.823 69.542 245.823 69.8926 cv
245.823 70.2178 246.103 70.458 246.687 70.8809 cv
247.31 71.3359 247.673 71.752 247.673 72.3369 cv
247.673 73.0576 246.991 73.5264 246.265 73.5264 cv
245.829 73.5264 245.312 73.3701 244.985 73.0518 cv
245.265 72.6748 li
245.532 72.8633 245.823 73.0713 246.251 73.0713 cv
246.7 73.0713 247.044 72.8311 247.044 72.3232 cv
247.044 71.752 246.362 71.3818 245.991 71.1084 cv
245.616 70.8154 245.194 70.5361 245.194 69.8926 cv
245.194 69.2822 245.784 68.8203 246.491 68.8203 cv
246.966 68.8203 247.36 68.9893 247.614 69.2754 cv
247.315 69.6006 li
cp
f
249.112 70.1982 mo
249.112 73.4482 li
248.528 73.4482 li
248.528 70.1982 li
249.112 70.1982 li
cp
248.452 69.126 mo
248.452 68.9639 248.587 68.7813 248.821 68.7813 cv
249.056 68.7813 249.19 68.9639 249.19 69.126 cv
249.19 69.3018 249.106 69.5225 248.821 69.5225 cv
248.536 69.5225 248.452 69.3018 248.452 69.126 cv
cp
f
250.683 70.6006 mo
250.989 70.2764 251.456 70.1201 251.794 70.1201 cv
252.54 70.1201 252.942 70.5361 252.942 71.3555 cv
252.942 73.4482 li
252.358 73.4482 li
252.358 71.4785 li
252.358 70.8682 252.099 70.5498 251.573 70.5498 cv
251.112 70.5498 250.69 70.8682 250.69 71.4912 cv
250.69 73.4482 li
250.106 73.4482 li
250.106 70.1982 li
250.683 70.1982 li
250.683 70.6006 li
cp
f
256.265 71.7197 mo
256.265 71.1084 255.933 70.5361 255.298 70.5361 cv
254.622 70.5361 254.343 71.0693 254.343 71.7588 cv
254.343 72.4541 254.642 73.1104 255.259 73.1104 cv
255.966 73.1104 256.265 72.4404 256.265 71.7197 cv
cp
256.849 73.3311 mo
256.849 74.5732 256.075 75.0732 255.2 75.0732 cv
254.72 75.0732 254.239 74.9814 253.862 74.749 cv
254.024 74.3643 li
254.421 74.5928 254.784 74.6572 255.187 74.6572 cv
255.854 74.6572 256.265 74.2275 256.265 73.377 cv
256.265 72.9346 li
256.251 72.9346 li
256.024 73.2529 255.681 73.5264 255.167 73.5264 cv
254.272 73.5264 253.714 72.8242 253.714 71.7842 cv
253.714 70.9395 254.337 70.1201 255.265 70.1201 cv
255.653 70.1201 256.069 70.3154 256.251 70.6475 cv
256.265 70.6475 li
256.265 70.1982 li
256.849 70.1982 li
256.849 73.3311 li
cp
f
258.989 71.7061 mo
258.478 71.8623 258.21 72.1094 258.21 72.5186 cv
258.21 72.8564 258.444 73.0713 258.679 73.0713 cv
259.093 73.0713 259.626 72.5576 259.548 71.5439 cv
258.989 71.7061 li
cp
259.339 73.0967 mo
259.112 73.3252 258.827 73.5264 258.528 73.5264 cv
257.983 73.5264 257.606 73.1357 257.606 72.5254 cv
257.606 71.96 258.087 71.6025 258.763 71.4014 cv
259.548 71.1533 li
259.521 70.7568 259.216 70.5039 258.899 70.5039 cv
258.522 70.5039 258.282 70.6592 258.048 70.8545 cv
257.821 70.5615 li
258.146 70.25 258.478 70.1201 258.931 70.1201 cv
259.417 70.1201 260.132 70.2764 260.132 71.2256 cv
260.132 72.6553 li
260.132 72.9023 260.163 73.2139 260.274 73.4482 cv
259.638 73.4482 li
259.56 73.3115 259.548 73.1035 259.548 72.8955 cv
259.339 73.0967 li
cp
f
263.61 71.7324 mo
263.61 71.1406 263.312 70.5361 262.708 70.5361 cv
262.046 70.5361 261.688 71.0498 261.688 71.8877 cv
261.688 72.5127 261.974 73.1104 262.7 73.1104 cv
263.401 73.1104 263.61 72.3232 263.61 71.7324 cv
cp
261.688 70.7051 mo
261.702 70.7051 li
261.942 70.3154 262.403 70.1201 262.767 70.1201 cv
264.032 70.1201 264.239 71.2578 264.239 71.7256 cv
264.239 72.7139 263.655 73.5264 262.7 73.5264 cv
262.292 73.5264 261.942 73.3311 261.702 73.0186 cv
261.688 73.0186 li
261.688 75.0732 li
261.104 75.0732 li
261.104 70.1982 li
261.688 70.1982 li
261.688 70.7051 li
cp
f
265.421 71.7842 mo
265.421 72.3955 265.628 73.1104 266.388 73.1104 cv
267.153 73.1104 267.36 72.3955 267.36 71.7842 cv
267.36 71.1992 267.12 70.5361 266.388 70.5361 cv
265.659 70.5361 265.421 71.1992 265.421 71.7842 cv
cp
264.79 71.7842 mo
264.79 70.7314 265.569 70.1201 266.388 70.1201 cv
267.204 70.1201 267.989 70.7314 267.989 71.7842 cv
267.989 72.792 267.347 73.5264 266.388 73.5264 cv
265.433 73.5264 264.79 72.792 264.79 71.7842 cv
cp
f
269.333 70.6006 mo
269.567 70.3545 li
269.702 70.2178 269.917 70.1201 270.054 70.1201 cv
270.196 70.1201 270.409 70.2236 270.591 70.4385 cv
270.325 70.8154 li
270.183 70.7441 270.04 70.6787 269.892 70.6787 cv
269.593 70.6787 269.347 70.9775 269.347 71.7002 cv
269.347 73.4482 li
268.763 73.4482 li
268.763 70.1982 li
269.333 70.1982 li
269.333 70.6006 li
cp
f
273.091 71.4717 mo
273.091 70.9658 272.876 70.5361 272.362 70.5361 cv
271.739 70.5361 271.493 71.0557 271.474 71.4717 cv
273.091 71.4717 li
cp
271.435 71.8623 mo
271.429 72.5127 271.89 73.1104 272.532 73.1104 cv
272.831 73.1104 273.194 72.999 273.421 72.8311 cv
273.589 73.1494 li
273.253 73.3896 272.851 73.5264 272.513 73.5264 cv
271.501 73.5264 270.831 72.9023 270.831 71.7588 cv
270.831 70.6338 271.636 70.1201 272.37 70.1201 cv
273.356 70.1201 273.687 71.0107 273.622 71.8623 cv
271.435 71.8623 li
cp
f
277.038 72.5732 mo
276.554 72.5732 276.163 72.1885 276.163 71.6982 cv
276.159 71.2139 276.548 70.8232 277.038 70.8232 cv
277.521 70.8232 277.911 71.2139 277.911 71.6982 cv
277.911 72.1826 277.521 72.5732 277.038 72.5732 cv
cp
f
284.228 73.4482 mo
283.599 73.4482 li
283.599 71.1865 li
281.38 71.1865 li
281.38 73.4482 li
280.749 73.4482 li
280.749 68.8984 li
281.38 68.8984 li
281.38 70.7314 li
283.599 70.7314 li
283.599 68.8984 li
284.228 68.8984 li
284.228 73.4482 li
cp
f
285.694 71.7842 mo
285.694 72.3955 285.901 73.1104 286.661 73.1104 cv
287.427 73.1104 287.634 72.3955 287.634 71.7842 cv
287.634 71.1992 287.394 70.5361 286.661 70.5361 cv
285.935 70.5361 285.694 71.1992 285.694 71.7842 cv
cp
285.065 71.7842 mo
285.065 70.7314 285.843 70.1201 286.661 70.1201 cv
287.479 70.1201 288.265 70.7314 288.265 71.7842 cv
288.265 72.792 287.622 73.5264 286.661 73.5264 cv
285.708 73.5264 285.065 72.792 285.065 71.7842 cv
cp
f
289.614 70.6006 mo
289.919 70.2764 290.386 70.1201 290.724 70.1201 cv
291.47 70.1201 291.872 70.5361 291.872 71.3555 cv
291.872 73.4482 li
291.288 73.4482 li
291.288 71.4785 li
291.288 70.8682 291.028 70.5498 290.503 70.5498 cv
290.042 70.5498 289.62 70.8682 289.62 71.4912 cv
289.62 73.4482 li
289.036 73.4482 li
289.036 70.1982 li
289.614 70.1982 li
289.614 70.6006 li
cp
f
295.194 71.7197 mo
295.194 71.1084 294.864 70.5361 294.228 70.5361 cv
293.552 70.5361 293.274 71.0693 293.274 71.7588 cv
293.274 72.4541 293.571 73.1104 294.188 73.1104 cv
294.896 73.1104 295.194 72.4404 295.194 71.7197 cv
cp
295.778 73.3311 mo
295.778 74.5732 295.007 75.0732 294.13 75.0732 cv
293.649 75.0732 293.169 74.9814 292.794 74.749 cv
292.956 74.3643 li
293.351 74.5928 293.714 74.6572 294.116 74.6572 cv
294.786 74.6572 295.194 74.2275 295.194 73.377 cv
295.194 72.9346 li
295.181 72.9346 li
294.954 73.2529 294.61 73.5264 294.099 73.5264 cv
293.202 73.5264 292.644 72.8242 292.644 71.7842 cv
292.644 70.9395 293.267 70.1201 294.194 70.1201 cv
294.585 70.1201 294.999 70.3154 295.181 70.6475 cv
295.194 70.6475 li
295.194 70.1982 li
295.778 70.1982 li
295.778 73.3311 li
cp
f
299.347 70.9326 mo
301.313 68.833 li
301.741 69.1123 li
299.983 70.9658 li
301.976 73.2725 li
301.358 73.5127 li
299.36 71.0889 li
299.347 71.0889 li
299.347 73.4482 li
298.718 73.4482 li
298.718 68.8984 li
299.347 68.8984 li
299.347 70.9326 li
cp
f
302.942 71.7842 mo
302.942 72.3955 303.149 73.1104 303.909 73.1104 cv
304.675 73.1104 304.882 72.3955 304.882 71.7842 cv
304.882 71.1992 304.642 70.5361 303.909 70.5361 cv
303.183 70.5361 302.942 71.1992 302.942 71.7842 cv
cp
302.313 71.7842 mo
302.313 70.7314 303.091 70.1201 303.909 70.1201 cv
304.726 70.1201 305.511 70.7314 305.511 71.7842 cv
305.511 72.792 304.87 73.5264 303.909 73.5264 cv
302.954 73.5264 302.313 72.792 302.313 71.7842 cv
cp
f
306.862 70.6006 mo
307.167 70.2764 307.634 70.1201 307.972 70.1201 cv
308.718 70.1201 309.12 70.5361 309.12 71.3555 cv
309.12 73.4482 li
308.536 73.4482 li
308.536 71.4785 li
308.536 70.8682 308.276 70.5498 307.751 70.5498 cv
307.29 70.5498 306.868 70.8682 306.868 71.4912 cv
306.868 73.4482 li
306.284 73.4482 li
306.284 70.1982 li
306.862 70.1982 li
306.862 70.6006 li
cp
f
312.442 71.7197 mo
312.442 71.1084 312.11 70.5361 311.476 70.5361 cv
310.8 70.5361 310.521 71.0693 310.521 71.7588 cv
310.521 72.4541 310.819 73.1104 311.437 73.1104 cv
312.144 73.1104 312.442 72.4404 312.442 71.7197 cv
cp
313.026 73.3311 mo
313.026 74.5732 312.253 75.0732 311.378 75.0732 cv
310.897 75.0732 310.417 74.9814 310.04 74.749 cv
310.204 74.3643 li
310.599 74.5928 310.962 74.6572 311.364 74.6572 cv
312.032 74.6572 312.442 74.2275 312.442 73.377 cv
312.442 72.9346 li
312.429 72.9346 li
312.202 73.2529 311.858 73.5264 311.345 73.5264 cv
310.45 73.5264 309.892 72.8242 309.892 71.7842 cv
309.892 70.9395 310.515 70.1201 311.442 70.1201 cv
311.831 70.1201 312.247 70.3154 312.429 70.6475 cv
312.442 70.6475 li
312.442 70.1982 li
313.026 70.1982 li
313.026 73.3311 li
cp
f
1.69873 82.4482 mo
1.69873 78.3525 li
0.245117 78.3525 li
0.245117 77.8975 li
3.78857 77.8975 li
3.78857 78.3525 li
2.32813 78.3525 li
2.32813 82.4482 li
1.69873 82.4482 li
cp
f
4.24414 80.7842 mo
4.24414 81.3955 4.45166 82.1104 5.21094 82.1104 cv
5.97656 82.1104 6.18408 81.3955 6.18408 80.7842 cv
6.18408 80.2002 5.94434 79.5361 5.21094 79.5361 cv
4.48389 79.5361 4.24414 80.2002 4.24414 80.7842 cv
cp
3.61475 80.7842 mo
3.61475 79.7314 4.39307 79.1201 5.21094 79.1201 cv
6.02832 79.1201 6.81348 79.7314 6.81348 80.7842 cv
6.81348 81.792 6.17139 82.5264 5.21094 82.5264 cv
4.25684 82.5264 3.61475 81.792 3.61475 80.7842 cv
cp
f
7.55322 77.6709 mo
8.1377 77.6709 li
8.1377 80.5107 li
8.23486 80.5107 li
9.50684 79.1338 li
9.94141 79.3799 li
8.78662 80.5889 li
10.1558 82.2471 li
9.57813 82.5127 li
8.15039 80.6729 li
8.1377 80.6729 li
8.1377 82.4482 li
7.55322 82.4482 li
7.55322 77.6709 li
cp
f
10.811 79.1338 mo
11.1416 79.958 11.4795 80.79 11.8037 81.7725 cv
11.8169 81.7725 li
12.1543 80.79 12.4917 79.958 12.8354 79.1338 cv
13.3481 79.2568 li
11.6802 83.0205 li
11.3755 83.71 10.9731 84.0732 10.415 84.0732 cv
10.123 84.0732 li
10.123 83.6572 li
10.3501 83.6572 li
10.7524 83.6572 11.0381 83.5537 11.4985 82.2666 cv
10.2271 79.2959 li
10.811 79.1338 li
cp
f
14.2695 80.7842 mo
14.2695 81.3955 14.4771 82.1104 15.2363 82.1104 cv
16.002 82.1104 16.21 81.3955 16.21 80.7842 cv
16.21 80.2002 15.9697 79.5361 15.2363 79.5361 cv
14.5098 79.5361 14.2695 80.2002 14.2695 80.7842 cv
cp
13.6401 80.7842 mo
13.6401 79.7314 14.4189 79.1201 15.2363 79.1201 cv
16.0542 79.1201 16.8394 79.7314 16.8394 80.7842 cv
16.8394 81.792 16.1968 82.5264 15.2363 82.5264 cv
14.2827 82.5264 13.6401 81.792 13.6401 80.7842 cv
cp
f
20.209 81.5732 mo
19.7246 81.5732 19.3354 81.1885 19.3354 80.6982 cv
19.3306 80.2139 19.7197 79.8232 20.209 79.8232 cv
20.6934 79.8232 21.0825 80.2139 21.0825 80.6982 cv
21.0825 81.1826 20.6934 81.5732 20.209 81.5732 cv
cp
f
25.9927 78.6006 mo
25.772 78.4385 25.48 78.2744 25.2075 78.2744 cv
24.7534 78.2744 24.5 78.542 24.5 78.8936 cv
24.5 79.2178 24.7793 79.458 25.3633 79.8799 cv
25.9863 80.335 26.3496 80.751 26.3496 81.3369 cv
26.3496 82.0576 25.668 82.5264 24.9414 82.5264 cv
24.5068 82.5264 23.9873 82.3701 23.6631 82.0518 cv
23.9419 81.6748 li
24.208 81.8623 24.5 82.0713 24.9282 82.0713 cv
25.376 82.0713 25.7202 81.8311 25.7202 81.3232 cv
25.7202 80.751 25.0386 80.3818 24.6689 80.1084 cv
24.2925 79.8154 23.8706 79.5361 23.8706 78.8936 cv
23.8706 78.2822 24.4614 77.8193 25.1685 77.8193 cv
25.6421 77.8193 26.0381 77.9893 26.291 78.2744 cv
25.9927 78.6006 li
cp
f
29.2109 80.4717 mo
29.2109 79.9658 28.9971 79.5361 28.4844 79.5361 cv
27.8613 79.5361 27.6147 80.0557 27.5952 80.4717 cv
29.2109 80.4717 li
cp
27.5566 80.8623 mo
27.5498 81.5127 28.0107 82.1104 28.6533 82.1104 cv
28.9517 82.1104 29.3149 81.999 29.542 81.8311 cv
29.7109 82.1494 li
29.3735 82.3896 28.9712 82.5264 28.6338 82.5264 cv
27.6211 82.5264 26.9531 81.9014 26.9531 80.7588 cv
26.9531 79.6338 27.7578 79.1201 28.4907 79.1201 cv
29.4771 79.1201 29.8081 80.0107 29.7432 80.8623 cv
27.5566 80.8623 li
cp
f
30.8721 80.7842 mo
30.8721 81.3955 31.0801 82.1104 31.8394 82.1104 cv
32.605 82.1104 32.8125 81.3955 32.8125 80.7842 cv
32.8125 80.2002 32.5723 79.5361 31.8394 79.5361 cv
31.1123 79.5361 30.8721 80.2002 30.8721 80.7842 cv
cp
30.2427 80.7842 mo
30.2427 79.7314 31.0215 79.1201 31.8394 79.1201 cv
32.6567 79.1201 33.4419 79.7314 33.4419 80.7842 cv
33.4419 81.792 32.7993 82.5264 31.8394 82.5264 cv
30.8853 82.5264 30.2427 81.792 30.2427 80.7842 cv
cp
f
36.3491 82.0713 mo
36.0181 82.3564 35.7261 82.5264 35.3042 82.5264 cv
34.5581 82.5264 34.1558 82.1104 34.1558 81.292 cv
34.1558 79.1982 li
34.7397 79.1982 li
34.7397 81.1611 li
34.7397 81.7725 34.9995 82.0967 35.5249 82.0967 cv
35.9727 82.0967 36.3428 81.7275 36.3428 81.0967 cv
36.3428 79.1982 li
36.9268 79.1982 li
36.9268 82.4482 li
36.3491 82.4482 li
36.3491 82.0713 li
cp
f
37.8867 82.4482 mo
37.8867 77.6709 li
38.4712 77.6709 li
38.4712 82.4482 li
37.8867 82.4482 li
cp
f
42.0615 81.5732 mo
41.5771 81.5732 41.188 81.1885 41.188 80.6982 cv
41.1826 80.2139 41.5723 79.8232 42.0615 79.8232 cv
42.5454 79.8232 42.9351 80.2139 42.9351 80.6982 cv
42.9351 81.1826 42.5454 81.5732 42.0615 81.5732 cv
cp
f
46.6572 82.4482 mo
46.6572 78.3525 li
45.2041 78.3525 li
45.2041 77.8975 li
48.7471 77.8975 li
48.7471 78.3525 li
47.2871 78.3525 li
47.2871 82.4482 li
46.6572 82.4482 li
cp
f
49.9556 80.7061 mo
49.4429 80.8623 49.1768 81.1084 49.1768 81.5186 cv
49.1768 81.8564 49.4102 82.0713 49.644 82.0713 cv
50.0591 82.0713 50.5913 81.5576 50.5132 80.5439 cv
49.9556 80.7061 li
cp
50.3057 82.0967 mo
50.0786 82.3252 49.793 82.5264 49.4946 82.5264 cv
48.9497 82.5264 48.5732 82.1357 48.5732 81.5244 cv
48.5732 80.96 49.0532 80.6025 49.728 80.4014 cv
50.5132 80.1533 li
50.4873 79.7568 50.1826 79.5029 49.8647 79.5029 cv
49.4883 79.5029 49.248 79.6592 49.0146 79.8545 cv
48.7871 79.5615 li
49.1118 79.251 49.4429 79.1201 49.897 79.1201 cv
50.3838 79.1201 51.0977 79.2764 51.0977 80.2256 cv
51.0977 81.6553 li
51.0977 81.9014 51.1299 82.2139 51.2402 82.4482 cv
50.6045 82.4482 li
50.5264 82.3115 50.5132 82.1045 50.5132 81.8955 cv
50.3057 82.0967 li
cp
f
52.6226 79.1982 mo
52.6226 82.4482 li
52.0386 82.4482 li
52.0386 79.1982 li
52.6226 79.1982 li
cp
51.9604 78.126 mo
51.9604 77.9639 52.0967 77.7803 52.3306 77.7803 cv
52.564 77.7803 52.7002 77.9639 52.7002 78.126 cv
52.7002 78.3018 52.6157 78.5225 52.3306 78.5225 cv
52.0449 78.5225 51.9604 78.3018 51.9604 78.126 cv
cp
f
56.0874 80.7314 mo
56.0874 80.1416 55.7891 79.5361 55.1855 79.5361 cv
54.5234 79.5361 54.1665 80.0498 54.1665 80.8877 cv
54.1665 81.5127 54.4521 82.1104 55.1792 82.1104 cv
55.8799 82.1104 56.0874 81.3232 56.0874 80.7314 cv
cp
54.1665 79.7061 mo
54.1797 79.7061 li
54.4199 79.3154 54.8804 79.1201 55.2437 79.1201 cv
56.5093 79.1201 56.7168 80.2568 56.7168 80.7256 cv
56.7168 81.7139 56.1328 82.5264 55.1792 82.5264 cv
54.77 82.5264 54.4199 82.3311 54.1797 82.0186 cv
54.1665 82.0186 li
54.1665 84.0732 li
53.5825 84.0732 li
53.5825 79.1982 li
54.1665 79.1982 li
54.1665 79.7061 li
cp
f
59.4941 80.4717 mo
59.4941 79.9658 59.2798 79.5361 58.7676 79.5361 cv
58.1445 79.5361 57.8979 80.0557 57.8784 80.4717 cv
59.4941 80.4717 li
cp
57.8394 80.8623 mo
57.833 81.5127 58.2935 82.1104 58.936 82.1104 cv
59.2344 82.1104 59.5981 81.999 59.8252 81.8311 cv
59.9937 82.1494 li
59.6563 82.3896 59.2539 82.5264 58.9165 82.5264 cv
57.9043 82.5264 57.2358 81.9014 57.2358 80.7588 cv
57.2358 79.6338 58.0405 79.1201 58.7739 79.1201 cv
59.7603 79.1201 60.0913 80.0107 60.0264 80.8623 cv
57.8394 80.8623 li
cp
f
61.3306 79.1982 mo
61.3306 82.4482 li
60.7466 82.4482 li
60.7466 79.1982 li
61.3306 79.1982 li
cp
60.6685 78.126 mo
60.6685 77.9639 60.8047 77.7803 61.0386 77.7803 cv
61.272 77.7803 61.4082 77.9639 61.4082 78.126 cv
61.4082 78.3018 61.3242 78.5225 61.0386 78.5225 cv
60.7529 78.5225 60.6685 78.3018 60.6685 78.126 cv
cp
f
64.9209 81.5732 mo
64.4365 81.5732 64.0474 81.1885 64.0474 80.6982 cv
64.0425 80.2139 64.4316 79.8232 64.9209 79.8232 cv
65.4048 79.8232 65.7944 80.2139 65.7944 80.6982 cv
65.7944 81.1826 65.4048 81.5732 64.9209 81.5732 cv
cp
f
72.5537 82.4482 mo
72.0605 82.4482 li
71.0742 81.2646 69.3809 79.2236 69.1084 78.8271 cv
69.0952 78.8271 li
69.0952 82.4482 li
68.5762 82.4482 li
68.5762 77.8975 li
69.0435 77.8975 li
70.0425 79.0811 71.7168 81.0693 72.022 81.5244 cv
72.0347 81.5244 li
72.0347 77.8975 li
72.5537 77.8975 li
72.5537 82.4482 li
cp
f
75.6167 80.4717 mo
75.6167 79.9658 75.4023 79.5361 74.8896 79.5361 cv
74.2671 79.5361 74.0205 80.0557 74.001 80.4717 cv
75.6167 80.4717 li
cp
73.9619 80.8623 mo
73.9556 81.5127 74.416 82.1104 75.0586 82.1104 cv
75.3569 82.1104 75.7207 81.999 75.9478 81.8311 cv
76.1162 82.1494 li
75.7788 82.3896 75.3765 82.5264 75.0391 82.5264 cv
74.0269 82.5264 73.3584 81.9014 73.3584 80.7588 cv
73.3584 79.6338 74.1631 79.1201 74.8965 79.1201 cv
75.8828 79.1201 76.2139 80.0107 76.1489 80.8623 cv
73.9619 80.8623 li
cp
f
79.1338 79.1982 mo
79.4517 79.9717 79.7695 80.751 80.0811 81.6807 cv
80.0942 81.6807 li
80.3472 80.7256 80.6133 79.9326 80.8726 79.1338 cv
81.4111 79.2236 li
80.269 82.4482 li
79.8604 82.4482 li
79.5361 81.6416 79.2051 80.8369 78.8872 79.9131 cv
78.874 79.9131 li
78.5625 80.8369 78.2446 81.6416 77.9268 82.4482 cv
77.5439 82.4482 li
76.4214 79.2764 li
76.9922 79.1338 li
77.2583 79.9326 77.5308 80.7256 77.7905 81.6807 cv
77.8032 81.6807 li
78.1147 80.751 78.4326 79.9717 78.751 79.1982 cv
79.1338 79.1982 li
cp
f
84.4805 81.9932 mo
85.1812 81.9932 li
86.4595 81.9932 87.0762 81.3564 87.0762 80.0244 cv
87.0762 79.0088 86.5117 78.3525 85.3174 78.3525 cv
84.4805 78.3525 li
84.4805 81.9932 li
cp
85.3047 77.8975 mo
87.1348 77.8975 87.7705 78.9443 87.7705 80.0361 cv
87.7705 81.5439 86.8101 82.4482 85.2007 82.4482 cv
83.8511 82.4482 li
83.8511 77.8975 li
85.3047 77.8975 li
cp
f
90.5996 80.4717 mo
90.5996 79.9658 90.3857 79.5361 89.873 79.5361 cv
89.25 79.5361 89.0034 80.0557 88.9839 80.4717 cv
90.5996 80.4717 li
cp
88.9448 80.8623 mo
88.9385 81.5127 89.3994 82.1104 90.0415 82.1104 cv
90.3403 82.1104 90.7036 81.999 90.9307 81.8311 cv
91.0991 82.1494 li
90.7617 82.3896 90.3594 82.5264 90.022 82.5264 cv
89.0098 82.5264 88.3413 81.9014 88.3413 80.7588 cv
88.3413 79.6338 89.146 79.1201 89.8794 79.1201 cv
90.8657 79.1201 91.1968 80.0107 91.1318 80.8623 cv
88.9448 80.8623 li
cp
f
91.8521 82.4482 mo
91.8521 77.6709 li
92.436 77.6709 li
92.436 82.4482 li
91.8521 82.4482 li
cp
f
93.9736 79.6006 mo
94.2788 79.2764 94.7461 79.1201 95.0835 79.1201 cv
95.8296 79.1201 96.2319 79.5361 96.2319 80.3545 cv
96.2319 82.4482 li
95.6479 82.4482 li
95.6479 80.4795 li
95.6479 79.8682 95.3887 79.5498 94.8628 79.5498 cv
94.4023 79.5498 93.9805 79.8682 93.9805 80.4912 cv
93.9805 82.4482 li
93.3965 82.4482 li
93.3965 77.6709 li
93.9736 77.6709 li
93.9736 79.6006 li
cp
f
97.7764 79.1982 mo
97.7764 82.4482 li
97.1924 82.4482 li
97.1924 79.1982 li
97.7764 79.1982 li
cp
97.1147 78.126 mo
97.1147 77.9639 97.251 77.7803 97.4844 77.7803 cv
97.7183 77.7803 97.8545 77.9639 97.8545 78.126 cv
97.8545 78.3018 97.77 78.5225 97.4844 78.5225 cv
97.1987 78.5225 97.1147 78.3018 97.1147 78.126 cv
cp
f
101.367 81.5732 mo
100.882 81.5732 100.493 81.1885 100.493 80.6982 cv
100.488 80.2139 100.877 79.8232 101.367 79.8232 cv
101.851 79.8232 102.24 80.2139 102.24 80.6982 cv
102.24 81.1826 101.851 81.5732 101.367 81.5732 cv
cp
f
108.455 78.6709 mo
108.241 78.4971 107.754 78.2744 107.267 78.2744 cv
106.145 78.2744 105.483 79.0811 105.483 80.1475 cv
105.483 81.2979 106.274 82.0713 107.267 82.0713 cv
107.76 82.0713 108.15 81.915 108.416 81.7334 cv
108.662 82.1104 li
108.357 82.3174 107.819 82.5264 107.235 82.5264 cv
105.612 82.5264 104.789 81.415 104.789 80.1611 cv
104.789 79.0166 105.684 77.8193 107.313 77.8193 cv
107.961 77.8193 108.416 78.0479 108.714 78.2822 cv
108.455 78.6709 li
cp
f
110.557 80.7061 mo
110.044 80.8623 109.778 81.1084 109.778 81.5186 cv
109.778 81.8564 110.012 82.0713 110.246 82.0713 cv
110.661 82.0713 111.193 81.5576 111.115 80.5439 cv
110.557 80.7061 li
cp
110.908 82.0967 mo
110.68 82.3252 110.395 82.5264 110.096 82.5264 cv
109.551 82.5264 109.175 82.1357 109.175 81.5244 cv
109.175 80.96 109.655 80.6025 110.33 80.4014 cv
111.115 80.1533 li
111.089 79.7568 110.784 79.5029 110.466 79.5029 cv
110.09 79.5029 109.85 79.6592 109.616 79.8545 cv
109.389 79.5615 li
109.713 79.251 110.044 79.1201 110.499 79.1201 cv
110.985 79.1201 111.699 79.2764 111.699 80.2256 cv
111.699 81.6553 li
111.699 81.9014 111.731 82.2139 111.842 82.4482 cv
111.206 82.4482 li
111.128 82.3115 111.115 82.1045 111.115 81.8955 cv
110.908 82.0967 li
cp
f
115.145 80.7314 mo
115.145 80.1416 114.846 79.5361 114.243 79.5361 cv
113.581 79.5361 113.224 80.0498 113.224 80.8877 cv
113.224 81.5127 113.51 82.1104 114.236 82.1104 cv
114.937 82.1104 115.145 81.3232 115.145 80.7314 cv
cp
113.224 79.7061 mo
113.237 79.7061 li
113.477 79.3154 113.938 79.1201 114.301 79.1201 cv
115.567 79.1201 115.774 80.2568 115.774 80.7256 cv
115.774 81.7139 115.19 82.5264 114.236 82.5264 cv
113.828 82.5264 113.477 82.3311 113.237 82.0186 cv
113.224 82.0186 li
113.224 84.0732 li
112.64 84.0732 li
112.64 79.1982 li
113.224 79.1982 li
113.224 79.7061 li
cp
f
118.552 80.4717 mo
118.552 79.9658 118.337 79.5361 117.825 79.5361 cv
117.202 79.5361 116.955 80.0557 116.936 80.4717 cv
118.552 80.4717 li
cp
116.897 80.8623 mo
116.89 81.5127 117.351 82.1104 117.994 82.1104 cv
118.292 82.1104 118.655 81.999 118.882 81.8311 cv
119.051 82.1494 li
118.714 82.3896 118.312 82.5264 117.974 82.5264 cv
116.962 82.5264 116.293 81.9014 116.293 80.7588 cv
116.293 79.6338 117.098 79.1201 117.831 79.1201 cv
118.817 79.1201 119.148 80.0107 119.083 80.8623 cv
116.897 80.8623 li
cp
f
122.672 82.4482 mo
122.672 78.3525 li
121.218 78.3525 li
121.218 77.8975 li
124.761 77.8975 li
124.761 78.3525 li
123.301 78.3525 li
123.301 82.4482 li
122.672 82.4482 li
cp
f
125.217 80.7842 mo
125.217 81.3955 125.425 82.1104 126.184 82.1104 cv
126.95 82.1104 127.157 81.3955 127.157 80.7842 cv
127.157 80.2002 126.917 79.5361 126.184 79.5361 cv
125.457 79.5361 125.217 80.2002 125.217 80.7842 cv
cp
124.588 80.7842 mo
124.588 79.7314 125.366 79.1201 126.184 79.1201 cv
127.001 79.1201 127.787 79.7314 127.787 80.7842 cv
127.787 81.792 127.145 82.5264 126.184 82.5264 cv
125.23 82.5264 124.588 81.792 124.588 80.7842 cv
cp
f
130.791 79.1982 mo
131.109 79.9717 131.427 80.751 131.739 81.6807 cv
131.751 81.6807 li
132.005 80.7256 132.271 79.9326 132.53 79.1338 cv
133.069 79.2236 li
131.927 82.4482 li
131.518 82.4482 li
131.193 81.6416 130.863 80.8369 130.544 79.9131 cv
130.532 79.9131 li
130.22 80.8369 129.902 81.6416 129.584 82.4482 cv
129.201 82.4482 li
128.079 79.2764 li
128.65 79.1338 li
128.916 79.9326 129.188 80.7256 129.448 81.6807 cv
129.461 81.6807 li
129.772 80.751 130.09 79.9717 130.408 79.1982 cv
130.791 79.1982 li
cp
f
134.159 79.6006 mo
134.464 79.2764 134.931 79.1201 135.269 79.1201 cv
136.015 79.1201 136.417 79.5361 136.417 80.3545 cv
136.417 82.4482 li
135.833 82.4482 li
135.833 80.4795 li
135.833 79.8682 135.574 79.5498 135.048 79.5498 cv
134.587 79.5498 134.166 79.8682 134.166 80.4912 cv
134.166 82.4482 li
133.582 82.4482 li
133.582 79.1982 li
134.159 79.1982 li
134.159 79.6006 li
cp
f
140.007 81.5732 mo
139.523 81.5732 139.134 81.1885 139.134 80.6982 cv
139.129 80.2139 139.519 79.8232 140.007 79.8232 cv
140.492 79.8232 140.881 80.2139 140.881 80.6982 cv
140.881 81.1826 140.492 81.5732 140.007 81.5732 cv
cp
f
148.594 82.4482 mo
147.965 82.4482 li
147.965 78.7432 li
147.952 78.7432 li
147.771 79.2764 146.739 81.2842 146.128 82.4482 cv
145.875 82.4482 li
145.311 81.2842 144.37 79.3408 144.195 78.7432 cv
144.182 78.7432 li
144.182 82.4482 li
143.663 82.4482 li
143.663 77.8975 li
144.338 77.8975 li
144.922 79.1064 145.506 80.3232 146.083 81.6025 cv
146.726 80.3232 147.368 79.1064 148.004 77.8975 cv
148.594 77.8975 li
148.594 82.4482 li
cp
f
150.781 80.7061 mo
150.27 80.8623 150.002 81.1084 150.002 81.5186 cv
150.002 81.8564 150.236 82.0713 150.471 82.0713 cv
150.885 82.0713 151.418 81.5576 151.34 80.5439 cv
150.781 80.7061 li
cp
151.131 82.0967 mo
150.904 82.3252 150.619 82.5264 150.32 82.5264 cv
149.775 82.5264 149.398 82.1357 149.398 81.5244 cv
149.398 80.96 149.879 80.6025 150.555 80.4014 cv
151.34 80.1533 li
151.313 79.7568 151.008 79.5029 150.691 79.5029 cv
150.314 79.5029 150.074 79.6592 149.84 79.8545 cv
149.613 79.5615 li
149.938 79.251 150.27 79.1201 150.723 79.1201 cv
151.209 79.1201 151.924 79.2764 151.924 80.2256 cv
151.924 81.6553 li
151.924 81.9014 151.955 82.2139 152.066 82.4482 cv
151.43 82.4482 li
151.352 82.3115 151.34 82.1045 151.34 81.8955 cv
151.131 82.0967 li
cp
f
155.193 80.7197 mo
155.193 80.1084 154.863 79.5361 154.227 79.5361 cv
153.553 79.5361 153.273 80.0693 153.273 80.7588 cv
153.273 81.4541 153.572 82.1104 154.188 82.1104 cv
154.895 82.1104 155.193 81.4404 155.193 80.7197 cv
cp
155.193 81.9346 mo
155.182 81.9346 li
154.953 82.2529 154.609 82.5264 154.078 82.5264 cv
153.201 82.5264 152.645 81.8252 152.645 80.7842 cv
152.645 79.9385 153.254 79.1201 154.143 79.1201 cv
154.584 79.1201 154.98 79.29 155.182 79.6006 cv
155.193 79.6006 li
155.193 77.6709 li
155.777 77.6709 li
155.777 82.4482 li
155.193 82.4482 li
155.193 81.9346 li
cp
f
157.297 79.6006 mo
157.529 79.3545 li
157.666 79.2178 157.881 79.1201 158.016 79.1201 cv
158.16 79.1201 158.373 79.2236 158.555 79.4385 cv
158.289 79.8154 li
158.146 79.7451 158.004 79.6787 157.854 79.6787 cv
157.557 79.6787 157.309 79.9775 157.309 80.7002 cv
157.309 82.4482 li
156.725 82.4482 li
156.725 79.1982 li
157.297 79.1982 li
157.297 79.6006 li
cp
f
159.566 79.1982 mo
159.566 82.4482 li
158.982 82.4482 li
158.982 79.1982 li
159.566 79.1982 li
cp
158.906 78.126 mo
158.906 77.9639 159.041 77.7803 159.275 77.7803 cv
159.51 77.7803 159.645 77.9639 159.645 78.126 cv
159.645 78.3018 159.561 78.5225 159.275 78.5225 cv
158.99 78.5225 158.906 78.3018 158.906 78.126 cv
cp
f
162.857 80.7197 mo
162.857 80.1084 162.525 79.5361 161.891 79.5361 cv
161.215 79.5361 160.936 80.0693 160.936 80.7588 cv
160.936 81.4541 161.234 82.1104 161.852 82.1104 cv
162.559 82.1104 162.857 81.4404 162.857 80.7197 cv
cp
162.857 81.9346 mo
162.844 81.9346 li
162.617 82.2529 162.273 82.5264 161.74 82.5264 cv
160.865 82.5264 160.307 81.8252 160.307 80.7842 cv
160.307 79.9385 160.918 79.1201 161.807 79.1201 cv
162.248 79.1201 162.643 79.29 162.844 79.6006 cv
162.857 79.6006 li
162.857 77.6709 li
163.44 77.6709 li
163.44 82.4482 li
162.857 82.4482 li
162.857 81.9346 li
cp
f
167.019 81.5732 mo
166.534 81.5732 166.144 81.1885 166.144 80.6982 cv
166.14 80.2139 166.528 79.8232 167.019 79.8232 cv
167.501 79.8232 167.892 80.2139 167.892 80.6982 cv
167.892 81.1826 167.501 81.5732 167.019 81.5732 cv
cp
f
175.604 82.4482 mo
174.976 82.4482 li
174.976 78.7432 li
174.962 78.7432 li
174.78 79.2764 173.749 81.2842 173.14 82.4482 cv
172.886 82.4482 li
172.321 81.2842 171.38 79.3408 171.204 78.7432 cv
171.192 78.7432 li
171.192 82.4482 li
170.673 82.4482 li
170.673 77.8975 li
171.349 77.8975 li
171.933 79.1064 172.517 80.3232 173.093 81.6025 cv
173.735 80.3232 174.378 79.1064 175.015 77.8975 cv
175.604 77.8975 li
175.604 82.4482 li
cp
f
178.667 80.4717 mo
178.667 79.9658 178.454 79.5361 177.94 79.5361 cv
177.317 79.5361 177.071 80.0557 177.052 80.4717 cv
178.667 80.4717 li
cp
177.013 80.8623 mo
177.007 81.5127 177.468 82.1104 178.108 82.1104 cv
178.407 82.1104 178.771 81.999 178.999 81.8311 cv
179.167 82.1494 li
178.829 82.3896 178.427 82.5264 178.091 82.5264 cv
177.077 82.5264 176.409 81.9014 176.409 80.7588 cv
176.409 79.6338 177.214 79.1201 177.946 79.1201 cv
178.933 79.1201 179.265 80.0107 179.2 80.8623 cv
177.013 80.8623 li
cp
f
182.087 82.5127 mo
181.067 81.083 li
180.062 82.5127 li
179.603 82.2393 li
180.796 80.7119 li
179.784 79.3936 li
180.341 79.1338 li
181.173 80.3232 li
182.028 79.1338 li
182.483 79.335 li
181.444 80.6865 li
182.646 82.2529 li
182.087 82.5127 li
cp
f
183.288 79.1982 mo
183.288 82.4482 li
183.872 82.4482 li
183.872 79.1982 li
183.288 79.1982 li
cp
183.579 78.5225 mo
183.864 78.5225 183.95 78.3018 183.95 78.126 cv
183.95 77.9639 183.813 77.7803 183.579 77.7803 cv
183.347 77.7803 183.21 77.9639 183.21 78.126 cv
183.21 78.3018 183.294 78.5225 183.579 78.5225 cv
cp
f
187.323 82.1885 mo
187.005 82.415 186.622 82.5264 186.345 82.5264 cv
184.806 82.5264 184.61 81.2646 184.61 80.8174 cv
184.61 80.0049 185.149 79.1201 186.37 79.1201 cv
186.7 79.1201 186.999 79.2041 187.239 79.3877 cv
187.044 79.7178 li
186.856 79.6279 186.616 79.5498 186.376 79.5498 cv
185.845 79.5498 185.241 79.8994 185.241 80.7842 cv
185.241 81.46 185.585 82.0967 186.37 82.0967 cv
186.649 82.0967 186.909 82.0264 187.161 81.8623 cv
187.323 82.1885 li
cp
f
188.362 80.7842 mo
188.362 81.3955 188.569 82.1104 189.329 82.1104 cv
190.095 82.1104 190.302 81.3955 190.302 80.7842 cv
190.302 80.2002 190.062 79.5361 189.329 79.5361 cv
188.603 79.5361 188.362 80.2002 188.362 80.7842 cv
cp
187.731 80.7842 mo
187.731 79.7314 188.511 79.1201 189.329 79.1201 cv
190.146 79.1201 190.931 79.7314 190.931 80.7842 cv
190.931 81.792 190.29 82.5264 189.329 82.5264 cv
188.374 82.5264 187.731 81.792 187.731 80.7842 cv
cp
f
197.03 78.6709 mo
196.817 78.4971 196.331 78.2744 195.843 78.2744 cv
194.722 78.2744 194.06 79.0811 194.06 80.1475 cv
194.06 81.2979 194.851 82.0713 195.843 82.0713 cv
196.337 82.0713 196.726 81.915 196.993 81.7334 cv
197.239 82.1104 li
196.935 82.3174 196.396 82.5264 195.812 82.5264 cv
194.188 82.5264 193.364 81.415 193.364 80.1611 cv
193.364 79.0166 194.261 77.8193 195.89 77.8193 cv
196.538 77.8193 196.993 78.0479 197.29 78.2822 cv
197.03 78.6709 li
cp
f
197.972 79.1982 mo
197.972 82.4482 li
198.556 82.4482 li
198.556 79.1982 li
197.972 79.1982 li
cp
198.265 78.5225 mo
198.55 78.5225 198.634 78.3018 198.634 78.126 cv
198.634 77.9639 198.497 77.7803 198.265 77.7803 cv
198.03 77.7803 197.894 77.9639 197.894 78.126 cv
197.894 78.3018 197.978 78.5225 198.265 78.5225 cv
cp
f
200.237 79.1982 mo
201.087 79.1982 li
201.087 79.5361 li
200.237 79.5361 li
200.237 81.376 li
200.237 81.8311 200.327 82.1045 200.685 82.1045 cv
200.899 82.1045 201.022 82.0518 201.132 81.9932 cv
201.274 82.3174 li
201.073 82.4482 200.833 82.5264 200.612 82.5264 cv
199.964 82.5264 199.653 82.1494 199.653 81.4854 cv
199.653 79.5361 li
199.198 79.5361 li
199.198 79.1982 li
199.653 79.1982 li
199.653 78.4189 li
200.237 78.2236 li
200.237 79.1982 li
cp
f
201.917 79.1338 mo
202.249 79.958 202.585 80.79 202.909 81.7725 cv
202.923 81.7725 li
203.261 80.79 203.599 79.958 203.942 79.1338 cv
204.454 79.2568 li
202.786 83.0205 li
202.481 83.71 202.079 84.0732 201.521 84.0732 cv
201.229 84.0732 li
201.229 83.6572 li
201.456 83.6572 li
201.858 83.6572 202.144 83.5537 202.604 82.2666 cv
201.333 79.2959 li
201.917 79.1338 li
cp
f
207.597 81.5732 mo
207.112 81.5732 206.724 81.1885 206.724 80.6982 cv
206.718 80.2139 207.108 79.8232 207.597 79.8232 cv
208.081 79.8232 208.47 80.2139 208.47 80.6982 cv
208.47 81.1826 208.081 81.5732 207.597 81.5732 cv
cp
f
213.36 80.6533 mo
213.134 80.0244 212.913 79.3936 212.687 78.5752 cv
212.673 78.5752 li
212.44 79.3936 212.2 80.0244 211.954 80.6533 cv
213.36 80.6533 li
cp
213.011 77.8975 mo
214.704 82.4482 li
213.978 82.4482 li
213.511 81.1084 li
211.778 81.1084 li
211.292 82.4482 li
210.681 82.4482 li
212.53 77.8975 li
213.011 77.8975 li
cp
f
215.735 79.1982 mo
215.159 79.1982 li
215.159 82.4482 li
215.743 82.4482 li
215.743 80.5186 li
215.743 79.8936 216.062 79.5752 216.554 79.5752 cv
217.028 79.5752 217.288 79.8994 217.288 80.5107 cv
217.288 82.4482 li
217.872 82.4482 li
217.872 80.4912 li
217.872 79.835 218.208 79.5752 218.702 79.5752 cv
219.298 79.5752 219.415 80.0439 219.415 80.5107 cv
219.415 82.4482 li
219.999 82.4482 li
219.999 80.2764 li
219.979 79.5889 219.616 79.1201 218.896 79.1201 cv
218.532 79.1201 218.093 79.3154 217.78 79.6006 cv
217.579 79.335 217.261 79.1201 216.749 79.1201 cv
216.392 79.1201 216.003 79.29 215.735 79.6006 cv
215.735 79.1982 li
cp
f
222.712 79.4189 mo
222.544 79.251 222.231 79.1201 221.913 79.1201 cv
221.343 79.1201 220.837 79.4443 220.837 79.958 cv
220.837 80.4014 221.161 80.6221 221.53 80.8877 cv
221.837 81.1084 222.173 81.2725 222.173 81.6494 cv
222.173 81.9678 221.894 82.1104 221.622 82.1104 cv
221.362 82.1104 221.108 81.96 220.921 81.7861 cv
220.636 82.1162 li
220.851 82.3643 221.265 82.5264 221.636 82.5264 cv
222.231 82.5264 222.771 82.1553 222.771 81.6104 cv
222.771 81.1553 222.497 80.8877 222.083 80.5693 cv
221.712 80.29 221.415 80.1533 221.415 79.8799 cv
221.415 79.6084 221.681 79.5107 221.888 79.5107 cv
222.063 79.5107 222.251 79.5615 222.485 79.7178 cv
222.712 79.4189 li
cp
f
224.204 79.1982 mo
225.054 79.1982 li
225.054 79.5361 li
224.204 79.5361 li
224.204 81.376 li
224.204 81.8311 224.296 82.1045 224.651 82.1045 cv
224.866 82.1045 224.989 82.0518 225.101 81.9932 cv
225.243 82.3174 li
225.042 82.4482 224.802 82.5264 224.581 82.5264 cv
223.933 82.5264 223.62 82.1494 223.62 81.4854 cv
223.62 79.5361 li
223.167 79.5361 li
223.167 79.1982 li
223.62 79.1982 li
223.62 78.4189 li
224.204 78.2236 li
224.204 79.1982 li
cp
f
227.761 80.4717 mo
227.761 79.9658 227.546 79.5361 227.034 79.5361 cv
226.411 79.5361 226.165 80.0557 226.146 80.4717 cv
227.761 80.4717 li
cp
226.106 80.8623 mo
226.099 81.5127 226.56 82.1104 227.202 82.1104 cv
227.501 82.1104 227.864 81.999 228.091 81.8311 cv
228.261 82.1494 li
227.923 82.3896 227.521 82.5264 227.183 82.5264 cv
226.171 82.5264 225.503 81.9014 225.503 80.7588 cv
225.503 79.6338 226.308 79.1201 227.04 79.1201 cv
228.026 79.1201 228.356 80.0107 228.292 80.8623 cv
226.106 80.8623 li
cp
f
229.583 79.6006 mo
229.817 79.3545 li
229.954 79.2178 230.167 79.1201 230.304 79.1201 cv
230.446 79.1201 230.661 79.2236 230.843 79.4385 cv
230.577 79.8154 li
230.435 79.7451 230.292 79.6787 230.142 79.6787 cv
229.843 79.6787 229.597 79.9775 229.597 80.7002 cv
229.597 82.4482 li
229.013 82.4482 li
229.013 79.1982 li
229.583 79.1982 li
229.583 79.6006 li
cp
f
233.601 80.7197 mo
233.601 80.1084 233.269 79.5361 232.634 79.5361 cv
231.958 79.5361 231.681 80.0693 231.681 80.7588 cv
231.681 81.4541 231.978 82.1104 232.595 82.1104 cv
233.302 82.1104 233.601 81.4404 233.601 80.7197 cv
cp
233.601 81.9346 mo
233.587 81.9346 li
233.36 82.2529 233.017 82.5264 232.483 82.5264 cv
231.608 82.5264 231.05 81.8252 231.05 80.7842 cv
231.05 79.9385 231.661 79.1201 232.55 79.1201 cv
232.991 79.1201 233.386 79.29 233.587 79.6006 cv
233.601 79.6006 li
233.601 77.6709 li
234.185 77.6709 li
234.185 82.4482 li
233.601 82.4482 li
233.601 81.9346 li
cp
f
236.851 80.5439 mo
236.929 81.5576 236.397 82.0713 235.981 82.0713 cv
235.749 82.0713 235.515 81.8564 235.515 81.5186 cv
235.515 81.1084 235.78 80.8623 236.294 80.7061 cv
236.851 80.5439 li
cp
236.851 81.8955 mo
236.851 82.1045 236.864 82.3115 236.942 82.4482 cv
237.579 82.4482 li
237.468 82.2139 237.435 81.9014 237.435 81.6553 cv
237.435 80.2256 li
237.435 79.2764 236.722 79.1201 236.235 79.1201 cv
235.78 79.1201 235.45 79.251 235.126 79.5615 cv
235.353 79.8545 li
235.587 79.6592 235.825 79.5029 236.202 79.5029 cv
236.521 79.5029 236.825 79.7568 236.851 80.1533 cv
236.065 80.4014 li
235.392 80.6025 234.911 80.96 234.911 81.5244 cv
234.911 82.1357 235.288 82.5264 235.833 82.5264 cv
236.132 82.5264 236.417 82.3252 236.644 82.0967 cv
236.851 81.8955 li
cp
f
238.954 79.6006 mo
239.22 79.29 239.608 79.1201 239.966 79.1201 cv
240.479 79.1201 240.796 79.335 240.997 79.6006 cv
241.31 79.3154 241.751 79.1201 242.114 79.1201 cv
242.835 79.1201 243.198 79.5889 243.218 80.2764 cv
243.218 82.4482 li
242.634 82.4482 li
242.634 80.5107 li
242.634 80.0439 242.517 79.5752 241.919 79.5752 cv
241.427 79.5752 241.089 79.835 241.089 80.4912 cv
241.089 82.4482 li
240.505 82.4482 li
240.505 80.5107 li
240.505 79.8994 240.245 79.5752 239.771 79.5752 cv
239.278 79.5752 238.96 79.8936 238.96 80.5186 cv
238.96 82.4482 li
238.376 82.4482 li
238.376 79.1982 li
238.954 79.1982 li
238.954 79.6006 li
cp
f
247.681 80.6982 mo
247.681 80.2139 247.292 79.8232 246.808 79.8232 cv
246.319 79.8232 245.929 80.2139 245.935 80.6982 cv
245.935 81.1885 246.323 81.5732 246.808 81.5732 cv
247.292 81.5732 247.681 81.1826 247.681 80.6982 cv
cp
f
255.394 82.4482 mo
254.765 82.4482 li
254.765 78.7432 li
254.753 78.7432 li
254.571 79.2764 253.538 81.2842 252.929 82.4482 cv
252.675 82.4482 li
252.11 81.2842 251.171 79.3408 250.995 78.7432 cv
250.981 78.7432 li
250.981 82.4482 li
250.462 82.4482 li
250.462 77.8975 li
251.138 77.8975 li
251.722 79.1064 252.306 80.3232 252.884 81.6025 cv
253.526 80.3232 254.169 79.1064 254.804 77.8975 cv
255.394 77.8975 li
255.394 82.4482 li
cp
f
258.587 82.4482 mo
259.165 82.4482 li
259.165 79.1982 li
258.581 79.1982 li
258.581 81.0967 li
258.581 81.7275 258.21 82.0967 257.763 82.0967 cv
257.237 82.0967 256.978 81.7725 256.978 81.1611 cv
256.978 79.1982 li
256.394 79.1982 li
256.394 81.292 li
256.394 82.1104 256.796 82.5264 257.542 82.5264 cv
257.964 82.5264 258.257 82.3564 258.587 82.0713 cv
258.587 82.4482 li
cp
f
260.702 79.6006 mo
261.007 79.2764 261.476 79.1201 261.812 79.1201 cv
262.558 79.1201 262.96 79.5361 262.96 80.3545 cv
262.96 82.4482 li
262.376 82.4482 li
262.376 80.4795 li
262.376 79.8682 262.116 79.5498 261.591 79.5498 cv
261.13 79.5498 260.71 79.8682 260.71 80.4912 cv
260.71 82.4482 li
260.126 82.4482 li
260.126 79.1982 li
260.702 79.1982 li
260.702 79.6006 li
cp
f
264.505 79.1982 mo
264.505 82.4482 li
263.921 82.4482 li
263.921 79.1982 li
264.505 79.1982 li
cp
263.843 78.126 mo
263.843 77.9639 263.979 77.7803 264.214 77.7803 cv
264.446 77.7803 264.583 77.9639 264.583 78.126 cv
264.583 78.3018 264.499 78.5225 264.214 78.5225 cv
263.927 78.5225 263.843 78.3018 263.843 78.126 cv
cp
f
267.958 82.1885 mo
267.64 82.415 267.257 82.5264 266.978 82.5264 cv
265.44 82.5264 265.245 81.2646 265.245 80.8174 cv
265.245 80.0049 265.784 79.1201 267.003 79.1201 cv
267.335 79.1201 267.632 79.2041 267.872 79.3877 cv
267.679 79.7178 li
267.489 79.6279 267.249 79.5498 267.011 79.5498 cv
266.478 79.5498 265.874 79.8994 265.874 80.7842 cv
265.874 81.46 266.218 82.0967 267.003 82.0967 cv
267.282 82.0967 267.542 82.0264 267.796 81.8623 cv
267.958 82.1885 li
cp
f
269.165 79.6006 mo
269.47 79.2764 269.937 79.1201 270.274 79.1201 cv
271.021 79.1201 271.423 79.5361 271.423 80.3545 cv
271.423 82.4482 li
270.839 82.4482 li
270.839 80.4795 li
270.839 79.8682 270.579 79.5498 270.054 79.5498 cv
269.593 79.5498 269.171 79.8682 269.171 80.4912 cv
269.171 82.4482 li
268.587 82.4482 li
268.587 77.6709 li
269.165 77.6709 li
269.165 79.6006 li
cp
f
275.013 81.5732 mo
274.528 81.5732 274.14 81.1885 274.14 80.6982 cv
274.134 80.2139 274.524 79.8232 275.013 79.8232 cv
275.497 79.8232 275.886 80.2139 275.886 80.6982 cv
275.886 81.1826 275.497 81.5732 275.013 81.5732 cv
cp
f
279.298 78.3525 mo
279.731 78.3525 li
280.407 78.3525 280.687 78.7178 280.687 79.2178 cv
280.687 79.8936 280.304 80.2178 279.692 80.251 cv
279.485 80.2568 li
279.485 80.6729 li
279.687 80.6729 li
280.706 80.6729 281.36 79.9775 281.36 79.2119 cv
281.36 78.3271 280.771 77.8975 279.81 77.8975 cv
278.667 77.8975 li
278.667 82.4482 li
279.298 82.4482 li
279.298 78.3525 li
cp
f
283.249 80.7061 mo
282.737 80.8623 282.47 81.1084 282.47 81.5186 cv
282.47 81.8564 282.704 82.0713 282.938 82.0713 cv
283.353 82.0713 283.886 81.5576 283.808 80.5439 cv
283.249 80.7061 li
cp
283.599 82.0967 mo
283.372 82.3252 283.087 82.5264 282.788 82.5264 cv
282.243 82.5264 281.866 82.1357 281.866 81.5244 cv
281.866 80.96 282.347 80.6025 283.022 80.4014 cv
283.808 80.1533 li
283.78 79.7568 283.476 79.5029 283.159 79.5029 cv
282.782 79.5029 282.542 79.6592 282.308 79.8545 cv
282.081 79.5615 li
282.405 79.251 282.737 79.1201 283.19 79.1201 cv
283.677 79.1201 284.392 79.2764 284.392 80.2256 cv
284.392 81.6553 li
284.392 81.9014 284.423 82.2139 284.534 82.4482 cv
283.897 82.4482 li
283.819 82.3115 283.808 82.1045 283.808 81.8955 cv
283.599 82.0967 li
cp
f
285.903 79.6006 mo
286.136 79.3545 li
286.272 79.2178 286.487 79.1201 286.624 79.1201 cv
286.767 79.1201 286.979 79.2236 287.161 79.4385 cv
286.896 79.8154 li
286.753 79.7451 286.61 79.6787 286.462 79.6787 cv
286.163 79.6787 285.917 79.9775 285.917 80.7002 cv
285.917 82.4482 li
285.333 82.4482 li
285.333 79.1982 li
285.903 79.1982 li
285.903 79.6006 li
cp
f
288.175 79.1982 mo
288.175 82.4482 li
287.591 82.4482 li
287.591 79.1982 li
288.175 79.1982 li
cp
287.513 78.126 mo
287.513 77.9639 287.649 77.7803 287.882 77.7803 cv
288.116 77.7803 288.253 77.9639 288.253 78.126 cv
288.253 78.3018 288.167 78.5225 287.882 78.5225 cv
287.597 78.5225 287.513 78.3018 287.513 78.126 cv
cp
f
290.659 79.7178 mo
290.427 79.5615 290.237 79.5107 290.062 79.5107 cv
289.854 79.5107 289.589 79.6084 289.589 79.8799 cv
289.589 80.1533 289.888 80.29 290.257 80.5693 cv
290.673 80.8877 290.944 81.1553 290.944 81.6104 cv
290.944 82.1553 290.407 82.5264 289.81 82.5264 cv
289.44 82.5264 289.024 82.3643 288.81 82.1162 cv
289.095 81.7861 li
289.284 81.96 289.536 82.1104 289.796 82.1104 cv
290.069 82.1104 290.349 81.9678 290.349 81.6494 cv
290.349 81.2725 290.011 81.1084 289.706 80.8877 cv
289.335 80.6221 289.011 80.4014 289.011 79.958 cv
289.011 79.4443 289.517 79.1201 290.089 79.1201 cv
290.407 79.1201 290.718 79.251 290.886 79.4189 cv
290.659 79.7178 li
cp
f
294.288 81.5732 mo
293.804 81.5732 293.415 81.1885 293.415 80.6982 cv
293.411 80.2139 293.8 79.8232 294.288 79.8232 cv
294.772 79.8232 295.163 80.2139 295.163 80.6982 cv
295.163 81.1826 294.772 81.5732 294.288 81.5732 cv
cp
f
302.876 82.4482 mo
302.247 82.4482 li
302.247 78.7432 li
302.233 78.7432 li
302.052 79.2764 301.021 81.2842 300.409 82.4482 cv
300.157 82.4482 li
299.593 81.2842 298.651 79.3408 298.476 78.7432 cv
298.464 78.7432 li
298.464 82.4482 li
297.944 82.4482 li
297.944 77.8975 li
298.618 77.8975 li
299.202 79.1064 299.786 80.3232 300.364 81.6025 cv
301.007 80.3232 301.649 79.1064 302.286 77.8975 cv
302.876 77.8975 li
302.876 82.4482 li
cp
f
304.485 79.1982 mo
304.485 82.4482 li
303.901 82.4482 li
303.901 79.1982 li
304.485 79.1982 li
cp
303.823 78.126 mo
303.823 77.9639 303.96 77.7803 304.192 77.7803 cv
304.427 77.7803 304.563 77.9639 304.563 78.126 cv
304.563 78.3018 304.478 78.5225 304.192 78.5225 cv
303.907 78.5225 303.823 78.3018 303.823 78.126 cv
cp
f
305.444 82.4482 mo
305.444 77.6709 li
306.028 77.6709 li
306.028 82.4482 li
305.444 82.4482 li
cp
f
308.151 80.7061 mo
307.638 80.8623 307.372 81.1084 307.372 81.5186 cv
307.372 81.8564 307.606 82.0713 307.839 82.0713 cv
308.255 82.0713 308.786 81.5576 308.71 80.5439 cv
308.151 80.7061 li
cp
308.501 82.0967 mo
308.274 82.3252 307.989 82.5264 307.69 82.5264 cv
307.146 82.5264 306.769 82.1357 306.769 81.5244 cv
306.769 80.96 307.249 80.6025 307.925 80.4014 cv
308.71 80.1533 li
308.683 79.7568 308.378 79.5029 308.06 79.5029 cv
307.685 79.5029 307.444 79.6592 307.21 79.8545 cv
306.983 79.5615 li
307.308 79.251 307.638 79.1201 308.093 79.1201 cv
308.579 79.1201 309.294 79.2764 309.294 80.2256 cv
309.294 81.6553 li
309.294 81.9014 309.325 82.2139 309.437 82.4482 cv
308.8 82.4482 li
308.722 82.3115 308.71 82.1045 308.71 81.8955 cv
308.501 82.0967 li
cp
f
310.812 79.6006 mo
311.116 79.2764 311.583 79.1201 311.921 79.1201 cv
312.667 79.1201 313.069 79.5361 313.069 80.3545 cv
313.069 82.4482 li
312.485 82.4482 li
312.485 80.4795 li
312.485 79.8682 312.226 79.5498 311.7 79.5498 cv
311.239 79.5498 310.817 79.8682 310.817 80.4912 cv
310.817 82.4482 li
310.233 82.4482 li
310.233 79.1982 li
310.812 79.1982 li
310.812 79.6006 li
cp
f
60.7749 56.8833 mo
0.598633 56.8833 li
0.598633 35.0811 li
60.7749 35.0811 li
60.7749 56.8833 li
cp
false sop
1 0.92 0 0.1 cmyk
f
51.5796 46.937 mo
50.7847 45.7871 49.1909 43.5728 48.0835 42.2002 cv
48.0835 42.2002 48.0386 45.7871 48.1265 46.937 cv
47.8179 46.937 47.5093 46.8931 47.1538 46.937 cv
47.3315 46.3179 47.3745 41.0942 47.1968 40.4307 cv
47.4624 40.4307 47.8628 40.4736 48.1265 40.4307 cv
48.9702 41.5811 50.6929 43.8823 51.5796 45.0781 cv
51.5796 44.1919 51.6245 41.4043 51.5366 40.4307 cv
51.8921 40.4736 52.1558 40.5176 52.5112 40.4307 cv
52.3784 41.2266 52.2886 46.1416 52.5112 46.937 cv
52.2437 46.8931 51.8452 46.8931 51.5796 46.937 cv
0 0 0 0 cmyk
f
37.5908 45.1226 mo
37.5908 46.6284 36.3516 47.0254 35.5537 47.0254 cv
34.9785 47.0254 34.2256 46.7607 33.7383 46.4946 cv
33.7383 46.0078 33.7832 45.8311 33.7383 45.3438 cv
34.0039 45.6982 34.8887 46.229 35.5098 46.229 cv
36.1289 46.229 36.4834 45.875 36.5273 45.2988 cv
36.5732 44.5034 35.2891 43.8843 34.7148 43.4844 cv
34.2256 43.0854 33.873 42.6885 33.873 42.0234 cv
33.873 41.1382 34.668 40.4302 35.7754 40.4302 cv
36.4834 40.4302 36.8379 40.6514 37.459 40.9609 cv
37.2363 41.2705 37.1025 41.5366 36.9717 41.8462 cv
36.75 41.5366 36.3516 41.1382 35.7754 41.1382 cv
35.2012 41.1382 34.8887 41.5366 34.8887 41.9795 cv
34.8887 42.377 35.4219 42.7314 36.3047 43.3062 cv
37.0596 43.7944 37.5908 44.1929 37.5908 45.1226 cv
f
32.4551 46.937 mo
32.0117 46.8931 31.5254 46.8931 31.082 46.937 cv
30.8613 46.5396 29.3564 44.3701 29.1357 44.1919 cv
29.0459 43.5728 li
29.9307 43.6162 30.5518 43.2188 30.5518 42.2886 cv
30.5518 41.5361 29.8877 41.1382 29.1797 41.1382 cv
28.6035 41.1382 li
28.5596 42.5547 28.6035 45.6538 28.6914 46.937 cv
28.2939 46.937 27.8955 46.8931 27.4971 46.937 cv
27.6299 45.875 27.6299 41.5361 27.4971 40.4307 cv
28.6035 40.5176 28.3389 40.4307 29.3115 40.4307 cv
30.2412 40.4307 31.5703 40.7397 31.5703 42.1567 cv
31.5703 43.3066 30.5967 43.9707 30.1084 43.9707 cv
30.1973 44.0151 32.1016 46.5845 32.4551 46.937 cv
f
18.5986 46.1416 mo
18.5537 46.4063 18.5537 46.7168 18.5537 46.9824 cv
17.7568 46.8931 15.8975 46.8931 15.1445 46.9824 cv
15.2334 46.1416 15.2334 41.3145 15.1445 40.4307 cv
15.6758 40.5176 17.9346 40.5176 18.5088 40.4307 cv
18.5088 41.2705 li
17.9346 41.2266 16.8711 41.1382 16.251 41.1821 cv
16.251 41.625 16.208 42.4219 16.251 43.1738 cv
16.8711 43.2188 17.7568 43.2188 18.376 43.0854 cv
18.376 43.396 18.376 43.6611 18.4209 43.9272 cv
17.6689 43.8384 16.96 43.8384 16.251 43.8823 cv
16.208 44.3701 16.208 45.7871 16.208 46.23 cv
16.8271 46.23 17.9346 46.1855 18.5986 46.1416 cv
f
45.5151 43.6172 mo
45.5151 45.4771 44.144 47.0708 42.3281 47.0708 cv
40.3789 47.0708 39.0967 45.521 39.0967 43.6172 cv
39.0967 41.9795 40.4678 40.4292 42.2832 40.4292 cv
44.144 40.4292 45.5151 41.9795 45.5151 43.6172 cv
44.4077 43.6621 mo
44.4077 42.5986 43.7437 41.1382 42.2832 41.1382 cv
40.8223 41.1382 40.2012 42.5986 40.2012 43.6621 cv
40.2012 44.9019 40.8662 46.3623 42.3281 46.3623 cv
43.7007 46.3623 44.4077 44.9019 44.4077 43.6621 cv
f
25.8135 46.937 mo
25.5049 46.8931 24.9287 46.937 24.5752 46.937 cv
24.4863 46.5396 24.1768 45.6108 23.999 45.0781 cv
23.1572 45.0342 22.3174 45.0342 21.5645 45.0781 cv
21.4307 45.5654 21.1221 46.6284 21.0332 46.937 cv
20.0146 46.937 li
20.3682 46.2729 22.1836 41.2705 22.3604 40.4736 cv
22.7598 40.5176 23.0693 40.5176 23.4238 40.4736 cv
23.6455 41.3599 25.5049 46.3179 25.8135 46.937 cv
23.7334 44.2813 mo
23.4697 43.4844 22.9805 42.1567 22.7598 41.5361 cv
22.5381 42.1567 22.1406 43.4399 21.8301 44.2813 cv
22.3174 44.3701 23.291 44.3252 23.7334 44.2813 cv
f
13.1143 42.1577 mo
13.1143 43.6274 11.6875 44.3638 10.4326 44.3198 cv
10.3896 44.1045 10.3896 43.8872 10.3447 43.7158 cv
11.4287 43.6719 12.1201 43.1943 12.1201 42.2432 cv
12.1201 41.5078 11.4707 40.9458 10.6475 40.9458 cv
9.91309 40.9458 li
9.91309 42.2002 9.91309 45.5747 10 46.8291 cv
9.61035 46.7427 9.26465 46.7427 8.87598 46.8291 cv
8.83105 46.8291 li
8.91797 46.1802 9.00391 41.0317 8.83105 40.2969 cv
9.95605 40.3833 9.78418 40.2969 10.7354 40.2969 cv
11.7295 40.2969 13.1143 40.686 13.1143 42.1577 cv
f
30.3936 50.0234 mo
21.4482 50.0234 13.9424 51.396 7.94043 52.7769 cv
7.94043 52.6675 li
8.6875 52.3579 17.7061 48.9976 30.3936 48.9937 cv
30.3916 48.9937 li
43.0801 48.9976 52.0952 52.3579 52.8433 52.6675 cv
52.8452 52.6675 52.8433 52.7769 52.8433 52.7769 cv
46.8452 51.396 39.334 50.0234 30.3916 50.0234 cv
30.3936 50.0234 li
cp
0 0.16 1 0 cmyk
f
3.3042 1.42236 mo
1.31445 1.42236 li
1.31445 2.854 li
2.90771 2.854 li
2.90771 3.88037 li
1.31445 3.88037 li
1.31445 6.66211 li
0.0541992 6.66211 li
0.0541992 0.405273 li
3.44824 0.405273 li
3.3042 1.42236 li
cp
true sop
0 0 0 1 nzopmsc
f
3.9873 6.66211 mo
3.9873 2.13379 li
5.19336 1.94482 li
5.19336 6.66211 li
3.9873 6.66211 li
cp
4.59033 1.53076 mo
4.18506 1.53076 3.85205 1.19727 3.85205 0.783203 cv
3.85205 0.369141 4.19434 0.0361328 4.6084 0.0361328 cv
5.01367 0.0361328 5.3374 0.369141 5.3374 0.783203 cv
5.3374 1.19727 5.00439 1.53076 4.59033 1.53076 cv
cp
f
8.90186 6.66211 mo
8.90186 3.66406 li
8.90186 3.14209 8.81152 2.98926 8.49658 2.98926 cv
8.25342 2.98926 7.93848 3.15088 7.65918 3.40332 cv
7.65918 6.66211 li
6.45313 6.66211 li
6.45313 3.32227 li
6.45313 2.92578 6.39893 2.54785 6.29102 2.2417 cv
7.3623 1.93555 li
7.47021 2.125 7.5332 2.32275 7.5332 2.51172 cv
7.71338 2.38574 7.86621 2.27783 8.06445 2.16992 cv
8.30762 2.04395 8.62256 1.97168 8.89258 1.97168 cv
9.40576 1.97168 9.85596 2.2417 10 2.6377 cv
10.063 2.80908 10.0898 3.00684 10.0898 3.29492 cv
10.0898 6.66211 li
8.90186 6.66211 li
cp
f
13.4468 4.64551 mo
12.6094 4.64551 12.3213 4.79834 12.3213 5.34766 cv
12.3213 5.70801 12.5464 5.95068 12.8525 5.95068 cv
13.0776 5.95068 13.3027 5.83398 13.4824 5.63574 cv
13.5005 4.64551 li
13.4468 4.64551 li
cp
14.4727 6.896 mo
14.1938 6.7793 13.9419 6.57227 13.8247 6.33789 cv
13.7349 6.42822 13.6357 6.51807 13.5454 6.58105 cv
13.3203 6.74316 12.9966 6.83301 12.6182 6.83301 cv
11.5918 6.83301 11.0337 6.31104 11.0337 5.39258 cv
11.0337 4.3125 11.7813 3.80811 13.2485 3.80811 cv
13.3384 3.80811 13.4194 3.80811 13.5186 3.81738 cv
13.5186 3.62842 li
13.5186 3.11523 13.4194 2.94385 12.9785 2.94385 cv
12.5913 2.94385 12.1411 3.13281 11.646 3.46631 cv
11.1328 2.60205 li
11.376 2.44873 11.5562 2.35889 11.8799 2.22363 cv
12.3301 2.03467 12.7173 1.95361 13.1406 1.95361 cv
13.9146 1.95361 14.4458 2.2417 14.626 2.75488 cv
14.689 2.94385 14.7158 3.08789 14.707 3.58301 cv
14.6797 5.13184 li
14.6709 5.63574 14.707 5.85205 15.1123 6.1582 cv
14.4727 6.896 li
cp
f
18.4058 6.66211 mo
18.4058 3.66406 li
18.4058 3.14209 18.3154 2.98926 18.0005 2.98926 cv
17.7573 2.98926 17.4424 3.15088 17.1631 3.40332 cv
17.1631 6.66211 li
15.957 6.66211 li
15.957 3.32227 li
15.957 2.92578 15.9028 2.54785 15.7949 2.2417 cv
16.8662 1.93555 li
16.9741 2.125 17.0371 2.32275 17.0371 2.51172 cv
17.2173 2.38574 17.3701 2.27783 17.5684 2.16992 cv
17.8115 2.04395 18.1265 1.97168 18.3965 1.97168 cv
18.9097 1.97168 19.3599 2.2417 19.5039 2.6377 cv
19.5669 2.80908 19.5938 3.00684 19.5938 3.29492 cv
19.5938 6.66211 li
18.4058 6.66211 li
cp
f
23.7158 6.48193 mo
23.3916 6.6709 23.0313 6.77002 22.5903 6.77002 cv
21.3208 6.77002 20.583 5.8877 20.583 4.39355 cv
20.583 3.33105 20.9878 2.62891 21.5278 2.25977 cv
21.834 2.05273 22.2842 1.91748 22.6714 1.91748 cv
22.9775 1.91748 23.3105 1.98975 23.5625 2.125 cv
23.7339 2.21484 23.8149 2.27783 24.0127 2.44873 cv
23.4277 3.24121 li
23.1846 3.01611 22.9233 2.88086 22.6982 2.88086 cv
22.1582 2.88086 21.915 3.34912 21.915 4.42969 cv
21.915 5.03271 21.9961 5.39258 22.1494 5.59082 cv
22.2754 5.75293 22.4824 5.85205 22.6895 5.85205 cv
22.9683 5.85205 23.2207 5.73486 23.5176 5.47363 cv
23.5898 5.41064 li
24.1387 6.14014 li
23.959 6.31982 23.8779 6.38281 23.7158 6.48193 cv
cp
f
24.9478 6.66211 mo
24.9478 2.13379 li
26.1538 1.94482 li
26.1538 6.66211 li
24.9478 6.66211 li
cp
25.5508 1.53076 mo
25.1455 1.53076 24.8125 1.19727 24.8125 0.783203 cv
24.8125 0.369141 25.1548 0.0361328 25.5688 0.0361328 cv
25.9736 0.0361328 26.2979 0.369141 26.2979 0.783203 cv
26.2979 1.19727 25.9648 1.53076 25.5508 1.53076 cv
cp
f
29.5112 4.64551 mo
28.6738 4.64551 28.3857 4.79834 28.3857 5.34766 cv
28.3857 5.70801 28.6108 5.95068 28.917 5.95068 cv
29.1421 5.95068 29.3672 5.83398 29.5469 5.63574 cv
29.5649 4.64551 li
29.5112 4.64551 li
cp
30.5371 6.896 mo
30.2583 6.7793 30.0063 6.57227 29.8892 6.33789 cv
29.7993 6.42822 29.7002 6.51807 29.6099 6.58105 cv
29.3848 6.74316 29.061 6.83301 28.6826 6.83301 cv
27.6563 6.83301 27.0981 6.31104 27.0981 5.39258 cv
27.0981 4.3125 27.8457 3.80811 29.313 3.80811 cv
29.4028 3.80811 29.4839 3.80811 29.583 3.81738 cv
29.583 3.62842 li
29.583 3.11523 29.4839 2.94385 29.043 2.94385 cv
28.6558 2.94385 28.2056 3.13281 27.7104 3.46631 cv
27.1973 2.60205 li
27.4404 2.44873 27.6206 2.35889 27.9443 2.22363 cv
28.3945 2.03467 28.7817 1.95361 29.2051 1.95361 cv
29.979 1.95361 30.5103 2.2417 30.6904 2.75488 cv
30.7534 2.94385 30.7803 3.08789 30.7715 3.58301 cv
30.7441 5.13184 li
30.7354 5.63574 30.7715 5.85205 31.1768 6.1582 cv
30.5371 6.896 li
cp
f
33.2007 6.77002 mo
32.6875 6.77002 32.2734 6.52686 32.1294 6.14014 cv
32.0391 5.90576 32.0215 5.76172 32.0215 5.10449 cv
32.0215 1.66553 li
32.0215 1.0625 32.0034 0.693359 31.9585 0.279297 cv
33.1914 0 li
33.2368 0.251953 33.2549 0.549316 33.2549 1.19727 cv
33.2549 4.78955 li
33.2549 5.58203 33.2637 5.68994 33.3359 5.81592 cv
33.3809 5.89697 33.4795 5.94189 33.5786 5.94189 cv
33.624 5.94189 33.6509 5.94189 33.7139 5.92383 cv
33.9209 6.64404 li
33.7139 6.7251 33.4619 6.77002 33.2007 6.77002 cv
cp
f
40.3379 1.44971 mo
38.8438 1.44971 li
38.8438 6.66211 li
37.5654 6.66211 li
37.5654 1.44971 li
36.0347 1.44971 li
36.0347 0.405273 li
40.5454 0.405273 li
40.3379 1.44971 li
cp
f
40.9941 6.66211 mo
40.9941 2.13379 li
42.2002 1.94482 li
42.2002 6.66211 li
40.9941 6.66211 li
cp
41.5972 1.53076 mo
41.1919 1.53076 40.8589 1.19727 40.8589 0.783203 cv
40.8589 0.369141 41.2012 0.0361328 41.6152 0.0361328 cv
42.0205 0.0361328 42.3442 0.369141 42.3442 0.783203 cv
42.3442 1.19727 42.0112 1.53076 41.5972 1.53076 cv
cp
f
48.168 6.66211 mo
48.168 3.61914 li
48.168 3.06982 48.105 2.96191 47.79 2.96191 cv
47.5649 2.96191 47.25 3.11523 46.9888 3.34912 cv
46.9888 6.66211 li
45.8457 6.66211 li
45.8457 3.66406 li
45.8457 3.08789 45.7646 2.95313 45.4312 2.95313 cv
45.2061 2.95313 44.9004 3.06982 44.6392 3.3042 cv
44.6392 6.66211 li
43.46 6.66211 li
43.46 3.44824 li
43.46 2.78174 43.4146 2.49365 43.2886 2.26855 cv
44.3779 1.97168 li
44.459 2.09766 44.4951 2.20557 44.54 2.43994 cv
44.855 2.13379 45.2422 1.97168 45.6655 1.97168 cv
46.0435 1.97168 46.3584 2.09766 46.6016 2.34961 cv
46.6646 2.41309 46.7275 2.49365 46.7817 2.57471 cv
47.2051 2.14258 47.583 1.97168 48.0869 1.97168 cv
48.4473 1.97168 48.7896 2.07959 48.9966 2.25977 cv
49.2573 2.48486 49.3384 2.75488 49.3384 3.38525 cv
49.3384 6.66211 li
48.168 6.66211 li
cp
f
53.0459 3.79932 mo
53.0459 3.45703 53.0098 3.27734 52.9019 3.10596 cv
52.7847 2.92578 52.6138 2.83594 52.3706 2.83594 cv
51.9111 2.83594 51.6504 3.19629 51.6504 3.83545 cv
51.6504 3.85352 li
53.0459 3.85352 li
53.0459 3.79932 li
cp
51.6323 4.73535 mo
51.6323 4.77148 li
51.6323 5.48291 51.9834 5.8877 52.6045 5.8877 cv
53.0186 5.8877 53.4058 5.73486 53.7749 5.42871 cv
54.2432 6.14893 li
53.7119 6.58105 53.1538 6.78809 52.5054 6.78809 cv
51.1821 6.78809 50.3271 5.85205 50.3271 4.40234 cv
50.3271 3.57422 50.498 3.0249 50.9033 2.57471 cv
51.2813 2.15186 51.7402 1.95361 52.3525 1.95361 cv
52.8838 1.95361 53.3877 2.13379 53.6851 2.43994 cv
54.1079 2.87207 54.2969 3.49316 54.2969 4.45654 cv
54.2969 4.55566 54.2969 4.6543 54.2969 4.73535 cv
51.6323 4.73535 li
cp
f
56.6094 6.80615 mo
56.0425 6.80615 55.4214 6.62598 54.7461 6.2749 cv
55.1782 5.39258 li
55.5474 5.61768 56.1865 5.91504 56.7085 5.91504 cv
57.0508 5.91504 57.3208 5.68994 57.3208 5.39258 cv
57.3208 5.07764 57.0957 4.91553 56.6094 4.82568 cv
56.0693 4.72656 li
55.7632 4.67236 55.3853 4.45654 55.2231 4.2583 cv
55.061 4.06055 54.9619 3.72705 54.9619 3.43018 cv
54.9619 2.52979 55.6733 1.92676 56.7446 1.92676 cv
57.4829 1.92676 57.9692 2.15186 58.3921 2.35889 cv
57.9961 3.16895 li
57.5371 2.93506 57.2036 2.83594 56.8618 2.83594 cv
56.5107 2.83594 56.2764 3.01611 56.2764 3.28613 cv
56.2764 3.52002 56.4297 3.646 56.8525 3.75439 cv
57.4106 3.89844 li
57.978 4.04248 58.167 4.21338 58.3291 4.42041 cv
58.5 4.63672 58.5811 4.89746 58.5811 5.20361 cv
58.5811 6.1582 57.7891 6.80615 56.6094 6.80615 cv
cp
f
2.11572 11.4224 mo
1.31445 11.4224 li
1.31445 13.3311 li
1.97168 13.3311 li
2.48486 13.3311 2.6377 13.2681 2.80859 13.0068 cv
2.91699 12.8359 2.96191 12.6558 2.96191 12.3589 cv
2.96191 11.7734 2.64697 11.4224 2.11572 11.4224 cv
cp
3.25879 14.1504 mo
2.9707 14.2852 2.70068 14.3574 2.00781 14.3574 cv
1.31445 14.3574 li
1.31445 16.6621 li
0.0541992 16.6621 li
0.0541992 10.4053 li
1.70166 10.4053 li
2.76367 10.4053 3.08789 10.5132 3.43896 10.7114 cv
4.02441 11.0356 4.33936 11.6118 4.33936 12.332 cv
4.33936 13.1602 3.94336 13.8262 3.25879 14.1504 cv
cp
f
7.44336 13.106 mo
7.32617 13.043 7.22754 13.0161 7.09229 13.0161 cv
6.82227 13.0161 6.5791 13.1421 6.354 13.4033 cv
6.354 16.6621 li
5.14795 16.6621 li
5.14795 13.583 li
5.14795 12.9619 5.07568 12.4937 4.97656 12.2329 cv
6.05713 11.9448 li
6.16504 12.1338 6.22803 12.3408 6.24609 12.6021 cv
6.50732 12.251 6.87646 11.9448 7.32617 11.9448 cv
7.50635 11.9448 7.5874 11.9629 7.77637 12.0439 cv
7.44336 13.106 li
cp
f
10.7197 13.7993 mo
10.7197 13.457 10.6836 13.2773 10.5757 13.106 cv
10.4585 12.9258 10.2876 12.8359 10.0444 12.8359 cv
9.58496 12.8359 9.32422 13.1963 9.32422 13.8354 cv
9.32422 13.8535 li
10.7197 13.8535 li
10.7197 13.7993 li
cp
9.30615 14.7354 mo
9.30615 14.7715 li
9.30615 15.4829 9.65723 15.8877 10.2783 15.8877 cv
10.6924 15.8877 11.0796 15.7349 11.4487 15.4287 cv
11.917 16.1489 li
11.3857 16.5811 10.8276 16.7881 10.1792 16.7881 cv
8.85596 16.7881 8.00098 15.8521 8.00098 14.4023 cv
8.00098 13.5742 8.17188 13.0249 8.57715 12.5747 cv
8.95508 12.1519 9.41406 11.9536 10.0264 11.9536 cv
10.5576 11.9536 11.0615 12.1338 11.3589 12.4399 cv
11.7817 12.8721 11.9707 13.4932 11.9707 14.4565 cv
11.9707 14.5557 11.9707 14.6543 11.9707 14.7354 cv
9.30615 14.7354 li
cp
f
15.2739 16.6621 mo
15.2739 13.6641 li
15.2739 13.1421 15.1836 12.9893 14.8687 12.9893 cv
14.6255 12.9893 14.3105 13.1509 14.0313 13.4033 cv
14.0313 16.6621 li
12.8252 16.6621 li
12.8252 13.3223 li
12.8252 12.9258 12.771 12.5479 12.6631 12.2417 cv
13.7344 11.9355 li
13.8423 12.125 13.9053 12.3228 13.9053 12.5117 cv
14.0854 12.3857 14.2383 12.2778 14.4365 12.1699 cv
14.6797 12.0439 14.9946 11.9717 15.2646 11.9717 cv
15.7778 11.9717 16.228 12.2417 16.3721 12.6377 cv
16.4351 12.8091 16.4619 13.0068 16.4619 13.2949 cv
16.4619 16.6621 li
15.2739 16.6621 li
cp
f
19.0444 16.77 mo
18.4321 16.77 17.9463 16.5 17.8022 16.0947 cv
17.73 15.897 17.7212 15.8066 17.7212 15.3838 cv
17.7212 12.8809 li
17.2617 12.8809 li
17.2617 12.0527 li
17.7212 12.0527 li
17.7212 11.6025 17.7212 11.3057 17.7661 10.9634 cv
18.9902 10.6572 li
18.9453 11.0806 18.9185 11.5845 18.9185 12.0527 cv
19.9985 12.0527 li
19.6924 12.8809 li
18.9185 12.8809 li
18.9185 15.1948 li
18.9185 15.7798 19.0264 15.9331 19.4404 15.9331 cv
19.5483 15.9331 19.6567 15.9058 19.8726 15.8428 cv
20.0259 16.563 li
19.6748 16.707 19.3594 16.77 19.0444 16.77 cv
cp
f
20.79 16.6621 mo
20.79 12.1338 li
21.9961 11.9448 li
21.9961 16.6621 li
20.79 16.6621 li
cp
21.3931 11.5308 mo
20.9878 11.5308 20.6548 11.1973 20.6548 10.7832 cv
20.6548 10.3691 20.9971 10.0361 21.4111 10.0361 cv
21.8164 10.0361 22.1401 10.3691 22.1401 10.7832 cv
22.1401 11.1973 21.8071 11.5308 21.3931 11.5308 cv
cp
f
26.1187 16.4819 mo
25.7944 16.6709 25.4346 16.77 24.9932 16.77 cv
23.7236 16.77 22.9854 15.8877 22.9854 14.3936 cv
22.9854 13.3311 23.3906 12.6289 23.9307 12.2598 cv
24.2368 12.0527 24.687 11.9175 25.0742 11.9175 cv
25.3804 11.9175 25.7134 11.9897 25.9653 12.125 cv
26.1367 12.2148 26.2178 12.2778 26.4155 12.4487 cv
25.8306 13.2412 li
25.5874 13.0161 25.3262 12.8809 25.1011 12.8809 cv
24.561 12.8809 24.3179 13.3491 24.3179 14.4297 cv
24.3179 15.0327 24.3989 15.3926 24.5522 15.5908 cv
24.6782 15.7529 24.8853 15.8521 25.0923 15.8521 cv
25.3711 15.8521 25.6235 15.7349 25.9204 15.4736 cv
25.9927 15.4106 li
26.5415 16.1401 li
26.3618 16.3198 26.2808 16.3828 26.1187 16.4819 cv
cp
f
29.7993 13.7993 mo
29.7993 13.457 29.7632 13.2773 29.6553 13.106 cv
29.5381 12.9258 29.3672 12.8359 29.124 12.8359 cv
28.665 12.8359 28.4038 13.1963 28.4038 13.8354 cv
28.4038 13.8535 li
29.7993 13.8535 li
29.7993 13.7993 li
cp
28.3857 14.7354 mo
28.3857 14.7715 li
28.3857 15.4829 28.7368 15.8877 29.3579 15.8877 cv
29.772 15.8877 30.1592 15.7349 30.5283 15.4287 cv
30.9966 16.1489 li
30.4653 16.5811 29.9072 16.7881 29.2588 16.7881 cv
27.9355 16.7881 27.0801 15.8521 27.0801 14.4023 cv
27.0801 13.5742 27.2515 13.0249 27.6563 12.5747 cv
28.0347 12.1519 28.4937 11.9536 29.106 11.9536 cv
29.6372 11.9536 30.1411 12.1338 30.4385 12.4399 cv
30.8613 12.8721 31.0503 13.4932 31.0503 14.4565 cv
31.0503 14.5557 31.0503 14.6543 31.0503 14.7354 cv
28.3857 14.7354 li
cp
f
36.9814 16.6621 mo
36.9814 13.8711 li
35.1807 13.8711 li
35.1807 16.6621 li
33.9297 16.6621 li
33.9297 10.4053 li
35.1807 10.4053 li
35.1807 12.8359 li
36.9814 12.8359 li
36.9814 10.4053 li
38.2598 10.4053 li
38.2598 16.6621 li
36.9814 16.6621 li
cp
f
41.6162 14.6455 mo
40.7788 14.6455 40.4907 14.7983 40.4907 15.3477 cv
40.4907 15.708 40.7158 15.9507 41.022 15.9507 cv
41.2471 15.9507 41.4722 15.834 41.6519 15.6357 cv
41.6699 14.6455 li
41.6162 14.6455 li
cp
42.6421 16.896 mo
42.3633 16.7793 42.1113 16.5723 41.9941 16.3379 cv
41.9043 16.4282 41.8052 16.5181 41.7148 16.5811 cv
41.4897 16.7432 41.166 16.833 40.7876 16.833 cv
39.7612 16.833 39.2031 16.311 39.2031 15.3926 cv
39.2031 14.3125 39.9507 13.8081 41.418 13.8081 cv
41.5078 13.8081 41.5889 13.8081 41.688 13.8174 cv
41.688 13.6284 li
41.688 13.1152 41.5889 12.9438 41.1479 12.9438 cv
40.7607 12.9438 40.3105 13.1328 39.8154 13.4663 cv
39.3022 12.6021 li
39.5454 12.4487 39.7256 12.3589 40.0493 12.2236 cv
40.4995 12.0347 40.8867 11.9536 41.3101 11.9536 cv
42.084 11.9536 42.6152 12.2417 42.7954 12.7549 cv
42.8584 12.9438 42.8853 13.0879 42.8765 13.583 cv
42.8496 15.1318 li
42.8403 15.6357 42.8765 15.8521 43.2813 16.1582 cv
42.6421 16.896 li
cp
f
45.3057 16.77 mo
44.7925 16.77 44.3784 16.5269 44.2344 16.1401 cv
44.1445 15.9058 44.1265 15.7617 44.1265 15.1045 cv
44.1265 11.6655 li
44.1265 11.0625 44.1084 10.6934 44.0635 10.2793 cv
45.2969 10 li
45.3418 10.252 45.3599 10.5493 45.3599 11.1973 cv
45.3599 14.7896 li
45.3599 15.582 45.3687 15.6899 45.4404 15.8159 cv
45.4858 15.897 45.585 15.9419 45.6836 15.9419 cv
45.7285 15.9419 45.7559 15.9419 45.8188 15.9238 cv
46.0259 16.644 li
45.8188 16.7251 45.5669 16.77 45.3057 16.77 cv
cp
f
47.8345 16.77 mo
47.3213 16.77 46.9072 16.5269 46.7632 16.1401 cv
46.6729 15.9058 46.6553 15.7617 46.6553 15.1045 cv
46.6553 11.6655 li
46.6553 11.0625 46.6372 10.6934 46.5923 10.2793 cv
47.8252 10 li
47.8706 10.252 47.8887 10.5493 47.8887 11.1973 cv
47.8887 14.7896 li
47.8887 15.582 47.8975 15.6899 47.9697 15.8159 cv
48.0146 15.897 48.1133 15.9419 48.2124 15.9419 cv
48.2578 15.9419 48.2847 15.9419 48.3477 15.9238 cv
48.5547 16.644 li
48.3477 16.7251 48.0957 16.77 47.8345 16.77 cv
cp
f
0.144043 26.6621 mo
0.144043 22.1787 li
1.14355 21.9985 li
1.14355 26.6621 li
0.144043 26.6621 li
cp
0.63916 21.4316 mo
0.279297 21.4316 0 21.1343 0 20.7744 cv
0 20.4053 0.288086 20.1084 0.657227 20.1084 cv
1.0083 20.1084 1.30518 20.3965 1.30518 20.7744 cv
1.30518 21.1343 1.0083 21.4316 0.63916 21.4316 cv
cp
f
3.92432 26.7881 mo
3.36621 26.7881 2.76318 26.6079 2.17773 26.2842 cv
2.52881 25.5728 li
2.93408 25.8066 3.49219 26.0498 4.00537 26.0498 cv
4.4375 26.0498 4.74365 25.7891 4.74365 25.4106 cv
4.74365 25.0596 4.51855 24.8794 4.00537 24.7715 cv
3.45605 24.6543 li
2.77197 24.5103 2.36719 24.0425 2.36719 23.4033 cv
2.36719 22.5479 3.05127 21.9536 4.05957 21.9536 cv
4.68066 21.9536 5.17578 22.1426 5.56299 22.3496 cv
5.23877 23.0342 li
4.81543 22.8091 4.48242 22.7012 4.12256 22.7012 cv
3.69922 22.7012 3.4292 22.9351 3.4292 23.2861 cv
3.4292 23.5654 3.58252 23.709 4.0415 23.8262 cv
4.6084 23.9702 li
5.52686 24.2046 5.77002 24.7085 5.77002 25.2397 cv
5.77002 26.1582 5.02295 26.7881 3.92432 26.7881 cv
cp
f
10.9175 24.5103 mo
9.92725 24.5103 9.63037 24.7983 9.63037 25.3745 cv
9.63037 25.8066 9.86426 26.0771 10.2603 26.0771 cv
10.5757 26.0771 10.8818 25.8877 11.0796 25.5996 cv
11.0977 24.5195 li
11.0977 24.5195 10.9897 24.5103 10.9175 24.5103 cv
cp
11.9438 26.8511 mo
11.665 26.7432 11.4307 26.5269 11.3228 26.2388 cv
10.9536 26.6533 10.5576 26.7974 10.0713 26.7974 cv
9.02686 26.7974 8.55908 26.2212 8.55908 25.4287 cv
8.55908 24.3755 9.35107 23.8442 10.8096 23.8442 cv
11.1157 23.8442 li
11.1157 23.6011 li
11.1157 23.0791 11.0259 22.7998 10.4854 22.7998 cv
9.82813 22.7998 9.12598 23.3223 9.12598 23.3223 cv
8.68506 22.6108 li
9.36914 22.1787 9.93652 21.9897 10.6206 21.9897 cv
11.3315 21.9897 11.8091 22.251 12.0068 22.7461 cv
12.0879 22.9438 12.0879 23.187 12.0791 23.8623 cv
12.061 25.1675 li
12.0518 25.7798 12.106 25.978 12.457 26.2212 cv
11.9438 26.8511 li
cp
f
16.0024 26.6621 mo
16.0024 23.6372 li
16.0024 23.0161 15.8584 22.8447 15.4805 22.8447 cv
15.1924 22.8447 14.7783 23.061 14.481 23.3579 cv
14.481 26.6621 li
13.5088 26.6621 li
13.5088 23.313 li
13.5088 22.8359 13.4639 22.5566 13.3379 22.2329 cv
14.2378 21.9805 li
14.3462 22.188 14.3999 22.3857 14.3999 22.6289 cv
14.8862 22.2148 15.3096 21.9985 15.7954 21.9985 cv
16.4976 21.9985 16.9839 22.4219 16.9839 23.2593 cv
16.9839 26.6621 li
16.0024 26.6621 li
cp
f
20.4478 26.6621 mo
20.4478 22.1787 li
21.4473 21.9985 li
21.4473 26.6621 li
20.4478 26.6621 li
cp
20.9429 21.4316 mo
20.583 21.4316 20.3037 21.1343 20.3037 20.7744 cv
20.3037 20.4053 20.5918 20.1084 20.9609 20.1084 cv
21.312 20.1084 21.6089 20.3965 21.6089 20.7744 cv
21.6089 21.1343 21.312 21.4316 20.9429 21.4316 cv
cp
f
27.6582 26.6621 mo
27.6582 23.5112 li
27.6582 22.98 27.541 22.8271 27.1899 22.8271 cv
26.8569 22.8271 26.542 23.0522 26.2266 23.3491 cv
26.2266 26.6621 li
25.2813 26.6621 li
25.2813 23.5381 li
25.2813 23.0068 25.1646 22.8359 24.7861 22.8359 cv
24.5073 22.8359 24.1831 22.98 23.8501 23.2861 cv
23.8501 26.6621 li
22.8867 26.6621 li
22.8867 23.394 li
22.8867 22.8271 22.8325 22.4849 22.7246 22.2417 cv
23.625 21.9897 li
23.7148 22.1338 23.769 22.3228 23.7871 22.5747 cv
24.147 22.2056 24.5703 21.9985 24.9932 21.9985 cv
25.3984 21.9985 25.7495 22.1338 26.0825 22.665 cv
26.5239 22.2148 26.9561 21.9985 27.4419 21.9985 cv
28.1895 21.9985 28.6304 22.3857 28.6304 23.3311 cv
28.6304 26.6621 li
27.6582 26.6621 li
cp
f
31.9863 22.8271 mo
31.6265 22.8271 31.293 22.9893 31.0229 23.2949 cv
31.0229 25.564 li
31.2573 25.7979 31.5723 25.9688 31.8691 25.9688 cv
32.5356 25.9688 32.8325 25.4736 32.8325 24.3936 cv
32.8325 23.376 32.6348 22.8271 31.9863 22.8271 cv
cp
32.0854 26.752 mo
31.6982 26.752 31.3203 26.626 31.0049 26.3828 cv
31.0049 26.3828 31.0229 26.5811 31.0229 26.833 cv
31.0229 28.3545 li
30.0688 28.5977 li
30.0688 23.2861 li
30.0688 22.7188 30.042 22.4849 29.979 22.1519 cv
30.8882 21.9897 li
30.9331 22.1426 30.9512 22.2686 30.96 22.5479 cv
31.248 22.1968 31.6982 22.0078 32.1753 22.0078 cv
33.0938 22.0078 33.895 22.7012 33.895 24.2852 cv
33.895 25.7979 33.2466 26.752 32.0854 26.752 cv
cp
f
37.1885 22.9712 mo
37.0894 22.9351 37.0176 22.9082 36.9097 22.9082 cv
36.4956 22.9082 36.1445 23.2139 36.0542 23.583 cv
36.0542 26.6621 li
35.064 26.6621 li
35.064 23.4482 li
35.064 22.8721 35.001 22.5029 34.9019 22.2236 cv
35.811 21.9897 li
35.9194 22.1968 35.9824 22.458 35.9824 22.71 cv
36.3423 22.2148 36.7026 21.9805 37.1436 21.9805 cv
37.2876 21.9805 37.3774 21.9985 37.4946 22.0527 cv
37.1885 22.9712 li
cp
f
38.124 26.6621 mo
38.124 22.1787 li
39.1235 21.9985 li
39.1235 26.6621 li
38.124 26.6621 li
cp
38.6191 21.4316 mo
38.2593 21.4316 37.98 21.1343 37.98 20.7744 cv
37.98 20.4053 38.2681 20.1084 38.6372 20.1084 cv
38.9883 20.1084 39.2852 20.3965 39.2852 20.7744 cv
39.2852 21.1343 38.9883 21.4316 38.6191 21.4316 cv
cp
f
43.0566 26.6621 mo
43.0566 23.6372 li
43.0566 23.0161 42.9126 22.8447 42.5347 22.8447 cv
42.2466 22.8447 41.8325 23.061 41.5352 23.3579 cv
41.5352 26.6621 li
40.563 26.6621 li
40.563 23.313 li
40.563 22.8359 40.5181 22.5566 40.3921 22.2329 cv
41.292 21.9805 li
41.4004 22.188 41.4541 22.3857 41.4541 22.6289 cv
41.9404 22.2148 42.3633 21.9985 42.8496 21.9985 cv
43.5518 21.9985 44.0381 22.4219 44.0381 23.2593 cv
44.0381 26.6621 li
43.0566 26.6621 li
cp
f
46.6655 26.7793 mo
45.7832 26.7793 45.4771 26.2568 45.4771 25.6089 cv
45.4771 22.791 li
44.9727 22.791 li
44.9727 22.1069 li
45.4771 22.1069 li
45.4771 21.7197 45.4771 21.3237 45.522 20.9814 cv
46.5396 20.7383 li
46.4941 21.1074 46.4585 21.6567 46.4585 22.1069 cv
47.5479 22.1069 li
47.2866 22.791 li
46.4492 22.791 li
46.4492 25.3477 li
46.4492 25.915 46.5752 26.0771 47.0073 26.0771 cv
47.1426 26.0771 47.2598 26.0498 47.4307 25.9868 cv
47.5566 26.5811 li
47.2598 26.7163 46.9717 26.7793 46.6655 26.7793 cv
cp
f
52.1646 22.7461 mo
51.5342 22.7461 51.2642 23.2231 51.2642 24.3306 cv
51.2642 25.6538 51.5972 26.041 52.1914 26.041 cv
52.7769 26.041 53.1006 25.564 53.1006 24.4204 cv
53.1006 23.1328 52.7407 22.7461 52.1646 22.7461 cv
cp
52.1733 26.7793 mo
50.9399 26.7793 50.166 25.8521 50.166 24.3936 cv
50.166 22.9351 50.9492 21.9985 52.1553 21.9985 cv
53.4517 21.9985 54.1899 22.9619 54.1899 24.4023 cv
54.1899 25.8701 53.4067 26.7793 52.1733 26.7793 cv
cp
f
57.3936 20.9365 mo
57.1685 20.8281 57.0337 20.7744 56.8442 20.7744 cv
56.5024 20.7744 56.2861 21.0083 56.2861 21.4136 cv
56.2861 22.1069 li
57.4746 22.1069 li
57.2227 22.791 li
56.2954 22.791 li
56.2954 26.6621 li
55.314 26.6621 li
55.314 22.791 li
54.8906 22.791 li
54.8906 22.1069 li
55.332 22.1069 li
55.332 22.1069 55.3052 21.8545 55.3052 21.4316 cv
55.3052 20.4863 55.8813 20.0449 56.6914 20.0449 cv
57.0786 20.0449 57.4023 20.126 57.7178 20.3062 cv
57.3936 20.9365 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (Brigden, Chantal) ()%%Title: (T058_FTPH_RL2_cmyk.eps)%%CreationDate: 4/6/09 4:58 PM%AI9_DataStream%Gb"-6M0`FIOX<+BJ9NENc*eB$b^GUXG*ARAabD'EPhBYqFCh[Q,%4sH!^KoeoJ\#oLcjj"*ItLbNSX2cC_B-8<\BMsOg4)?3tKW?%c]4%3Sj,47gBWYKG&c-!KsuLCo?NmgT,`?k\t$2_]070LF)..eD)&3$G.X_S[tnb-<,^Oc*hG$g:KM11O4NL;e`GoLq8rI/nq4p<%pP3C>cOQSV:C\1:=!oBYh^on>*%kUdgq!H!r+?!(A@6p$5!?P^e6PEqlb7X`I=-)-q=X!YebXnen:ACS)t*6WQ`[=>/,^FF:X>=S%f12l3Xj>PFVl/qB9DTc\_uG1u]"2YBBG7("mX=g$pZ)'tYV>X_GP43WMpL+LVsVh!5;_i;f'gdpG4SXJL<k'\C(5IomC0"cq9VY/%E47!JRo1d5n?WWE7/PDEptn/_rc7]0q!r0JG]eC_p@Z%"jB&D2Mj)&Z(%6oPDE#"P.q\ELC"L]\]B\ddMmY,(`oM>rYAk0.AhhAp%YT&e2ps-*`X&m?BmlkEs[6-Xb3kp%CPWq38@^#4'Y9"ecGJelGSX&+5rUTeq[Jo4>nJ-"js3lk/I<L(H3r*1BqKM[0%V["!Vi#bX%#%&CRT<GC9l(+GOe&jmW'P$W0UP+9;moSg`J1iNUB4%2oiS!'^G.34m(YS3\qWZb#UqEqORRM&"C'u8pI:BmR_(AGJL8Nh+0-,^@%_4sI]?`]<\+.mu.0Y)/Rlpd)ea6Vc\&QP)bOhZ.!bNMaP5F?Oss4,Zb9GZ$sI.+D8+(KIYH]/!>HI4/@m-qM.cdKX'Mp`sETM`\]%_o&Om%i2mV[.n2)\&F!gYDCh*qp0Wc4!ja8<r./]:SHXo:[dOHn**d>n`g$:I2h'9M-?`D^SO?#;PI2@mI+h_[8NJtWD.70dC3nf%<jbgUqA9*)XnMIee_V?qF)R+'g"W8[qtp$MrdIK3mJVJ0I"*6q_2L*UbQfBP;u3A?metEOqO:[9Rcn[)7;L>:i\OaMrCq-B7J&O@%>;:]td[KB<qMeNDIoB.Y'7-MjdGM<KqFOLe'9*<7@XMoZl_;.nc2KoCFFRud^bN&!/CEAM-<?/[A+#^'7]2[?*bc#[8$-HQoJcGr%*Q4uJ)0Usf;CbqCmP(ksn'_'rDu,GoL]+-c0lqrnhpdP77t5"b5pa;s`hsE6#&*-k5ItKp+0\MBJ2bFT<fYk^bV:c0Mk5(+cpIc-%2RGNA9NiHb)lpuVZp+>U>(OD%ID?0'97KkZ>2@IEV//:V^`5fDFXmnOXXLU)bX!\N"[*[5VnbB+#HVE?i/M?O4/-N.go6R!No';S%I#e4\F.>p#1\Mfu5nEkj+6[o.mJ+uP*BgOBa\k51Zk)G&\f^-s^-0i)T(HHX(!FKYd#8[&o^)Yu3`hlUNf/AV9kt4<7mFg)Xo.?%%4rJh/^C]o3n.YihgkcW)i@"WJ)8?\HnR!a?]bDL!aFEsQj-/FLrd4,7^CNR!hp.dJ%fmPsikLO<_XGB<r+GkUi9.IkoJcIY^[#h5%g",?'?AR"jL\K!jZG/X%+isY3I^m.R:WK*p5>6dFmIL2g*W=;qr6,]9h_+6hoFq.^n'O]#gKg*edcWG"rJu9!T/7laa6*kXR."O$%qN&X7*2lb.C+lf>>m#PrBCbY&C@jj!_H^d13a;Np?YG1]V7+G=pE,h`b\!7<0K3aim4s.Q4T4(]SNFQfo)glbpR!!"5+NR?;L?Vm%Z*3K2/F^3qMu$ARU'88"@umiRq)?R=7*KnJ:=mC")mi!TI<\;42lt-9DZ8m8rhth+<piTWT6%tRr+m']Vi]/qY2GeOQf;cPq4mY-%E0^FYBFU'O+M9'Y<r66n?QZI0"F\d#r_`ZN4s_'Ejr+IK#lQF>qi3i^Nu&kcG8mnTmao7!TTRrP1OTek7Sf6<B]bT3=a84<lnqK'%!=o=.ceHZJmq=^f?YfTom,^]Vr9'dQbR(MX7r;qqdkRE2)!HT,=*ZZ`J*5D\?&,]HS+t4@kt`5&SZtk1?p_cU6c.Po5LE5?B0Qa*%4Z!]=ds:j";5djs_"_a8B_aj`Q76Zc>NJQTRrYCrBCp&p6g^QMV=lX))ilT#0>5`VVt7O85P.b;h!Cm3&95G)r,U^0m:U"uZB+TN%4^mO$&%*P*1jjrNJY$9I_7>nNm13G;rR851^\j2gM=N7fQD%SkHfIhNJhnhliBL>QZd=5A,4It9K"u)T`"i0N#Mp7Y?WL:liVoUG%%JUi$A`$jg*?Hd=a*VLbR(Mq(8uK'VVM,=fFl'"%(hUY7o$LLMToWX+3rU2g/7<=fO5]dNBQjjM6.\XhVP!0\O+/8F&3&G?[aZ<r%3f?Es`ouW#^k_naInIL>VB]JbSYa1^f@3<2__%hE;d-^bGLQ%%HqPn/D6RMr?Zk.J]F6`eian'9V3Xh<%ktuLk%s7B8fi&#11#[;%FM')NS"RX_p/R9eo?l5'l/h]lhYAVR;D(sZJ$_C(3Id(8qS2iiVYa_-^];3cJ+NJ]COLS"#(`>kq31BoUQb$;dDtSEl\eQb^-1A!%kPim)Zdn'_iRNk*K9Oj=dH.tJJ`52a^<rSYa0/Nom2d<U]R+FD?`hH2o6g)IZbNZ/=7+04)#j4'qY4guqMlUMai:Sl4BPrt^0#c*%IX]`.2uT[N;nrg<pAZ+B4Q8#aI;oHbDiZ.Q2Fk?n^A=`HV7"$_K_F@hF74I2-RZs\f7t.qNgFehb^A8;_InA=@/D=,ldbKQr`+H^%!Ejl$qX".@q!rO"`Y%:ZiVMhaH*VborT2Spo_#m\>^^t54rp>VTc]i=>+M0jN$d4$LM',8s#=7jgt"?"e$mA18*u!!Gok=WIX49q%s2F"7LDMJ4ma[5DDYa&:aS=iclu9XGGjggJ:SZgec_`6"Yhj*lVD6(FlaqN<FZbdNiGFk?Z1H9(X7,mfZ1%+J`VoMn:Z(PEn(>VX%Mk.]>r29#<0>D<&phKt[[g7o<(4Z>;/<6\)QTKD4c"/iS72,1XDHr\AOBbFrOFs+9`OHj0nu[PHIL^PHg/JKXnjT%sF)"ULM5_>l%2)`'(d?iW@WTFQie_LdaTOs4#p2MgU5`NB!>.</=fr#>'<ei$i>*ga^l$$VHNk5_3m?9lo&%c?U)0]6KDR#n0b6_:_<(J.P_lsIu%^ZY,4U_gZ!MqdpX=b=%=R-;(2nL:l,_erDhr'l1EKVVnBN@rtpdr#Qs8I]0d^Y9</@S.%-OBj!h%N@l(.9#;e4"PtGrX?k`s0TDW%A"9i/6:9e#7&J&3>PmAift>j;Fp#b?P[XdB`]Dh7NFcUc`Fb'o>h$0:?*]2o<n>9l4#:aN6r;e5>?QLd,qK1i1Mn)]jG$@TH4:$'%3T&Dq4f_0:?ukJSQtn3[?Cs09k])P"->G*IKI`XLCH-Cb05ssoP<&EH6?Ec4c4*'`q;=6UVhL.oZu'SooFOK/JHrC:hNi.>o]r(2%[Z')j->HcM!dh1,#B!`O^K'E#W!f;\^0npt!+tlQ?il]c,I41daVHbQ*5dKd'Wh@f!k7[2\+=HH11.IS+#c[\]>j"4\hK-C^)Khl%K]V^&@6TBD_[%pHF0i<;-&)^hp/CSXD=b!PDkDeJIOdPIn_<58O5Di+)stY@6f&8W<P09DUB8rS%rE:BYh@9G><MHGgZOESGQ,*N%([o#KpsX`"J$F+B`/0=en4"USRE,eT/2#;60L_6AnntG<(6o"*Q>6o@+\/RW_[N>j&+[RR3tsIN?hI(J:;]1:VoE5AP?i@Dfk0M'%271rUViLPb$cEshCIHP=qGaCOe#kX6h_j88%,R"[WO8IYPY@6=Q>M`BXDb]NmVR,GNdUU?rL$WpD'PV:R.)'`VG#r@Vf=(XZM9+-%VNIO.E<J[6]A(p*!H.8r5`S6(^2tL%?lcu<r`(B-@L%SB=D5[\6?$?fMm91>5n\2M#QV6Oh6sgMg(6E,egA7AN:!Dtli:.YkKRfB%at_!IObe/a*0UV7M7_/)M[iXM)/TgP/Gh''c_M,KBB$P$!\W.u-e01*5D.F?:)\_g\TEG/P8S#^W"'idihYJ!?!5A]7^Eq,'?)^P%$=.ATSe>DjNfBJDI'stq3>L%D_s#1$&_C,$\6=/^)!UF(4!D9ANf6a8V]rT6:"lM$/pqW^!8;jc"(,lTc."T0INmC/nXdP(h2r\?%`3ehL@f_M[a[o^#)\nSG2X+m7OIcd]!`[T`4Af31h^8ZG:eU%Yn21;V^ahqK[NXk6S5!pH9A7nL(j.Qc1CtXmP21:Ad*ap@W-/&:%mVNNtmq)FXQrY,dD*hGAUhAK0!uO9BR0">Sg>Y#@#(kEHB*-@YY/&n*-6DTt@PYRtna1LlHff"T/K[D[9'ooE+eu:ii6aZ6QfAft%Xa[hP9[Md_(BtR%)Fi+`MFf$H%]0QVn*"MpeSY@+)7<1CmS'<k?]kkV8Z-Y<QD?=##q/U^e':o4\)m:[_D66%FTUnCQp=/_m@B8=%[=nWM:"r/[R#kekU!pg"SB.<(`n<5p=3)l5eZ])Hm/jP!Q8Spl(3%];4+]2/8s1%t:iYMgEoXT1E6r*-j>]qc3eI``1u"_UdCQc*%TZHX4X+i9[[];$7IXRM/&rj[,\s+e6Q+')B"#,=@/U+)MG2?_'MeTA3)*tF.@0Qd<$>Uq@j[S!JT1,W3EN]I`14oTiRdJJfBO+h%%:uo.+B0C[iLas6*i22%6Q<i[Mj2T/-%H)b*m^blm`ciR]fT$jb?N]`Raedd=E]t6>2@:+*U`5.PBICoFnupmr&W0#4V;'L0#-DIK%4?R5@8Ia/ZC:ahX![An)4*<)@0X,k#r\cJrR(8N`6rq\p;'L#P<59e+2ZcA+M0)W4fSD\,!1V&-0t/ks'-ZE$)gWeJg*O@ubWpaC%TUikpi^VZLG#[cdHL8N4$jQ37[_:;_]!cRnKYno,-DG"*=<gim.lKMN^^rRGgN)4kdJ-FD]/eWe1:7/<mZ.qM@aZcDG:I/YR=PDS%3Ggk67b`)a.a)A_?3fD!"p9*,gYV7@?!B9*OAeI[`bVo[?)[?P`t9/?:l9)gT_Mb2g]l+aOj;-%3WbN+maGY!CZ@t"FE3N^#d@6&%op]e;QhSmEoJuum1Dk[ufoCA!f!UJ>5u&*K9O_kEENNsoZTM5n`'Qm)0MG?[3oS,f(:O<\I%Xg],B+dS6Wm*0D9ME4/>b37+?Ha/%2]TY2gEs29YhA=BSBP@@O(LKG3a1,N%MUq;CKY2`C(d`pVpVgUf\2diPGVk*AUW4Teq(q**&G\V3c[Wg,)."W<)##YOXGIY&Ms\8%K4_>eP>OOE`BrX(^gaqbk%s_mF>:nEg'*e=K;P-r$>MMB]7tD30h,U#Cb_<r!?l*Wo+1[))qV]"#AqBMc':lS%>$eJ6a:B-bMm&F%T=@!&8UP)H08XFk.TR*ZQuGre>^WVnJJ_T9g,dZhSuO'o'MKqD=!4Ur[>!)o5guD3@eb!,>=D6gVAfBZD<:^r0Q,h^UNFlD8hYC;%0$XL=HK^rVD\eh6)Ejr17=7aom1:^3Pnb7$A&YJL?)lUEUT4Y6K98=72/.+5YXr@TmkP7^+:PSG1]RMU0l92EUa<+n!(IeL%-`(5%`c&e5MLonL5qe@#U+*@X9s5tRRc7sH!P%ITN<g/8D?G&RED)_W;tVP@Bkp)e%b_PJFQ!%(9e;0L*Yf*g<907q`/>OU\La^=?u:9J%GKa#j[:sTq@8fZ>\M[d!equbk"s6<"]qe>2g).:Fk0.@$^#g4:(eE/m"A3bkK;QLe^?lll3g%XCcB@,474WR8dp@gsaZ\O'(>/iA%mq9lQC(2Xe@uqaf9&rSt=DT&F'2?:Lg6-:VHX5Y%6ADSYM@9T.3Km,J1DPI.:m*9<C>4uLXURQ.';=G8Fm@,&3iHoM,sb5t=h$a@%m2nS@a#9$i;YQKYEE3QOaXP@ad%kP>MU#>;)FP-17*48S_$M[ndeQt1kbMdHE8NM7a_=l[&09,r3;!F`%3:84[]q(J[]$+%adg6F%U9A_prI3d=,a4s>)ab)kM+*LDD;.KhL%DQsM7+.d@hc0FGaAkqaq5YMB=i"k?%E6%YZGQE:Ln1=Z>ca@_o8>Y][;4G]"euiDtmdQ%1rN5h#0L[B[oL(-F<0C^bGM>>m#?#eN27p[=7%rq+V&7(A)g>e=sAhReD)_u!=Usp2:J]1&"0L!YSUD^BL%huqsR4?Q*Kl_[4b#:%TGn`iU)(D*>Lu8JHj)dk2/AT6P#gLmqXV;XPr5ZdP*ldV&7Gem:"X-r!X<GPjt!(g6A,G.Uhbieb+^Aq`]_7.ll_/U**?8f@&'t4%eW\(ZSSi9`TV,k*9A,199'hFhE1>?sB_<PpT8OH3Td^<aD4AQ"KRHuWWI'=6Q6sQ'RKY]G&WlgoU9)EJ-JFbj/','uK89E)h2aU!%@uQhD@%l(?,J9`[(.p"_c5INb6j2gQm!P1NO98'-M7#"]G.F\/-Eg.=C>-*UgJ:EK=k$Nm.8XV^(9o?NTc!_dq4p8\bMnRn@)GS?%co'B"D,\n"Mb%j<3h4cQAr3YpD.[ASgf5I5akSB+0Xc)u[bW]=PAHKB9C;=h!_[_g[/5IJX[]$1gAkoFFqA`;I<Tu:GrXCKKnFV@%QAp#5;`_MB--Me,2I78e\(L7p3m$idrN]9uI':u,@4mms*A^aD7;X8*X<sUV2BgjQXjP*Vj\5'n^+ubPQhK<p)6e@hP-Cui>S^&4%c=5NU0+PTQZKo`I>s,FURHuS-D;8SUa^e]aEZ:+5OKFo8@6fI%c0Jd)[WH9!T8Lp@i]:Q;3\qp`jmmPui:(-%HZrgl<Xm23UD>Ed%Dft)ad(Q,m#B8&jB@*6+]HXGaQ$FlH>\i:Z_mDk/5h?Pjbgi$5-.W4EeA/^:Yuhq.AZ"EeAe8[KKT?@ICjY"&%u&C>'&t+-='B#J%hbs\anJ1)Bpju5T&d(6T.er<e-`Y'iEMp*J,C*tZkdRg>K3Kg]E6#%JDt(4"`S7N'd`&:_6S8X(D;4.ua#,\.?BcHS,@r'9=n"^9%rgCF+NHDAhJ.BsMXKmZtY$FVj>u9T&Tt=U$F#d5Tj08V_g-SEmkQOt\#V>^G&fHZF&n!LHA;I8>[WEH!JYRH!bAas1WEO+%\[,"l%$_[lc<NLpLY7S07C@Wr7^CX=P0rq]^h]FEe=u&MV,h:u>(U9Zr+:4Zb409f%\#cd+Bk-N?m`6l%.(=?YlRF,bP1iqii-#g/GjdGa%"1l6<Uf<S4b*j0@behTXrn1D5PtT@Jh):G%dFL,t9"(JXrfI#saM*Re%.BI&HEpXD:1+T<^M69:J.FItCput0M@!-l\cA9BH1BmV%d3Oru)]u;o@CU/aK%^5ehLlOW[HT_K.J6lH.!#hT,3"]R4;L/P/U<q&;D2pBlidP^*B7(%'GU=1NIr[:\(Wa)iPqd&XSSt8%/)@N%>T5<D-2=hTVS:A#Wn!qDlj&&e!Sq^E`.mP.*N0*5Sp6mH4W]"$)6a)IKp/<5<H6Zc+b9l=H'B3^njIS!p,7i42V@Gdk8SmNK4_Eg%13t)bhheMD'/>%4VD'C$%Qh*EaN;UsN4INXfFMMMdE<7UNWeWI`&:LQ9B_>6ak"<C<.?:h(h"X&?^=G<A2#aPjJsu3$jnA'#Up!A%_SA[p"hfA@Ok.e]aW((Uq5a/iFq2NWG2P\`%g0EY\Lkq:60Ad]>fT4e#RNI9(2I,T\JY8cO^$'-l,9(k<ha-[>7-N:rNP?X@0^:E%DO>6fhYC$1bU-j^84MTQgVm'!U*=JT?&qfq@T/Y;"ACm^cI,m1\fF?QE8)M5;FBG:-4)\+qGlJ3M.7GA[ghUD)#(U!?O[-pm6345%-Y>C7Zm12cmbULQ&=M"L.S2Ytd(ukQ@IQb9ap.JaLs*Q&?3Xeg-E3kj"ZISI\_[@'2\!hlP1ci")VPtC\sX#Gc;RTpXdBtWKhGsE%E>&a4+)^Y!P3)$qCpcI,FR,r1_,Q:<6R4LrmEtVMjj7uq)Dl/tMUuPdk)q&:8DB8jkQ?QueHbB.KfEG^3!9@17i5@qPTBt)0a4Y"%O4lHZAZmf!D._r[$Quhh;EsQF8Ubu?TLriMe4Y`2VDN<T:nZZ'\ETd*^Su,fAXa.J&ZTdf`+dF>_%\lUaTUDO0?FG#m"EBj1:msk%PL)nR6Rs5AK]R=8EfF=X+A<Te1@Bl!NSYg;-R:N%.ZC]!BRp%hFtgmUdd*1^O,P%ak=^U<@VXHP+O_V2@SIB,_fZ+a,0C<"+";$1%oKpD4d`;'#9!/j.;FU/Y'T"io6[e:>A_X]%VC9V*&HRUV<0:(h4.2UM!tl1JCQEPS%J\kk-gnO=9KaO*d2"90g>o@e`WQ`?ZHa^A%!aq&^Rts<9L(9[!L(c#B!QBgg<0ZYPE.d-a9[npWC*piuFR2FQkZ2PpH#L*C"O0pTBjEQOL+UBG)$^=G>;R\%a0C_N;PWe.3PLI.%WbQ+ra?sqJVMZm4.Io%Uh@+!Vm4M&/ifbUh;?Cut+c1oY5a(E;+sr+'1CopsD$g8nM/3fo2\Z?U97j*,DG.$iEMM+o;t/oX-nYlK%*g4*.e1`1nlY0Ya<[>DLS?ug.qGI_.eg!G2N-e$R%S_0\Kc`T(\/9P!.^:[MGt=r$(:@$m6a:qKPt@cc*4];nO!ssY$Wo":A]c$f%##E[L([D9Aj+:5ajY%Ia$U"PKM<6,.SS!RKT!%9<>(P<6.(%64&4-`.'tV3l&sUcWbK<:%d+DRbK1,&X,L4$._<U\QpK8A6Q&'"7%"gQ,;6/,kb>+C@bNI\7>!S7r$'jXI46Ybfl",geTgT!3[7?%BC3JX_0Ob$e/$?ia-mBqJ'k_/#^0Oft[:#=k*``*TQjXH9D-!=nT%;%K?ijCRfrN="$8QH$TVr`&ED<q6<4&Dj_3$'uTooad@drJsKK)Zo7];/MPkn96.XD=dpuH8AP1G"SMq.*Q+B6oK&kl+p$F,Q'!6%30->ORNr#$+lpI6RO-r+bEj2I/2hA9o!,U9;+E<C![XE)p1*Zk+ATnpDTS"He4JfChK]!hI\7MaY%E@g@`b)L?]J6HSQL"8,Rk+p%@5GIH#$clfgp(WD,CtRY>d2L4*KOEfXQMoWM'FQkk`#A-a?N/:1*?O*MqYTup0`/MWm;q.-;,n8RkF;UgeM]M1:)R_FLJ`k1lqEk%C`6"_d=*t(Mu8W-qi/E".;1R)p+!H,/c;8S6@aoET*b\09+W>dcQ/n9+d<Z#Had5V-FsmDCrB"en-)A!.s\W;nmY3G[\W]pl-=,D%#*I\+:mrR!cZ@Ya>@,<04$WAa]EW^Ii\5&l>DkK>i=+c:gGYc#nAB)kmJ;^'JJ`at1:`"2>36ZL0F$\e']OW_N'"QN4RPW+!D5X5%\a>'7Z>>o+6De<E>@Co)m!Se-oJ-m,b]!WS$<Wjf1br<fL3/q((1NJDg[[tR'E_pT:(3@E%L1'WC@NDs1E9l?W#Ns+E/B74VH4u;%YW\U-,fSJIc69laR?4L.YN?X?,%7$$XK7=keR>msGP)jXS&nCt8e/D+5WAsub!hfPj=k!Pc![qOm$a#Z/Lb's-L?ohgIPNE/`M0C%L*I&Kdrgds4]Z^O)p.g=_iq'kP#5RXOFjDS,ZbqI<KkS*A>W$pQ@C34I6h$`]CN(jk_XKILgOm^JSmG(Z"2?).0p?V>%k\1cA@c0%e0S>hl;Fod_&VAX"ISK2-DPU[W/,.Q/R29=Q]r8&CXl7O`-$pFU7-$j_Hl+R7KPMo$an.pJON!.4FmRXUZ"l0?puZkF$N$,lO1-%%JZ+qNR/ei"F#rKgWfOTI79*JBV[A?;Vf+63dQ1`uTFlZCl_aKLW"0@R2-NfgX^4]NMJPH]EflI5Y+au^LZ?o:VhVa4:h)GPNnYmB%V?Ge/eHQ)IURK5409T8.psF2/"^>COHt%46&[;FZSa[NF&8jM]'PSG$]SY2]n'(4LWU-X&p2CQJrhsK,q_9US.N+b27gV+!-Xe^*%o7;_b;BjiW".G:O62&0O1p]IV)N>:bC1DEncms)s_">)!jR$<Lkm(Rj'T-59nB2k3c.ech%gF.H70XRYru`?;!$6>=jR?("'kQr6%G%O-'-#]^Kd85DLJ=8C4!Fj\ApA/g-WG33L#)Q73A(L:D5_4e2hlYjE'Gd2r:gWd%>#gZKh6u?=F8eWL:j0"(<0M'eL<ERu`SqJE%<)9925WL,nFW(TP1I^Yn/mF<MiT+=LT8[J]"J)@T:^U2@bU[.(-3bL(g6,tNPl+!':`(U<;fW6pBng*bJN6kF+Iou5hIb=9i7)fP%g[V!hBh`djZC+h_#12J1=[t>aNit`l/VRNc5(fN%dH#E[4lK.']Z;f@F9\_CM8GN5UhEBO0%i@hL1XLE:p;P2Y*d.9#pLUg+"V4N%0&dVnCYH1u)LUHh&o=$GQUm48>UUe#$G%@,<Z3BQ=@ePnMX=e7)[bHW7\nFSL8]ZRWTW2U;_G`9F&Y>M*p+f/M'Xmo(,9Pi74b""%[FYE7'\=qumV.>Q;[B1+W\iH.:`;r*O:mR+`0X,oBLVG,C04'bV2L4m8=@2'5igL8V`V5Kdoi',,Z`CjTQb5[RNp!<q.?'<e]:CB%A%0c&"R?c$$DRYX7*@K_M&M1IeON,l-^82E/fC:@3#eF[H@tHOO<tDsE-o"AP]N]^cg!qmS9[<J4n)X],"]koWISd8:hj3/S_o$s%4#_'/m)I>p'Co)+6%b*%H@73--#&HBP?:eM&Fl+h^S>b*X[NM4Cu5_DURg72TM8N<lA4J6(SLmZaCE.H`Oj3;3q"8^l.$biciJ\j%dOYS)L.MP_aS7>PVh%P^X3dVXJrpJ,&p*7h7TLq"UZ.iU(fa*Nl[.!O2@bjZ+G[q:]1&k3g1$s+;4KRsaIq(.[Lb>a>o(I7n2[kP%A"/(T]VaDg0hfQ<-uhk^@0Q'K@RCcV7u7Vp6d?Bj=sV.dM-"#f6<g+fp5-XY[5aPQ?9S<'La>J^]NCEXL$dTcfZj<sG$`CZ1*3A(%Lq;u\!5p"d0ZG*LiF:7aU=K$.@H+Qc]ckOP#23VXp5d#uD_p:VPYVpu`f*J;$?b9$O40LlCemU:1@8:l/qYYV]k/R3S^1'kVCBQW%FQH>O"@-C(.<MI3h<)"c)*nrTQ<I1PJ5!YnM=unr5.g9ToU%#N9<m@'m[r<;gHe3HHfP6Q82pp/$qjC9OP0+\,YD<K6>BFp59a/@%'!!daG^4G<7c[Vq2P;FP[0oH8H3ka'Y_3+Ac%,qsD?4WsT^n.S0f7s9)jCG>.^g#"gRJ8OpXTHq"+O8`-TPHG*\M!a:oXNkYl;oU%%ic;&9aG!VH9WA?;?#g-H#m;]9BW^^o3-gaJ_,50[A,Jj@htU"$t#S0^5c@j]EC-UPQC\\0X:BOfX)kMGR%h]Lmted%8:/fDk5a,%I]t4LSrosn%B<6EjDkqmO<*m5.<kl%+I"reSB1W8)hnGJl"G.PR!<JKVJl^+F1*g/[ki@;*!fXj(K2.p"q4CM@:ZAN4)K=>P(Rr^%'6AKfg<*$P&B1<AYmi]sY[nb`b%D/[9MEE(aG6L7CF,l?2m.HB5<%M@(@SRk1ikP0_E54dXbM0qZk#_2:-rl^L1$5/&A/4Eb_d8s%La9=DbJr5gq`E-LVGn2\]'`_`D:6-J#IC97(2l3IRo.*2eU^g9,RK&i?E;XsLr^JZTIPnQ7m!KQRc^=NmBIZCeWM>?b6IL:E=C#r%Gi+sm%SJsuHm5^no"#(.oG*LDWo9D?,",jd;'8]t!-HmO&f;hnAR$PfE+7$]>+Y8Qn!^8CJ:cFl$5*-Ti*P66#9ct.6gct1)ee'>%af_Ds*Y9oSgC1H#jJpj=!MhZ0BB-4*=mQo%HZ?^#%@GtO)n+:-GXcX4.^g`rfLc!oVf:(^@X8Z^7o=Sf(H2Surh/A2k"+F4`uFpR%K<9M-\J7eqft5VMH+)?8i.Ebo>uu,;UO'nTP8h<t:52#EXZnN4N>ZblnN`6eV*4+N)Ee=U3P#[8>-r-!Sg@YtnJ4$L&Wenl.5ru^%D!74KqbI>GC!d'D<==r/Cp\%3g2B;m-in++]jF>jDd^;g:\6\7C/!Pf3),AEj$Y/N%n+$]GbXD1EpVn4'!g0S/!?30eW:Us*iNbW%,rql[fqV0*SkP-,f$1/u$=n7@\=]<]eVP0K!L#IMX"=?P>nRnM&`]P7BKl]5SQ6H\hP)'fL@>ABD:%BVJJHHo6&`=m"TTZH_IXkM%?%<L)do\/s5`MB,c^P<87>*!r9<qo\6[;EYBUEAs^#!1t#FV8D-RhPjJ1`Z.WOUS?cE^&YIAFAYh/<h[VLaMA=!B<I/Kcb#Sb1Qj%<'oMdkmGsP2,Y&h'"pgeKO6DY>k.r<*48GT'I;(9F<"0h.OLu2"Vh*8&Hrn--((3QhM^;fk8C7S";Y.1J@8#'if!LkSGXq7E<)$t%N(AIE%0kdOJ0ldcj$YQ`&,JjN5fOu.OO%Yp2!Mhd)=3.N!/^-?Z4,E$8M@'e'W!X[Re@Xek@t<`e?N=T#hMJOa:<a8LEjLC"'_Lc%)PBdT,5!/0?oJ+$81/PAPY@k=)Z8A&Pp`QtU9"5fnhO=hlDsO/FaCOGC*jV)n=gs2K_-uqZml,H6m`MmBM^Tg`mbK/dg0ccY*16N%[If?f.HnQ/3PJbVAks[#M,gC+8_ITHf"EWi.VgAr'O[RP(:4r_X?hncKK]bC7REb`$pu$H$=mTb?>IZ^btG>#8[6f:dA9kgE.`,Q%4B)IU)JD_IO'G:iN"RX6)M(=:5;>XGT2Jn@1C+8GKRd$s?r&e`Z"!T=IORN!Ql@_OE:l+0CUksnM<Uh9:hH,![%0j)%o(W!4BRRq%[T2XV9(k)Qpu\LX::E\(E*Ks*%?o#:CjU<qTj2?]5abHUKC"5FD5Z/>UIs=N#3Rd=.Z[C26ltVt:hQ1^HAK(6W_r<CMZMQ)*#GSq%f3L.1n4A[pG#DirVjsOjk>hCnqlcF=*iT8FFD_A]k0dc?)^.=6KI=I1RahDQYrU#'4]?6`1eK\qfHbd2c/?P<RS%eB8U^\cc\pEE%@@'e`LqIEd+63d%Yd\2.:r"WX:-bgUpr!am\Kh@lku*PASFrs-!.7,A-O/6J0I)/2(.M`g9?q]gYZ;8^[3.pjglZqL["o8J!fFq8%P7<>TDNep0Dm(1",qNBi;Bi%NbNK7AM8TK"M\\uOph(Jp6.=,bS=58.,2*&j>lYCHM']rsJ=OYE[t2`uI2t4N_QB<I*3=Hh&uqKW%Pk3B)Cauh\5PS-`*iSYfN#4u@\uJ9?opY)TaofJAQ+\hQlOGt/^%[26.JQ;`GCgQZ(@*d)<q:]E&)noXDG\Xq?iJm'$e^@,UHK"g%A.1p6$u.:qf<bV/[%bqFOR%__WZSRf_=uY!6o&(LS!7J_d2s"aF_,;c+U;%J/-^d;9P\d-AOg$3SX>Kd7K'g!).o=>8?"8Uf%4GJ%Qa7X6KFkubH+dHRV\]FMmo*_o3gp'_@(W`,j`Xcb97bCu&Qcdr!m\L=9kPkD7;$)IY3.=//f-8?C0[+G,lf5qL`+Qu;6Of#VF/W<%j=`52p5@D9Eks9i\P^)u,8IHm^l(/UMKG\JZiN?&YZ/W:r7i.>KIoe&Tf-L/3jl%NPi(d0MM6&a<A2]L-)CnrjT`.PCcT7kZGC(S%P1<EiR'YV<OE#TFq@OSLm]r\:8N[uL8<U?F20CHI<?L\Afe3$qG;3;ZnMT/V5uH$6<FR6J4\<1cm@Ze4V1+t!Em_fU%B>TH,\i\]%8-(?\pL2)c@r!MVV&Z3E3I&'(,IFB\,p\Rr?&bt,,jEHCW6R\tE7GRi*'OO:2.]=a%RWWI[#B;AlDE`[7Wdd!4-ESekfhU*.4\u9%DHc:il;AKT0FL4](mlSlN_>BKbr)BQ$$)P%Sho(m![(Q,n=$L"]GBLlr#QKeHrmR%['$EChhjI4YXlM"H6EJ[Se3V@2qg\>:t3o9%faR^kJ3B3-):]3<e/:TU.[&0U/m-@?FIJ+TWD\!-,X<579-\<qnJi,dBHe'5NQ--V@R;rQ]q%e6_CB!%n4W"0:]eh()a&AqN!aPP%Po^l;"\`\#]n90&E6[Q!4]6ok_NJcJFUk5dF6PS';LPQWJoWl<+A0d)g!V(dWbE=gCk`L'\4clOIpKH6:+IqRE&'`X+Wb2Y)NYUp%V1Y`#,8Yg[%`G._XTU37VF4$c".Gn`$4\8.T*g0&`M]IETHI7dCV(],/Jcjk&W.CR3Onp+B+B53:oOi@g10=m9sU),0sPD_*N^:D%:s;;=ePo+qa@?6*9iC.LrLM[^Z^fo+jg:%MSo=uW6gO)P-nL(K-,j@P=WFM@WJ&6X+ttYBV*lqJ1idYn6%jVP#b^04<W1RlHP8fB%'U>D*>c^@oEfb;*7I)8>Y/b'WA:['!+_c5$JVqD%=@gGY#;Al]EsBOdOdAV;dZtS]:[jMu,psoPXauFA@'0pX&j,*]Urnr1:#+=2%)`;Bl8]n)"(-]^gf:m-$6!m(/\gs0i\9+_*\#S3m/8?^j'[`)6#S#VDhQ';4?&gO(20]6,hF9QYh):pl\M>f$+s&?<,-OK&#Z1G.%kqP7XWbbHrS$_sKLb2lj1MJJ2eLX73+^2g+\u<V;\l0d[&%eVB4D2<cZ4nsH.p;0?M9Ub@gK59T6S?mKP/K_+]pA22,RouEh&"oo%QXTf"1CF<cU`3E1cX8!@;Ni5Z1'`Sk%58)B6n;>@.DuJs`Lr<JrmF[WP5sg!6G=#b'iM4RQFU'(JYOHg@\\R:P)J'<(5*l499Bd.%Y)t3H0^BT-W#HjeO<rMEl/u(AVOlCB-EnjdT"CtansbJklDn/@pbUP>Vo0n5+2=#f$d/^1bDia_/;:UPfT7>jPeaF=P:>=\='`70%_FM+h^f!LLRku6#0un3M!]c_X"*s&U_-.NN6*dB/pp'J?Tto/6]W%@,#i@bDV4^9J1+6Bjoh]jl@32P#$\<&LW\E8GIN<aVIS0?m%P0e'q9Mg%m90r@biGV;'U[Y+\CsP\gT[o>a]o3O(`R%4@2Q>P5@4tfA5;"*D/J$C&#RJ=PQ7R=jA4d?,Q9'K=g+UKba]t\#H0pl+%WS"@%U(uX<C'bP$;Qd7uMq(KBWu.sS$\ccqa!!n2$6A\PHX<$c.ZlSIlA:`^*tn7$-U&f*?@chm'l3-BXg^GF>7G*W#_D_Z.$NN<%hLSY<,FPK&2+*:K!,Z!Hl4P:Ub\7:pA5:`gl@H!FGUjB&c,Arq002Y-h3]P*83mB88I$JJ)la%?0ZQrNjZIEnJ_pk886UL54#tjO%hqRm)Of5*Ig+5S@=1b7D_uu-c!g(*]=k0HfY:d,DHE\q8NebJQ,a23R^Jp4AK/MHXZ7".QH7>"<)(F$fMS^uW@7/n":I7TuA^Y<d%dW2f9.*r%l7U;Q!+_XU6%hsndS'1n#)1UTFP_c!?@\pZZd)!^&_Lj!MVTte.Te0G/8[iROi,\*'Ug>qnl2bc_H-suqdg9FbORfCS%TIr)u?=#:IIK<D^BEHu)_/P(hW)5jD>_gg&\`q2dP'_5Fpibo\Q6Eb4MGqte)L?pFdE!JOSr*Q!ZSZt56h0s0n6?otmHhh4P$I[6%0+C(5oZD$u;?U2Zp@o\S8>S9\%pEu,oL_&qEjabBiF(>7Q&n36&Z-9=XdgOeehkmSm["iY?H[>7XJgcshhK%Cr;nC8@8ig,>&fbT%W3cZs4BJN0!EdiHCHpBjrDW5Hl\8=e*2)R1U0&sUor5*P<(,W`^p4>!iY.h'WhPM3,1ISh'j]%Y7$3Xc7WlT,Ag@=>h-Wh>5Z<+o%$9ga@[/C#_m&d.6MbQjR;ME5M/!-B1F1p:XdjJ\[OjFRHN"]aMn9IQgQU"S,IoL[p@p"=Z3H.fX/Yf"=BG"*8a_?W<.r*WT&iZGj%pq]6P_7l`qI3DCdUTnu<HJ5;OhrNDG(n'ER!APd.(`'eU+-:G:E*4$(\X'bk+\j^b>7tTLlSgHHF08+/c)Z"UPle<2I8EY,Zm=hA%Z?jNaC0Dsrg&%b%L>BYLDorO1EgkHd0E@i[ZjYf%H[8m?1k>6mI@sX7h*oui'Su3V.Tmc)mb$XM^^7S!Q6is-.#KQ!jk3i1gpfHP%bETB[JcmN0Rf#o\(ml.3q,9SVU&p"lh[Rk255,&H/eKEEb+b=?:-2IWd\@I.p1FlR"4.SbSI'.A25UH9/ntV1,d9ZS3+qk\"Ac0r%Y6?).H?b),Fdbk05ZqZ*J`KnlJG4nE_&"QGa]Js:R,:H6(L*CWj0hlD3u=c8n!K6O;H4,[#[Xj7kT3!_=`5In^J`X=b$Npq;'E/*%`18k3j=Emq7&hpR'3O6D[rCh/WksnRX&u<FmVlMsOC#R^]W:;A\r_mG8%F929(`@a!VQ7$Gnl1OV._]teD-l1a@5o(KS/9h5`[Vq%]4.WdJkB"VL.)AV\iq81F)ORb9U&ji/NjZ1V@=EJ8_+"RST$!_(J%s*Z+mibDh'X2$[RZr"F#-q\9R[@$b:tDlXtan(#8\;1:56O%<o1UAO<#<"ab1*KA3/?*d+GtK8`c?3%5JLq6\)cC6sS9aZK<5W7'13+8sBT-E?sk.jBVBd?ufrS$p17j#7BIW_H'*t^'P:cfMC&Z%"MH4.$$41d<.Oa/MoZ!K<2c?(_/NK-[Rf\_'P\o6%#^kX?um4!nqK,@H53qjIABTobFkjmo"YpP+,=)g.c'R)b/U?>gLaRUm]p]M%HZh6/>[[H0Z2p#"d&RFDCI)r*&Pe^]4FZYMNohU-%mW.a>Rna^8Y=Z]\LTWD!C5=JVm]rhW^m2u?)8qK,WkYo=t(B+&`L':K,p/5%m9<=jU\Clb)GhPp)puP1)EL8p!\C0E0#,&pDS"ca!jXu>W*fupj,$jhDO',b4a:.$1BGiO=)K"^oI/ZD*Vc>65B.)Id+`<!aO+3k%YS8/?2(6uE.mp9`Ce:Q\n[-`FVb5m.Vs+C;glYS:o9'@^3k'o:-=5GeLU8XJqt(L?M@M<BH)X\g23g$A"DqpVQ/o)-IW8Xt8kj9Y%Z6?bL3#SEU!r--E3A[Vh6$obQJo0K)eOHeC?$P8f]n?A(3#/Y6!t8b._;@uD2ks5GfG8_],auU.C`ql%XRu?YNRjB=4TZDH</C5g%lH5;,?HY[`o*n\OBgIuj/8oFKCrI@Idr$Oug2k'Y)#Q%8WKVif/ZH<55j/2NhNM;=#=74q+[89D_/bUAW5[u3ZrSHk$ce8/#u/Wr%j##;+jTD+h.&jJ9WnuVO9ge.['#]a;2,U"&6*;YfK$I_0o"o99D>slCWGFMblQ`3mW;F.l"*0:_-%KgMAB-$_;i0iU#<M[7S@H$V%cFOt[.Dt\@#-U@aj?i.*#J.cOcR!"Pe=WFb%4S4@;'Qg)8p+oR\1:m"1c\k^-O7-96AfF.*MX-4>?hO-TRfPM&@L_ED:k<P8pmJp%K:rXCRbY9(#8)Y<@N%^=X^WcS&1%iqn*.:Hr_eUnG:X(u*2CI#,d62:>?.t.Co;daZ.5e2T2W=ZQl#lfhh.6ceiip3&J6qfXOio(%5s00%b8.Hq$:!g^\$H5b!C4hOEE!AUNT*d-&uT(/;D4)B_(^o97'`e*qH_O)lSpKP7;5s<'+]&@>%ac?m=GM%P^&q]$OA-@#ahV0%HmZ06__j,GOFDNt$*d'?ou-0##D(_Ap<o80l(E`B,]&0ZR93Di>_$M2Pm"1=K-VG6"K`1T9,/f-$C$==+>71bfV+uM(BojB]SqY:%?<5-$YAi5u[;[Q`Bc/VHD0h@h;eQs;?k.%4506Q-GsC-XW/ibLfXC@H'5/kh&s/oS/nN$<O6^f\+mM.O1E'FF77LinM<+H7l3@XT%bQKm0!@-Y=#msS13l21M5TG-F(Sact&6JuVPIt-I*GBo,2[I?h[+(EJ&PcVj'[Xh*_7TnJ/ic'Ml+,4M5YRtH4]eHr.$6LaPZ1?$%;?I\"%2hf`*+?CQ@"#CD40'CCPF,O"8Usr,9I3@"!UV(U?]I93Jq6[IrS&8Z+:LA%9f&Fj'Nu\Z8+`7(6"+UC8O2]S9X]hPq3>>b%6nHKN:.6o*D%q`@`G`,c2r1kbKlAJr!!eTlOJ*oh9#t7YJLLR?@5/J]Ss??Tn2Qm1\$\1Z"a=S&]nh'r*$n8VYSa't^j"n%(U8sS%=#]2qES9)@ldLT:BuBeS@@PuX5.qsmg?)l]Ip[2%18@LQHO4T-WlC,&J\]o,7E5qY?bHJ&rr/>>fU@7SF/*ioQX],hgC$u(&ggDP%i)0;WZ<_J+c8h8@rF!@k""ljnL\ES#n.'dLor*^LSq*ZA7OcVM5%Wppj2ZuQ6`CFBW,IM0*jm;Z$uoQXZ75I&'tb-p1XPmB2PC@;%dgkY>JPCl.jdWA1UM11QmOQU<DR;"o[]@)jg,<E%2>P.h2#^lmYIm::oO/4U6p4rml!s<9XFKbJZ_pCJd)#>^_&?Z,G6Wo<VdhD)%J?iMRPZK*3`?Ts(@g?6%LE!A;5>6+A_/r5M:q6TZP*2IE^%/H>KaUQ2]XO%j:+o@>N6]6JZF3hiK4/aJ\'dS2EdYNK-&`G!4$q^>%+iDI_(a6VsV2Q#7>8K@j809UB0gZ*:\M6FF,(ruU+N/"$1^^c<BmnDJp7TZjFbp>^]\WN2:;@B&!)6p1m4!u$W"1S,dO5B9T^Y[s%B`C$gRMO62niR?p>gt'87B8c#DS/5%=\SH%kGa&11RjT@X,]G&5n%gK#:1>,%f,6<iOk?,88VpY'D%EL%-/BM#!0pG,QTp=<K-kt%EaWT/J>5P@=622WD.4!sA`BoP)#9Rg+IbRu/nj1QTKsDH=j2t<]cdKN/m1MK)lr&p%ULp0;8LUPQ)sL8%8BPHfN#<e@MqHR=7^9s%Z4)AIBR#Ri.oV.#K:r&U=PJC4.>1+?-I(O$CcjH3g#Yc0fgS"l!J>nh7Z#<)jO'DT(3_gSqmtp,,gUAK9j;7,pQ,i,%[f5/T&+Fk%hqP$`L9rrDcYg_qb-pVQ;$8gL-!W^>Bk(%_KH_/DenXAm.;"#u!jgSXbC3ef$Kk5I\Y(sY:VibUn4])p&rt&PNNaL&&HK7Yo0<X:%0m#+)kXjhH14Z=111:k^6MM42CT;okjRpkK%335uUu^:sqY%:l@R8\MJhl""+gKY*DZlHGG"Rm:Pir-p\thJkMW^s9S*Jb#'KAZj%%9RkOHk8:rZdme*;DQl7"n_tp\_L&$WW6gRrhSqk=.*ki_V:Z`JKqWAXHSVLYlcPp&S33Xh[3\m&,lC2-:o*4_T=;lB:]La39Do:%VA4`jIT3;Nn-tlpQqc`D>NE+e^]`=TiDJgbZBD8MN;o8]/>\P$_$c+LRM))#k%Rq%cd9Q\j_Rd3d,7B1[;m]VV_TH(jo+Mu,u5$o%E?h>=Xs?J+`nQR39aeW8/R(bF0O&=H$=If,VO/aZ1C'C*=C5A[[#cYe77&BJk?3G;;Xbei[A)'V=/D`qMtn\.&sR;'W_ICI7O]rj%.NC0FZ`Rp]VtA-OrYnWh\YJDPj*R>WM_KNf92Ts\S#_q8F38ZlD<545`:2P10"u%#p@bn7\s0Qj/L'1h!IL#=]E^-Oq88fPAJs-T%Zbf+%<oCc0Ars8-/D$r";mg#k/Y#qHc`6%hK*OEO>k$)24\8%+SDOdYUuurfK?`ns/\\1L:Am<c#5;VrMq^MPYko-kKcI4a[UYUs%B*nD=G'O1*I16i*L:qTS6Ki8#gP$+d77*/uOYZ6Vo([eK[>I>M%d%!Q#l_7CeP8CXpZX8WH4-QG!fDY5<Ri32ZtNl7WjkQrDLdod%32??>b$f1XmL>'^>(;G4i=\PFTQO!d@ZFm^=:e&Rmj9JnKEW_/Vm$r=Od$U<>b]T&/FQTtU6.DQENDH&P]!\&,j&iVaFsi/=#QF.%R2tX%KC,G*XC88MA!]T[mKT:tNW]A[(mJKaKaGl^L$G"T/Pt@[.L24iDj[8OKTJS+o4+NqLRP"jX,-iIRk<&D>;_WN-O.(/=N#"s%%*-Z/egs'74:4I])6k'@mJ+pH=]^QWlW%mHW2&O:,Uon[@uq$Mg,A)dZaC,b_SNOJ)gss8pE_[.hcI,qP*0JO?obtZ-YuL0S;<Qo%A2H3Ag4Sd$UfI4!!N"::X\rneJUFi7B9%sMN3QZ=_&c0mKO&2O$q(C=<YP7NjFUGEUuE)@UDnghk_p(/gi3<tR/pq*oF<oaC'gWd%-o2Db3G+q.&HgFs(h^:5Q:pX!UPV/Srni5@%P;e\]678<ndg-<40hO;>[J7+!*a)XB74;PX0[Do-r3j>Ll1Vf8__&5JJtK2?jS'[%S]83WPq?Xh`[i,]kK-*TL8uWbTe7f((J;Y$<?=k$/.rM.S?NYh>tGC.2>ZBsf/36=rcJsPUrF2Q"3sKAW6.@;+9J&F]`Y9I.X,=g%D+UW.d$P<e7U!CWpRKE`JFb4fL^8LMU5Y/M^qAHj(4I=$HZj6.*+f%1iY37C2ZmbG!7nl7gn1.C\.5<O<U!a49P1_@3PR@re>WM'%;[Zc&WO$5$l@kiL;2[\*&.\l<(LVjHOFccma++K<qZ%k5NIecE.<rK+%*f;&OJ2n4b,mBP(jZ-Sr0!FuWsUE35sZbq6/i#_GJ#PH%FBrA&+rj]4[id'G/N[^s\/=.-ARNZT*[9AY^oZ-9(H^q'jDLMV*HQ=Q*A/c)0tRh:q99e#NP5';8$Zj*?`G9,e1%QQ_@O:]SK%ml%1\Gd/bHQr%SCE^][`,jH$q)[>!d`OV#i5V*eO&^F7%H&aJ^CA4&_Wp-4TfI:"*N'dFb1X;=.7X?"WC5&Sl$V85BHW2`>D\2(T7ku%<%aBicS$ZGpQf)7R"/1gi!u95m3N\,aGi>bc>UsHWH&P+P9)5,IF!ce3_)^p?P6E+6WN\Sq$cj6b_u`i&cHC`\q-D'fsGGYOqjY"%p]tR#B[a#^DG2o8SJHPJ.tYPR-t]V+q,O`b]"pu(8MJd-q6RMQ@Y-#XlUdc$j@2d=(;N+=ckqHkS1$@4(D>Q>^_284C"*<-!mq"t%IX@ta43^=/QIXsrc17S_DhF:kUCA_R\HVk&QElQdm4;a]YXV&5C:aN!=boOWDM!<(K#',mOba<7,)"n/e1Om[Xds();@&P^Y_&4M%b=We7*-JD=$nPK)Aqf-J4:ipQK)tXCqNs:!/%UigBHD8).S>]m8qD0&WVX3gd'n%'E+66ohgnb^^ieWQI9<MglC.P%74_53k%dHh%d]<358HDjjM]F(BTJqP'<FqblK%$o58k#IO!/sP/;fEV/$<jBn?N?HVr6'AW0JIbF)<7`n#7=4;\WTgM#J]m4'ja)4h?O0CQC]Cr%U'qi\Q#!oUf`s`F#V$_m(ckJ]_CUskj9gsCI^Qt.n@?$p?ak(Rr<VN<3'ECt^U6Y0n`k)AF4N_'LCQ;"]pc+h$QQ[SIL1Hi<LL*!%R2&>e!1i+7?@2t(#oi#>+F=>o`>FXq-Fc]J2"<=Q!iBEs^j[]<f;D0)04i)XJ80^8/Mfp(JNDd@*/>HMBZCSs*5-lj?QBCrq-?"&%64Bca1Q`c[5!d0+eGXV?p'8Hu3Z&UZKSkO%]hAo)2ZPBi[4tL&DWP\ArB?PR`4SniA-3[.mc4T60BWk!l5UNVQ3D3VW$OuUk6o>p%=0XD(KK,6'i=d2h;fL,Mn>5#Kb"\GhK//NTaT,:/+sIJSJQ^l]@'JGF:9l_W'R&8=QRH!o.LWK!cAq_B_1K..]*thH>u/EsoUZs1%2-;gf,1pF8Ee(3ZJ[hg%FfC%KFa7bL#Fp#GE"m`6U/i(\Wd&CJ_K(*HPeWWh0aBBHh)-SRW!L9qn=[21j`NBk\sbW-8D31O83$UF%aBNQ9<1#r#b'In&&ViXlCMI=f"'@Fg_#bAE;#plY:b'8`[T%)_;9tYsAZ?/n3^nu.B1,`o[U1J\4*#r6!s'fDU]I#mF(u#Yk@DaY%L5`pY$OeT"!8D6/f\1r=r6>^TVG]oR3G.*Q:fZASK/goVEb+9$NCDFm75r>ebgGf,f#J@>5i!DS:#6#!Q[8tKA!6Da]gbj/661U4%Ia>eqA]`AO4:]90.TY("+``nHK$;$?Xtl@s#r,Pe/$B*q.JBhe*_[%]mtHcI56[f=3BB\d>8G"dpL$"r29Ho&51@a@<#(rK$cPC#%#sn+)'hrWrETI;2LIA<dE1j*I<2+@^<MlG?)_V(H^""GpgZ9"$eZ9sk=JaVuh'40e1JlnrJ\(5<Hlcj\K\F"(&YV]eGV]hgMOp9K%"E<h=lWpJoR]('^:h\2Yjd2f0MdQW2E,0LG3-(0rYo#4-$d8@jd9V[dhFo4Ze7;;oV^cJD;K@GG+BqXU+$h/&Z0HZE:77U;f$c<X%Br%r,S5pK01cO\WCRF\t=KUVd>>HOl=_EhS!b:K,VD$b\_#P1\^`M"bbp\D5d^%^*)Z/n<#5`ihI=H?;O+=e,$Y(kP2RV/05SnbP%dnNrimu;4Ra6OOheO:SQW4C:bW+mKpqO%g]YmM[sY*TB$[ABK0%^?\Od:90+Y,KrW4"r,1Vr=Rg\ML5;XM"ZL8jC$>mL)kch"Bu>%?K`nC0,6b08^YQ7dWbSAml-CKlq\[&N<'aJ)?HrN>;IBUm!Gn)dAYZsKCND`pL$"r25;ZR)qRY?FH]B42BD;pT\e9ME-*>5,^D,k%`Be<4<boh9D+pl[U0L3:0TCY&LqMd?&Q]0p'fpNOOumX2!@tiE<-0@X?3k9TM,IF_b9DkBd([t?<AC6P#e^+*&Na<La=G%=[&re;%%&_7+^nJaR:$2PeqJQ,-:@ScXo?8O4kP&RbNOeaC6LQ5?*Fc!LpSQfajJ%:(7QsUX<H8c!3!CD62!CV!DAg4kN(JT?%mY!RJlV8I%!37h!5e7*F<pcPF,#r#p.+[grc+]+jZ7^ck4i%.%3XQACGu0YL[YM[f[4Eq_+G&TCc.K2nb&?EW#:"3OW\p"@0'X,Cq\u$/SDTeL%6n.-+7=K!/6o=QG;`8\0LE[PPl<B)r8TM5:XB$KfJ\WKOZC8&[5nSS$Xq%U?H*!RQ=nV)1)-[hEA%$o?P:gNGptBN/iX&VB#q.Fu%_<i(!phGZj$?-G*=d$5\G!%4V/;)P?f6501&U:Yj14(fn/OH#o:jj3h,N*G?F8`N=g3)<?%9UpE$b"IS_p".Y#b;iBMJY#1=\uOm%21t0.&ZWumig.Ts8kjJ<cr/h\C=u76'a@<bQ!3h!6O'E\cZ/7onLu'f(j_-kmkm*u\+FXC<GN;6%]iPBWXNf+@^\>&KL4<nQTb\8%qOrKCV%Ar%Pn!"f)(;.!g(@=j)!YIj7CE^"_%Bd,"*qRMn2^QIHa'$t)XJa+jeFl/L5VQ4#?$V8<45fI^HD0SoT4sq+pN>lFegZ)%XhRo[8?!kRDqh+2d]p*21lo:L!AukSj(\;&JAb4%^;tbrnC2-fgVfPriSngEa]lJ9HL^9+QP.fl,F$_m.5M:d*rL8o$T`W\Z?,6Z%K-g"KSlOC1e1/:OF]%E4/Zpn/8]^MC"t\s3APhkAkDnc78ld@F-@(#n$Z9,/Fn2O[^DP?ed8IA]f8,&?X[5hA>Z@iPG_.+Sc2a)B%Jq?Dfh>mt*f-6JJA[%gR_j$.DpGMV)@UWd[Nf%0QM;WO@foal:)$`G<^V4Ic0FC'#Gd&LQ,ls%L19)Kir]^p)#8d*LaEu-[6=>C!%MP(mI`\&h*2s5?BlFR5Qi8HFSHrWL68<WFscPpQ$<bhUfq3S#l"e:XULSorBHR+pl'g^&7/f=ac^XX4'&\fY]jaopQQgA*I.,C15%5WsY#a8JsP60QDlSQ6^SSXa@T#+ejY5YcDGM2P>\<K2*X[W`iKh1ig>o_TWe!GIH2'fDGFbBYhS$-W.X)21\*4#9BlWsFp-io[W]%3uhI)!pcqISYX5Jlf%824gPGe=i"-5eY[M_n#Gpa86iTI+L*a5:E'Sd>>Z^nD\k46FTh&[AT:C*/Y35@Z`YemUE2)57!(S1;G`Rt%@&<"KFg.U,f+@40KSrR@c4(d^#pqE:>hn1ijo"8"lsdg=V)EV.YXkRBOn,8$AVbod8tEH8Gtl:/R12H=VL'`p/APp\nWob/,T-Xm%BR6W+(bAZDcta.6Pb85P6&u[!JeD?J>T3*3=]^Z!oWbDD?L(VB%4AC-W3]70#pH-L5iL(cYEk;V/G6G=4Mh)_-ba29@6)(_-^)J9%CpP8I\*`;#Se>ZK6;Sr&'G!Ma\4Z]C=("NN-omObR8f[*43sACT%"Pu@T]?=_03*\P=dLp7n)H2&JH97.%u7oSD[DsA48"tU=AL"%di@G=bK[?'W'.+Z7rqP&"OlMt``Qc>$<b@e^]AYm4sJ-`S.#m)dg@m?b$Zak`\(lDHbu-$BFhbOI8B%a[$Z+(6,RSL:[DJ.:?i80%2X(.=Bd*0/W>uF#kPd%#J1]'%gVR`g%OZUbn4_$\<"Clg"j5g3@*4ksW$W#)lA.mM$ZALR\(5(1/YMgY">'2=D^I!K]BDe(Re"^*%&.4MGEmR:%6-k.>qLekSV]O&XH#%PGfJB(e&BO)?GT\Amf9pOC0YJRJcd[`/=2u3&-"%8Ga#hZ'[)?D5S@(p\`fSQQ&^&uUr9%!H%1u=fT@Th-2k#;.p9VO9j)338PL&"5q(kQi5Wq3@uA0[;5B*#Qu1HA^fPRVo$r.aj(\]gQjT&[p%^+qPQBc@S0N/&>bCMlZLfFI-n%kZ7VrJkaWJ%.-7->QL$GQC&CB!&npBp?$Q5e4D]7?J&+IcA8pNG]UGbJh21`dT&NY>6hG]SPKbLX=,k,5/!Y'aA"Z)</q;t1XrrS%>b`N_Ep?fO@a-6TV[Di1JcJm`+NWi#lmf1,!UP(;IPZ5VLk2.FA:#LoY[54T:*eE;&PY?[W*n(a&<]obm,5?j]L=u\'F_:FlOk@(%,=l,W)\lJu@MUVD,(K:0Fe.4M0O^@e^V4f/gH#bGJ,u`:^CAs8:?N5Y!"a'3<u>$3R@i]['ieO@*IS[Vkrn4t*D*JDm&;9I\a]5\%Laa7Gm3H5?!EGm8P"64[^j?;!Vk!DT<!(dR(EG#@!mGs:juNcV]#RAa<9%P8I6"3?c4)'BA][-bLGYAhL'*+oaI-:$6Sb=qQB6&H%Lg/qHm'IS53N3g2@.D_p"r)co7ggSfE,T>qQ5`?bLKA@IDlHPjl^(akh/_BYN6>"Z)EJS7h>g6l<kkP$)]J_0"h74&!]$2l]!4t1%=]\N'10(c]2TK,c^YgQ*)L<P/As<):6_U1/+pCa77EQmpQuF]MEK/<IR(uPgABCdc$%n`B-?%%/POuiU4OiQ`;6$mA5jL,-AZrZQ%>F)AM@"*)@p"RGQWNjZ]Z!dQ!Y,>GufiI'-Hl\r)MB;Hu2s[i'MAfF:BtsT*5p"1Pa:gd=CKbbHAb":_d#&0=e/bVUm[)*rLUtm!%C+*[Ym8Z`/#@DZ6crmBuDGAhe&_.5RkQ-PeOXH&B<6`X`^!*G+X_c[X$7YEjq'g/mXpcD[F?Oiai"GP%%>L'jlAP+>@lglRV^P30%U3[4hTc-q-Cm^k6-$!gZA+Xb@ZA?kb&ZRXYZ7';<QHIaR)Q(2ghPNL6V"c!`7n@8i5o&WmD,`_k;KW3qYc1^QK=KgPH($%2Id`=W%m14D;6:ctTF6-"K6]AkBLI.$r:gK%fF&]+ikdC&l!dR@:;:=dJ\%QWHBF;mF=ql+ULNoM.'/2s^nd*Hn@BpG1l>N3_dsibnQR(O=%$M:+V=VusDagG\<4##:e'FAon>*_;3)3uZPFtEIu+dphC*g7Sj75[49;OSu3ji:U"jtY`'%+jp2pS!LI`D<DiPi3(@!WsuWGL<>$%:`Y9QcS=&sC'@TrL\InK\E]s#\3W6Ecs7@5Q073I0_NSHA;o!89TqaK4F2;i.&-H1/X$!0d!%4.+8j*2H%"Il.(pS+(/[e4ULC[:%*aUCqPpK#MWmN4ld]d]5;S=XTgiGVQO/UG\OH`^mP^3=nKiMFa%?s_#V<FR9-m.\j:bOb$NshgT*[@ZeQEGbF>?$Miet-MH[1M*C%/G2[s$ks_@_)3[VMmb!gHb?CM'<>)jR/9T-cr2eQIesFDGE@o0Y*lGU5=ifGrYf(m#S="Z5%G$04#;CW:LP)&ROg-6)S\i>,@Qeh%_#R_t9(&Hd%J7(tX^'Ra1jGck+H#$/gq)?7?Bc2UME7jKM,C!1-jd-<2NsH&q4'bmoEr8oQr88+pEXl7(u6/7Ul8"GL&qQU?MGKB%43*e50RtB1D[0ckl&hJ9C2b*)!IuPFM8L+R:)ogp%^ogq<X+tRFYQ3Xil$;ZN'O)iN$Sn5KquC#a%%_\qQ/GepQ4.._fnT!;]^4i%#KjiV`m3neP^uP*0Q8n\r5mj/2pW>MXtm">*g7?SV)Y=#0c8UFZGX^J$891H5fM3!AkL-J)0GrF8l$:onG)k`/'b1d1n]o$E@Gc=%dI]J[gXm.=U63#0+^L6G"[rK7Gb3Fcf#aM>NPZh?8AP?Y)Kr3Ia;$\-CN!heV?jd^=WNb:L=M@#4<-rfn<GL@-7#Rt:Sn3MC/PU>%?]MOA-dP>HiQ,Og!hX:ZM':j_)C[S$A]6+B&!:4a%>XdB-l:$V]h@4n8c#.omt*ho@Kg5a4X?-jHm4dtcM^TVhQ&Cd)U+E)@CIRA%![iulAtTj,+'(H)NY1FF/A`<-T6BiTU3)`/'Obj-Z8_Ei$a_PjmS2$QA:(eHe,`>#>LA)P6k-SSB;&H`iq'"9LW[.Us"c.fH36RL%Fg0C,.a.BN^1]<K55@h$JZL,m$OdSRTW$H#"eM_)0(W<"=]?PjQDq)6<%,9\cNDR!$@)9.?fo3U@P2?!BmNY%Wqu!/Z/&"IEkM%e%IL1:a[u0\iCGVno:F3lAf,59NTn?[(83tb@?&e'qB7W+Bm`,7NXHc5;P=L6;YeWj8;Aa[;6h%HP'!oU!dYh5fTJ8K_GO:c/`PlNF%q"MJ(4[:#+.P(@8gS<X`qY2R@ia$r@1]8q9iD`Y!"o&JjaU-*WG@-L]-'R#Nptj<V8\Z=hT(^?'k7kilGjW!6i2@de7r@^JoXhfW%kh/g*S\-EW_4"APGm9T\6@#t@;,\]Ua?&31i`":uW&e25$OV2T.`&,LCkQhP'tn4n9YXou=.XQ'U\*r1C!U!33rOnk28"rO-[Yhn%:B#%5pENG?p:RehdiX%u*rdXs^0*`!mjZLD'W%)[Zi!XXfL)HT`[l)QjMs](c\.Q^:)TB$<%$#=>Eu*4:T%THHA#UU)Cj]`6hIDa%o0"/9$UMZ8)=KJ$%+TI1lJ/3!mP[JI\iE^ps/:7tao>/k1^!Kh-70+Sf",a*oYHc]^_=8Oq\;"sac?Xq1qanL[Wea\hB7\&H"_m^%2Z-1DF9NbF_3=[`]WSpOj6%0bjl*a%d_$GKKDdbb$9si86EM2[7/lHh;VD3HY9.TSpI59SLYM.LDDiY5D?(c;_:,)Oei:TV+3a6B%0CaX2K\lbNL>1c/#r.gFl5)2%h#r*Z##?R4Gqp=lXYA]TELs/RJGW_=N_&/j')[a>(KAI0S%=h,Ftit-`k]^MX]BPsL(.M(nU1]g%Q,ab4r8-5nQpWZ?`3[W8+COil)o2FLhkIL>`p47:W?5RG7IiWgOHYA!1F);rD/Dk]G+ecL-WIBR'Q]N5`p'<sWUugYN$5fQ=Ie<k%ZEY+f7@n"b#O<f(Ci<r%X=T9>1>rTi<?Dd[r;gkckMB+iT`pocWsq*AV_au%@IXc",6tK;='tUEMf$,nam0o\bHm\Y0h9Yk16M',%eptVhH7oo8-Re'I;WJ9]73T<tags&D;U0gM`*nC_H4sEb[>S\6RlILJ0egHfPS)AOfPoiOfCD?4%LYmNi8G9e+k!nXJo(lM>;a[7%?TSQt8p5e[46TZH1?n2RU@eU&R8f9_BN4_V9RbGF`[NYT`#P\rUbJI/dj?gfSC/`>l'V39+[m`s3sCV"<b-6X@.p)R6qsC87AoO@%Zm0[1UZP%/e>=1_>-U%IeV_>fWE(QF:\>!M_l4\#EB)J^,S$_uK#HVIO,u>kC.7.C<%AS?cF"j9Eip.6PB4EsRD$'EJs#X(HfSl4%on3'Hs5,%k,8NCYqg[[hUJu`A1d*"[/gCh?DeWIGPW;7"o9.K@<D\S@-;gT<(@[,.W.L#d,ROQi'#i4@652uMg=ZBEB5"$[q2@lH%_1NDaYf!O7"%`c;P9`V7a!B%WFuHVr,:TAb@.c#DD#+4b1RqsPQhD']_&1Buk;!PQj%aIlO#oAVIL?Nq/oe*1NjD[EQdfo+K,5*"%0s^/rI3R]j+:'h!iCPL+9hgeT_PISSb_9">7>ruEW^*E9ia)=)$c:L.2gs,r,g"M6P,1gQB`n,u4@B%$$7HPWW;OrJ4<>a?"CI"@%es@R-4:)E?QPNo,V/ns>-o\!0LmUT>OIU06NEKT"jQc58?B\)_9+*>J>UT3efd/laeZ._sT&*5hX>Q;j0be!"]^F`M7R*-aZYeE@%SCpCfaU0`e_pI95gbK*bWVWInI*VqmjJ<Lr-."Uu9<Y&qfQ2V2?AK#nApZG<Ghr-=cT2]eD3UV<UPGFUMmd:>Z&WoU+_e:H1V3$Z%oLSd(GJ:V3Isq"ZG^4FZIWi7#Ido]+^!f@ae*q;5?/0dS[6?d$^3JhWKDWjRp$%h+=,5;th8QR$_dBl;UGpMTTRSU\gY_\1U@d&U%DMkSlC;m(n%urP`9s`;M`$c_fQ,K_BN>$1[a^BeHR(\S-f:#VHEQ/38UW9tV38@tRA<ZM`S]>Y]g#H`%aH2O;a]D&nP38a<J0jlY%O&@aEdTlQI@MU)MbK>N,>2;O'e$h,YM<a<Xi/BUdZDTVp9X!rYV^815Y.4pY(Pa+PKOZ:*.?mscp6'XPB2/B`//t*OXjA)M[.]gJ%oN!7*o"tp\4WkqX7g^,$NN"/l_%b,k+K2!JbX.&fT$?%iqA+tWOpie\>//LA,DG$@dC83o`fjjh9cf:Ei6u"+>f2r!73pm>n9\>-%9Ubi&%1>=B3,Qa?h0H%iM>H.)'^BBL[?mO(i?aJH@7G*d4;]p?P7Uaq*6)&2/uKBE$;au\@^IP#qu(X0UUC9%[-aob#u^X?-Kpf<%DJ[bgJlO)S2kQ_74_hoae`cu"?%A>X`ujYqIPIS[7jlpUmk::2Fg\m9H0>1Sq6SV'qd+YnG]rk0[9e6c5$G)G^&>8@5284^3B;Q&%5.l,[]Te^hSY)P0>GT6WeRJR>n7lr]VWk^N]<.!2HY_gQ?bAE^R;5$(lDQ.U61&:iR!ca+co6/'f03+00@-iJNaC<tGB%O5N@n;e%5@3nU:&99_rd=7dqJc9$EnlPafPJ.VL0GY!%_o]Z^OsG!n"3lM^B\$!h!PdQo?m*]D1-C?NGfkepM@6DIt(\OYJ*(^H[4%']/j2@%r%s.e*B@m\qI7nPZbuIZeU#_aVTi1t(T[5o#^"IkEW1!$q\S\(fB;&92;p/WCHlWJi#-t52&#caU6!B$a@Vk8qXFFZ=^1mAn_'p\%jC[_;=WADfY?*)12'1J"H%*#%gj=7MgJ@e/[(bX#IhPQF]JH'IqLtNTXc"Mse,R,?57UcND,^CA,<Hok_*dBSPLQ(65S%lfI_&tD%FM[?Gr8/F!#c@-&*o$Z.,EJ3$ONf#u_"?ff>kGh>Gi1Jp_LNfVs34=rlu4gifL;Jk\,TP/ru8'5D'"9hG!L6nnJBoN`o3eUFPg<d%s#:%l(8P$$#2m&H72H)V+R3j3'):\7SB<N3R>8aseN_;@#*q;+QP"Q1@^?,$S!f[PLtUinSt915Ef8/8b>77K;u3Ju7Mj8g^<@:"%PcMlD;-#<?_>/s&X,i3.i2[X;p5NeRD4[)`0!D^ln\mJoeDrN:pD^jP70BZaQT@Mmr-\tP@IqMk4ZDuB_#uYtP4+CE_)$kK>6o&L%/,u5D"q)#!X0=kX(ppgUbgX?q+H$,mW,,]+AGT4")696CM4G]"e'G<dc/NW[T*E:"IOOc"B@fTGmE,0S_p(cnm:arj@lYL=J8%qY%#=\5fa;Ac7]AQ/&og]Z]ps5"oRFu;4'!XT6CM%IoNmM&5g@i^mj6>O8&tO[-J%>re2D^!J,\Z=\&q&m'\2!AY/EKRSY<:jW'IQ8Q%_"@4GSbJd^c-/:g;X]-D?IJ&(]>>L3?a#^j',OW#J40%=4m.[%[lnSP:ZcG(0(dU]SYj\/cen&,qnJVS<.*-^grELRT<'Yhmf!.O%r4=caAb!U^4+D^hqY'FTjQc&TgWU1(=,UGQgj=ErH?$7=-A.kJ_WM+Z2q`T9e=oJ!rR90>4dM$B^YW,KCW!TQ4MeJ#@=#+_j.jMU%<C8B7imG(Q.mh?>J,Za%HJ(iF%%1riD;<=*:$BltAY8o_HQS]qBC4$op?2/l2I5<JXQ8KgbX_6K?(6)\d\?^6PWiuE[_=p#C`(f@%%Xd<@p_JcK/Fr9#S>jQT5&:e$g\C*h+&Wo9*d"b=pAQ,%3G8[<'?\n/EJ#?"SCZVna5<LQ4$TEVrg/.>7iT5_3g[B@4C;EeY0O0k%*aTkMq-/>]bP/[Z9DIZ<4tZ2N\S;KE3u<ZB7kfNRVYHf)n\mSfLR0XpZ3n1U35=/I*M+6X!p&)Oh#"I<r6E^/nLe3H+NsA?[Fj+J%n(dqbEW>n#I.?=WA`FNGs1R,'\?0Uf6)+58o(_kRA7V@BdN,_T>[KWU5?o9^>2SMkq:9k]Y',VN[W*Cm:-L\NC'\R&XOa"-]];lM%S+A3BcBj;6`#Zj7`soaDCiV+e.c($eZ\-TMO&iU>DVt?Gl,d**pho,Tlf2X0=0'NHiIC,FhEq7;<m)<"-V*Kfm#RA/d80#1/(/>1%ds(fam.-WIL[3,jNuTn7VQUJ*Y-fjt05kNJei'=BKf&_Xs*3lm4$G`@9=8\gS;+u&X/jPa%Bmh!\Fj&MdN?'?Zh(MmVEA2BanbKR%R=&AV2Jr8U[f8k#hVPj?2qlkn@OQ.]poiMqs%*IoK3)u=e>_[sR#5U'bNm?Po@&1?-i</ln:SnOP(ZE*BWU5gamg`C(Mtf)6rWor%iKRYtqqXL,D>Xo.#+$^XbQ$h>fHr(q,?"M8$[o9@IfA>$N`L)oO6+/q[&EGRO02g%adT$a5Boc"rS4cMBBN@`_Dt_HHhGAS\1)lF%ZEildr*pP"0^REXgY^kDchugiii,Q&lPB*jRk/0u/-"S`md^,GHF\>e53IFjXl&QDJ+OFM='(/I9aLU#o;Flo*^;k%Zd,&%e#;ei%Z]KTLna-WcB[9`F`U`*b@^/$C3U^mEp$-fa3L<s9R)q;4YHL]]cW5t)e_dNIDgATo?*;b^<f?QNX7ZYLXeb8&]*W-@Kf.V:m_2jV%YKkaXB87jiB?O#pGf+>Mfpd=K4g\`Cg.,(.efV%*:QDWm?Q?.RX\Q=&DAS29`UW&8qq>f46p+MjDf,FCXJqh/*fK4IoBQdPDD]KM%BG-r>/mi]n(Rq]G?`r*"f7R'R3dNOQ-HjuW/_6r\ZAEG^qhsd@M`1@t]i/qGG]W>^c$d!Ge$dR`8\VWITCdA$Y1AA@QPYGE>V*X.%"!8U:0"_)N[:gB]Ir3Z^Rd=SN*[tNHeS'3tdF%L7iNm#<NP<_2ST`CTWD1sY^/u?pSishPI(icH3ks%dIco%LXcAFF:IeOeH?;R<%]%QNTb]C<uHp0U'D0)',l_DuB\Gl7i>MT,Rr+bfmPUJbBoU#o9O2P,uJD0OF\B2aA*2CP+mXNsfGW\/jYFc,^Ec8IsmeuhVfl#OS%3_Z#JDR8""`K)qDY,69sCj,XFpu5Fd$npMOFjP7mj6On=3JX@Z:R'*O-d;&)T7)%ZmJ14qg7"LM0T/H.fKeK8G^Xa!n@cg2))Kt;%b@<uZl\U@O\:mbf2JnM"q4@*H0?:_Qb](*A\Ac-/i3X"AS9E,fd/)eqiR'@ln);r^n?NN&1>th"&qtU-YR>r;&)-04lk\jB]RoOZ%ZR#Ao8!1N5$X1T\6K:!o(7P9:fYY,S#[O"QD6T4^__]!RI_[,?\6/4:P'-BDUGbV]JI1X\].@aMCc>7gEkSa.=G`R2$IigPC!9gP%bDl%0DDWDP%LLpHDl2,@Wl^L6q`.gJSi1$D[e["cG0eddGAj%YZk5Bt2)htT>TTK<['/)iHZdNU\^AC<o)"ou!,\$7Qa^D/[CL&(%kt#XE-E$%)06](kHhs0h9`eN>]r'%pI=?2-PeTAng-%KbCrpL_bNifP.R,l?jmL5YDObM4m$Q)SX\I)Ac^TaalF(hB[O^t9MOc$%%ZoPC5UE!TWZ':5kQS/j'*Om$_k\Mc4W6\M2S+jn3e_`!&2b!;J2Pa4*4Rq"\r*jsNRKf+f/=d_"?,$udhtZ'q-[1!GDKrZT>Md@"%\C'9gg%hb?Md*lTV(PP6N8gChY1FASpZ^]kg'--IV5)$/(E\-PhrPfCe%U7856(=Y:QV%fTa;gA@oWRXi@_I-2Gn>1f>g;'f]r8&%l9oOmQ>]aBRdZMF9=&%3DJ=E:7!L^PHfHP[*5/LNlpYh`[5Yrs(XqngP=4/6s&Ps[]3AXkpduE#Utj%5HfOd<&`m8)gGd?#YIt%a%^]!kHFnN=X0/f9Db0EMXbN%buUPOht)Y0ah'/S$O)ifaIeolh8c]52(%rYl#e.ccN)`#i92f`E,9btL<d$7h48hI[!hNWu\/P64"%BThsnK.(L0D<$I+cI`(J6ukXF<Y*2uh&mK?)4hgS]O#uIG.1`PI!r0CaH^o6&]-EKB5#r9>FMu0\iRRj]1k#0F#6WdgDM=mIO`7[%:R!]Sj/02sVV-80oCb5eJLguN%bI&VTQ1T2g=[@KKf<]#ftn]8>u/Dff<lYUKm@i/btel%0/'60IY5Xgeo/oY2![)6]tqj/&CiDa%hk$IrG"c%(3i004H2A@9iFd9jQ#)3MZjk\r]u`lK[@:t-r(WOg#t!Q1='Og>q0&uM^.(5QSCLbF%T87a\!OQY3t`ZD#@!dKIiG:)%)P1<LQoCqufB+<1b-/:^cQV@l)R2gr+d.sE?i=g(*l5l.dV/)6hYZro&g+Q2O!n?/cMPA5J'%0Zp;sXfk2-!-^%_ME?X.mQQOEie%LC\e4i",cnr5#T8Dnil0nF53/n]O^WroJoj&&0ttJ($W)msk+DHL\=cr?i]dm-_PoI^sO_BCGl_jhLc\cH?.cB>8c_f>mOLriSJa%m2mEVg^0>H(OtA*_f*<bbAYTPJ,.o=BjTp"hk^!qrc#8oE;e2]T,mjM_r#t?ZcDq,_jA"00&n>LjOm''p$b3?j!P9JT>V9.4T+UD%0E1n-0;#ksq=jpggL%?qQZl[*hjq2/52,$oim7>T]o\M.pbZC$&'cgma1l/]#FFb!G^+&mrTRl7RdAfI<k/.dLOTeN)<L_nhgG@.%Igqb4nhZh>q:Jt;rQDP@lc1C8k[0rG*-_;Gb<N,DIeVf6k$E<1c?S=*XS1@,huD"\b.kFshJ6K*B/J?r7Y?0ga7Sl@6/s'bbOnS^%ral'$IpN"m(po8X*d7!TqXX-YRiV.,r.ht"cqd!AF8tA"T`=^=s13:7ns@*N^R/6kqYDkW^Neqp0>@AAF+_4,DslP\Q):2Rr5jG;%*f!$#-'.ffl$o0##O..L"TQ[E?ct+Jr3%3e%;PUO?%-hSTK@AseV0nCc*&ue4Ye+/]RDoVX8Dqi8%86CZTIPiiI#E:IsLmA%/T1S%^MNd&h,V4=Epj/BC>ZZ'm%`gJrd"J8_^CLYd!)rj.=</=G5lf2DU=q9l`Vs*q;!ak`h;R;oBW%+2!AuYrtYF/q*@7Fke3Vg=1\Bi%#Mlqs1$n#J0-9K;2!?=%F_CD4k6DIb5(3I_-\)&ADU>hXlb@iBmX,!5+7C5qXjudiO+)/fT]tXSGl2+NlPg%VqR,#VqNERX:nk3h%;S)f!SX9)B4J!Scj'Q)AIcI*9>Wr,]0BNIUCK^\lcgIng0-:(DL4*tJ_11*en$i,MIms^h(Rp$ur;X-PGums,ZhGj*3s^G^Y`h5F%%*GO,/1ODnaO-dB^p*6Rs1+d#Xf>?`ar\-<2gs7_pH8$4m*)FX<N5oQ&N>$C3)aNJH[bJE,rI_AV7,:[fEoRoAg9?]]:Ci<3jJGR%,6)ZSC"Cr#_n#AgRi3<:U1Q?5*,j[kA$%WbFuFZ\EdH-gkl0SRr@b&VQ]6tg5@2*!N?T1>O7go4]a+;c)Vp?Y:;8EM)a1]Vp&+.=%01D^7BSDn'H(]Vq:@R61o'Xi47e`[EJ)ZHR7b;9[IX(PUmatM!=C81[Sni38q"X:=X-Q64-.2V104l_o67\qd7utE6J%]u;Y-HCK%QV1+Y)a/O'J*V5]UH?lne%^+"Q,^'mhO$HUHhV!UZ-ht-Mci]J`SUBj8'um%o[Cb?/iANg(g]#4IX^tTD1[bmf+-'cS%!#p>b)m&%UT<S.7R,0]S)d%gP]K-cl*jmE_ac.I9"R=\o\.Mq^u35!c7cmq\;?1tf#bhGdeLGDfa]jMEDbbqms^V#dIipp"_s9*i<^R?]CU:$%2#@2ljZuEE&*Im"XZjNiQg6d,:bCf7\%Y5)4'0s%ci78U3l]FI4C&<7\p&C;lIHtj1gWC/3!`!"oBf!Cq(6TTW)!!.>8+1nTAG>m%ok[@63'Y1Tq:FU'<.)ad/q:Q99HP8r]R/$#ld_p'444"No9W1d,3Ah]]r!u!4Ls/;4069D_YDWoaY!FuJZO;!Q/t)k$@f0pRYe^r%J$NG1=\Pa!l1\QJq;_3rC!3]HQ\AUiP;iMfs46tbj&au2rNCc72KAcfpAY!q2_UW7hN-M8bg31g/\bo<O#GRlVON#<H#-r>s.:Yh%q9-asYDYnheEkEUg\:L/6Ch"CPAV]448pA7Fnk4gp6qDSL>VID]\L0kC89nBHZQA;ci:]1o'>/LnRhLSSc:R;Z%mOI^9>i%ZcuiA%HM6b'`UWYLbHJ+aT>_Vi]'3:dYt&GVIkUd\/XjF<HN1q+c4.P&T6omIGQ$.R^FtE^[a!I&f6VRK+l@#5p%7pPS]cl1Vp3!U'>=E(%rVc^`bD]0/HMZabbkRt+VQ\=l=-&un)c(*YnCON5YPR,Sa%u/piNH6*KJLd-j0O[6pX<@GpU*5lGQ%jW%*?^s\Ms>Tk`=-;2AbPJ%!DPVrgJgsL0'DqH/'od_[[t/N?[2D*q=qhsQP\[<DeH9C?VaM9g`0\V5>Hq3[^Q&0#P@0S#.<Vu?@H#SRKcd]obGpH)'Ft>gi8=*%beO)ElK;<3dO)CUMC6Rjm5pree#Q7[NG+5rNZbiI2reUM4c,/kT(Bj`>M3[Fqi5?qCfWARZ1DD/[8G@n=rIRl(A+,,.?=YW*e!8"%kjE]LhC.YLY0f4BZiEf?jo9P5g"i:Z"M^:_-I4($oKM)U-5ui'ldeef-qXHQ;<4"Y"JbVhVn(49kbu2BM4LhICSPhu;>tJOCN^Af%s3GPAId5>EDR:%t@pu\h;m\H?1<!\VoIdL/MKE[triO>CWWeJ#W-S4U0>sWd0:g6K^3Nm2#F\([abe'=iuMks^H2?K-)_!-3Nrk\%_.?1E^0[0=[N#"n-H^<%Bk$F\\eDjUp_h<G_Zg%cH?A$plT!WpPD`u1=Wm=>4h1_ADYi`IpYsZ.HdL0*heR^R^:^D--><D8o!d)M%.K%Ldf>*nm^n+!Yc.ag-GOPEhOd"h@q?1>ID/FVlr!+XFQ^FDNc--uQEpKn\_Sc$eNZOup;pYmN%rR.f=l>l7FsGY.?i(i3M$XkP%^O,_Yrk*sM_pr!jQb4?YFR#TEVj@@r\["L#1%T*q/erH#RIYt\5NO0^2blF4kF'i#)of@ip(."Z&,q2bd\k]$]iQmoJ,/)4^\(fU%aSWs?1r8sc'cQ&u\_`P#IJn>]s/PE]CU\,NX<*Y?m(D#J`n*%Md6H*0?Os]Rr61U.q-/99SDLm'be&.-DOPcUQU,9`o>NtZJSe"R%`!<ldn>f0-[bks$OU\hJpEVoA$5]kbLMaHtraOJZ&N<MDmf"dRar9D[qq^;Un5S!86aV7Bs799[9l"gZNEYh#$e]DXQ*W%]mDF*0%H$fSL3^Y.hfXmXOVtu]>6Z!j#:-Ta@[Z5*=b)U92(6,>^[N@+!+\"3IJ1QE-I^c^!lu[F[K7+f35$>H3b3F#8eoosLD426maTG8]%5:\O.g:6cR[qRskT'rqJUOP1gh@<jpo;VVgJ"o+AT"@c3#E>K"Pi[DKECF>(PO!"pYe=HD_eWg9.I,[IF$.iY3LT=l'dQ.g_b'ha%nPHVo[f#Oer+`oP.t?=Krb)12hg89cB\os$pLY>>Y[0unU\I1aij;eN'RY=RhNQN6,sAk"/N\F*F=KF`l7XrNp&208;Umg4ZElMK%eSfkc'N`nPT(qY>k<G%%Sh(l=Eo/L7'0UT:mnX1N%bgf'Z`Qk>rlk63,;#m+"oF*ta&g_qf5GK*T1IT,I/YP>*NQ2@2)[<[ARD<!%D%G,L7kO%lKad'HK1'&!D9mF)XAu8>B#Zs8*Pm\g'Q(WOZ<bZ,@J%7b7uO)#\q`deqqBKgr7^8$Tc8)[qPk1QkMYZ4=7LTQW_HOH%X(pW]T?=?a0OsRTmd1OX.%C+dL=o_%C8IrS.m(sMGI=V<2b$]^jaM7$<EX!>l&/T:0K.IT/%-\Y<P1poN$`GRdZ4`Wkt!4,g5]-D%b<C!qn(:\u_p@kSP@6cnFmo!C171gSXsF/t,J3\Ok`YgG+=XG=Cg@P%5`8M"4t=(SXYNQ`q.Mc2TS>>ppnf\6X_<bjNIh-1Kdh5\%h]EF2JFVG6<8VU7htkLELBC@hlOVIkWNF?E=eU,m[RfucrP^]QekY3/gf1mUIp+;=fMmL_e#&=Y^E<EL-B8;!/?38tWbJaC4Q8LN%.ij.AegDt1iiADf`+<<+"!PVSGo=o1pRlQF>:_&+\(F$q][>7.A8e<LX8EHJo&L,r$Ml3j*DEaLWq*b@)P)::\=Q'W):H/@XJ6;@%Cj?;uce3s7o]!olb(094@XnJB\/O-l=6!c[AGJ/%EajW73BlnAl`6,!q=`M+@BYfh^sb#PCT%Nfk_gF7U@`n7P\t9PTD]O6)@68c%ld"<MZ,,Ab=8UHL')o3ZZGGgd(`Ru;Xum`@H.fCl^c&4BA"Tqe*=nQF*6OT'9XaKfiD_r7J-$6]hE+4JD!X:k^n:Q4\!-`$TSWsm%>mg\;N"/qH9!\u5PBWCb%^IY-QErC=U&P=UlLjb"c<Uqq(.`DpW\B)<+-#`I]uN7dRGVFab?_PXK=/*VPHhFW\o_Ksk&]R_$Vg'"%=)$3rZb5eIW`i2s8.OCDUH`6eUSt*dVS^q?f!1h,o0I3m<PIYl5#iBT&.VZB`@Sb#r0Na/*OQ$W+49:e6GofiFq`U*#;Wr"DgPac%[+t2Z#na@JFIYrPIYJOg4I%"$k8Gc&iO(,'?^I+o7mPHSIP_Z\WP*JQBGWne07B9;)Vr%bX&<&f^,AC^"l]9qp!<VG#E%*ollTQ'%U65FAoit^uTNXg(pIb)u[pGVB7&QB,bIiT3=[5g_E62ufXlbArlEFl?PA[)LO_MCP?^n)UFUdU1cnP<_Udk*C`]IGI_fBoCZ=?hh%a=L<A;l]:\A4)doQ!N/A!W@,?.\jY'm<kG5hegUK6kihu(t@#)OR(PgV2DZnfQt,"Jn#hdBg4WV7<3[C5aA<a<#-CXAeur0d*T%!%,EqTRrGCPJ")<4^A+a8<9tYGH*c]DhF]'=YHW+<P8]:lqe40<lEB8An0)"Sa-8!"/f9br5[IV2N\CdhlnpOFg1:l&f1CQ3Y=g3[m%LHTp%DMTq($Pd"34^T2j+.=._mU]@0f.#b-/K?KK`t(?1E7MBB_,U75fm<OMb!I2,ZEp>7<@-HLJ!\Wt16_F<.WcfgG/euR&9f)d%_<OdEh=7$0\ikbB:bc6W/6Df+l)J$(5GVaYN-/]*9+=MI;-11_f%5m&<6?7S=pNB]:u=L;qU2iIAXC;Wn+D`u&UE,?AUjT](;X@(%hqhaPQc!_#qM]R%-OUM2\/>QRZJp8dAqT3f>""=oV<&cD[rOtiHOA6&;jD.FTmTk:S8=_4)qpMGE\l#gF8,CN_>%KEGYBi6]d)a\%VFD4df/nS%Chbd]FM/p_.^(c>*CJF?JhDip]LE<8mg-KY>&a6R]&"$@eS)d-A*A5/d#CbZ-AJ[I"C3<WE9J.Mh@XiLqf_?D]&"$@%5)/fX0m*"M,Nr;_,Ql'5oo>[Y[Yp^eamEMTIl]!kTauNt,g]#UpK?*#3UQL]Xn."%gT-rZ3eR_rH+AShE`Yp5P?WH_ah(c'@@j&!%i_/.>FOLp%r04e<;`2]EF=eD@*oAOdCjr%&nl=64(T_F]7,r?.F7/DH4R'G;DlH*jO<\u5<-XfeE0iuR@imL/O*U"01.V'!5.9Kh%)tmt(]N+?_T#:L.W7o.Qqmh;X1qjLTf.e3L6X(6gT09j:q@%3P=-,=9qkJj0:!Ol6"t$Xhpfa!?mB5&!<_I0k.N"f/0(X;"E.DX7%Vm;4)dR+Ipb$*i3kg#o@AYBJIkcDDfTb+KX>:1MC-@_J/h.fmRU\%T8HZlt)RJ%(ErNtV,T;BZIlh3D'n$7q@Uqp!+LZ*3dDC51b%gED*Gj,MTMU-5`q6PNWKNpl@HDfMLu*+*)iC%-Zq+:bJkm*NZ-dKdKVV_6RC['7[?TnR$.LJG8S^cP,le,#>n:$X`s(I?;tfm!C@%`UWV\M<VYjE*_bt+:Pri>!cc<S])_:p$et'I)_UbAqlh\p8a:+#MK"h6K]3o%DV^ae[6GCIJQBQFVD!ome%#sjMThh\*P1if2@=+%TU"I1aN#+>r27m*^0GS=h7^!QRVtW1VVN<9?DApGmi>-X$E_m3=7Q-sMq6mk2<ln@4[\>BY#,(/Ug<.t%rpoZp+)?S(mUs'RZ7k4%EXdJGDE<)8/pmPh4Ls.g2BL#'qYeCrV,32bh_-If,"8s/jS'J*"u0?S$]jTc0bdNVp5#XWiQ9p:1$DT'Lp,CQbs3=sIlVRc,kEiu%ku,cYW9ZS=2XaVR5S)$Q`Pr?rBkZrJXF?eNN9^;GX\81l>c_"[h*;aD<pt,P(,sH"Kbg)!p#)S<G"4Ytrop3,Fg9#hX8V;k-pr6Y%4W)rue*7$bp0^9()&V*"of\*PFKiiFFU:FI[RCCq"j=[4FqB,LgEIjd;Z"Gr?,Ijr/at_S",5pF#NrnXA=[ma2_U#IX'-M.b1#n[%IcF^ejZiX;Le1i9<4tF!\geWqhPAV2LDe13o4PgjkNl=N0XTB`CPRtEmqAnk_n(S`omSi9XNT#1aK]O"NuF!rIn5(&>$P?+#Y>j^%gttDNK'V,4WG4H,;RW[:l9WTPV^j^*JBd`[aD,7-%Jn99PI"-,__p3E7i`,ll2@l&a2>.uF<r,KeF@L1H)M2l%p/GiHTmVVO_R#6%FeT&Oa2=<G>5\On'G"j:Oi*!b;9-SZ7<):NDCtBt9s4]T)L4H8ICZ2@X6!1JE&Cq&j]Vn+.3f,_R(KtOd3i8%ZVP,nOl:K:ZAVLh%btDNUZ[[5un9Q?H*BbQ-e5LkJ@c/23XJ_dT&(qm9iiaBEL%Y(dMj/YJqg1FIp,%Tu#q%D_<]PmD=*YY$2S_&K*5XtIJ;(N,UTg5Q%LOa*F='qKcILN^C^$K]Y69<\D%(G+79jF$-^-qq]qT&*hcU_@EVKrG+L2C73=O.85+kBQCV$DG7`miH\3]mu?>:Bt](-XJ%n$T,9%<b\r6WJUG.?P-aq(g&_N)C(>5&WuqXmg(.9TsE'7UqZ^fJr!A`;%:)S.O+Q7`5@:[kZphL.b$6U\d>d#RuqL:dm\]M)j/kQ)<`+g%/Se;%"4H5We3TXaO?>)h6g.]VRH_$h*KOW=.%I2FK1>/8&di7tfJ`WbBL:[rN-2Gh$l970R,)f8:q/]8jbQ7^n@Z,Lg/3R@)66)Z%8CM@._E%Kq2n(m0T0p6sho_'G?\An%6c@ON6/nj`hM\g?=fY>+jmBko#%Xg:jWVOXAXLd[i?Q7X?7o%[Rs7f.De1NE!W<M^R1/J=%Z)J6"6,_;rgC[HJ@'-2Y4g5CZWQ?(1\=J82iV>]Vs2hb,m(@_[Z$^ic@/Kl>lLF.tXWM<LhXZ;#>;o>"4Ps>7J,WnnCA%>Aq$d89%qZKMdDsk8e\+<$aY>&gNG!tJ!@8D>TO#nj5XijhJ9"MO%09;\-*i`WSf\4L1gS;2b\(@auDWb(C=&c"n).=?K6urlC)U3.pk0IYs%[fsD:N3N0mpPQ30^%pfp[F+79T9m:#`F@(m@^.EYpei[^%7@o`VXn"UeS@%p%9$O2Cl(3Bm29=kZ1D\/[F&Z#s3?go7^JR_aePu!%m1FN^]n5&eZh?k4TAFtEdO=8<RsP#$_bY+]G0bKQ&jG$!g"trdp>JbSJVRhbc%?2n?Q=uJ27L.:Y's$SGVeVjc=UMa34Eq;6]L[f%^G!&Zl\$u7,um7\?/TsN.cQRLHhlIkFh+Waaj8d;BDi:%iVQg]3]OO&p8g/5Q<!B)\g@:^-/ni/CA,2i:2T^p-g_c4GL>=2C8agH%%:,D@lY>MJRn9c`'onkK)p(5@%bZ5Z^V3!saRusX%A-%kbP5o1\$!HVrOUK;f0JLjmi!_7]@:Lok`A$3H^E*,dke=@PIp-W$0Z,i%hJ5X1Fgf1m/"3UiQ;5ZVLna.&L,Ls\BY(YD1>6EQlUF&JIuWhUnu/;IReXJ#NK5WZY1j=-f8ZXHJ0SDGRP%i?'2-rnC->r]?'CgJ%]Ke?KBY('C\ouu&@AE(U"N(H$SnggE$--<f9@r30Kd!5URUYMPY8h75>uR'mIi2*?>uN:[-n1-"R]]4AFdCmH7FO,rT93PO),8^.%%M!j'gE')@<)rtnb!DfeHI(6BU?S+Ul)lgPr<1#%1Nom6\u'8-<Zh+1UZk/Mc7ipECu?f>&f_c^7iZfMd<*Vsn=u#@CT>1sjAACq%22.)gL>7n\dkrT#A%bUb6U]B\9SW!7$;Ki.FC9%S0,tH@:"LYRb'\U8&uP>'!7tklc796pIXgn\EieRRmN!E.hL","3X7ikNkK;6%jp7D<U3q*!%GC$$c^W:IYHDSh)XXq\T)*'-m4hCcQH0TFT4$&`$Z'+Wk+VHFc^d*S#Up<jC<eGUSc'7El1ho`1u<AHqIZA%:m`;p%3plOo7MEo9qN.C)%<p-2%mlT/i.'7q1A>/jhG>6Ah!pj`]g_L-Vn!2@bB:?;*\,E?/Uq?h5e:C\"L%SJ2^c0UF?m5jGAYj8B:.,_%C$llkMUb+="%FQce(jWRakaT@H`+DiMgao7GndG(cJRum)1'&=ok/bbE>Ijj:T(h+AUgBmL:/jYm9#rEqji*hlMEAnH<rh+lBH4b%:GTb4:f15rlkW,NW:+X,YJ^^aFsi=<H2C#!CUY:_/HYQnf6AM0Q<MTC>>NQ0nO-0u\h^i\pL4uB[WMJ$Bqt<TH9Or>W98eS]B72T%+V.os?T@@)6Hj]m[[u>1[D!EO=8&S*'_.^"@oLuCJQ,E`g+B/k5+Z%Zft`0H1/>J#=PN=50jq&q\TIRI!O8rTCA>q:&meD"m[.KT%n?1?Ar-g]YHRbNU^%V#j#&.q_)TVn\T-R-29t]#3qQOaqlJ@XP07T$POt]mq/q`-+hd$=%HCk(n+%,+gXh*fDh7Ys12M)o9[9&6@%\uhiUXqf8so2sP7-m!P2@;pPf_I;%m#(JlB$=r@E_i(hP>V2O\qJW![k\>\3*-^#H,.AHXH?qu$5)0"kg^T@SqAL7>Wf`@o:5dtr%iGR:AH%R-0p.T`VM<EY48R,06%!Punj4DUr=3^JCc#L5D-,X$?=3],aV,OthIK<TrmM\I*4,T:DGDLqf@LgJFXb!mP-9cW.)>$m6%?BL;t#U1?P4I4IjSL[Xb26C"l)i&`/&6OjuZoC*HFKti<[(d"#,DaH1VGu%+%3=>4^PJIejOFd%iTk8$6Pl@1oq5fs@8&7OH$nI1%AB"A^F:)N(4f$fg\1XsTp9Zh\"`!r(G0=jEHL'u$k`m"K3Fi\bY`E4[iQHD]4IBN4?)m`N%/;<%<A<35>-&$bRnKKnD6Gj?da*q7%UjEgE?1cH6pT=+bL-FiC)s"9KV*8WkkGP;PWjLZBFcUOu>cPN_2m`uloA:DWEZrXYGl8I\9TiIiH-K44*<J$D^@>68%R&Yko&hr8%hDnnYC<qX&SSk$kYH')cUA&+[5MCFiF7`r-c1^tQh7`0oK<_E#HV5`US+i6Cd>dbn+3Su-IYQZglV]#>gYncsDk#eGmYnpRO]08C%&]FZ3?$RX';@j?tJ,A;H>7b-;D/SXaq!Y(La/1OuX$-1F@UeNDEbhGtcAR$F>8kb(qA:qnr@gk1@uj*'(JE.h2%SHar.SocKVj`'%d0(i#^E)*IM>`p2Bamcu^\Xn_KCJ$lgcgoTK2ohYH=YW#No'Jer&\[&2mcFr425.8BGrBYHL'M]gR#?<:O<9(4ae>IbA%mNUURie%N>?k,o"o.::MX`<GN.BYpp]#B.nq</b2)Jb/pVXP``KU8S:+kh0q1;H)MCk4E-JI6eoF"JZkI@7H'S,ES"-[s0)+GXmnmXNCNY>F%[?.c9s83nC99oC&kgVl#0^[7gJY[X`bUd\AqY@OUQWj8gP+GAAEC&opFJOi.h&=MFW^g#lZX_N>;/,tk2!_cQm4ABu]'Hme#8l@G%T7OW[H]50&ef5X);uO"n[!!n29u+9NrdJ&,\g4trW`_,99Rl>r:.VORIb2ZkdDDMV=a$I..3H!R]Y4g6?5qa\l["I*cId;/rG?uA%Y_*#T@=&-d4>=-df<pZffI"5]FmW\CjrLV+qn6c.'$Ki(gW-H]0qI@DqJ%Ta=nl$&a%(Ru[B)?II+H'5;6ulA%XO2H.u!f#Y=>93%=,au_Y5rjWp"nrt1FL\dd,2.JWe-:n[6Jib_.;_(V+W=+01,jP"M=V>?0EMoGTHV'D@bkh=<Lad=cl2mEi*pg"oQaESV)K&XSVb3%#M.On/s1;K[.TuB%aqlR;T7GU\jZ,AJ>%K:^$cTVfd80H./PIrS_*>l@XlXsHY)S!5E>2VYH783]m%4pZ8+^WI?X\Sn!=sSN3t%d%)Ig_?PPbhD@nCHI[;b)Jl&]BT6iJiS'O]+HWl4u3HAA<(MLdSK<OC?YUB%pG!&EXXd[o5O#-`l!fc^^,CCFUK/7pJTdQO@3O''d>%;1Mq^!4tYPZpt.?O0NGjNkq<<knsR_OH/+>qpmh5cp\An(:bVP>rO3>mu2(X9$0)['lM["Ht//a5[1.@:!2(LOmPA(b1B>-7\,c^%X<0SF8Q%a8qCi$.J!uV*4^6JcPOc-DYIm>&^.O_%P'>leW:U?UlkC@SoD88H1hH>!l><JS]RE6C_@;XZY@Y^5X5>>^L;LTPfCu`@%P1Qn@T@-:$qXr/!fD09^5'd+<^(#4u]RE$aZ00k<f?ER4gLUtl3C]._YID=(j?YUr?GGcE_lS<H2PhSfqXsPp)XD=gm?H5+pX$pW%7[)GB'H'14kOn.(+Qd.bcKf*FmWuQ]If6p.]fjZ0@hOP*5E`/s0),^EGrB0CIU9ddfJ\6EXqd5Q2\ep9(T=q-p$8aF>"RtiH2[)G%2eVe&4<NGd@bumcldn5!hf\M[Fh^aeNu8fdY?t'a0T&CA7:&3m:he&:-Xq>()kPJ&X'ae/EK.V[4g-'mgXg#@]RC<eKg4Oq*(=2K%hHBeH':$#THd"Ff*T+9qqXqSdWl9i*RFeWd<kiG2iu9+4E3FY:f7(]VAb@!65/+`tI"uBqH="@HE=\&c[b&[ff+@[!SeMpA>V!"M%oNA>0oc#Y9D*\+0g;tS\ldtaBGn\L&8FlWM<hfoAa#ACKmN<V/#``>7<kmVanI;Kk2ne'Ecg*Md._]XteJEA2Ok6d\<kf]<Ns"M:%]/C\qPh3+JR,dqnp%%rZqGkqCLO$;,.BhV?[_<pUqR+l%nb%WsH2[TYN/T*e?gh1>VY%+K`]deS;bL0+!T$ST*lB,(T9$'g)L/jt%I^$J69k&Y6@\_'2f6\u%YNRD*qRIJZ[-#lqL$KBC<6skhR,)f8]RINr-6$9_*$XP0pq1fO^Oa$&HfXkc/JngUG-/E+]`l=-:#_7[%rE?(]Zhh)cN!u0,YP4%$f[OU*qXsOeDN(_=,-PA>N)?B9s1>(E.J.pni.TLc_rp^YboE`\SAXL^CM"%]aV$=`Ya'j:8!aZlkk0`\%R<IW4o#GdiYWFbnFGni&nNI@cXI?N/%En7`>J[S:3KkdC,0VY_#_`T;&?%o6]0f:,j2&`JhTfGe0.p$bU_p.QdM=mR3'Z"2GK8m\%Sj-LeS6EH<^Nu:(9saYRDtfTJ?[\C"4"\Ucos^-'-H>L]cApf<H+#hToH@G,I/`Enf$oafcOZmK^\q<ZSfdknc@:4%pq$"Uj.gO&%;u<K=bOX&m]tZ4mX$?L]4TG-Ihk,\9b7Cd_*q.D"*$9+Ec[J)N^HXo/14T1n5P&eO0$gGecV0t'a-5Ns^JB>4:IUK)DU6$W3-dMk%c9Ih%q`B(H&:KuC[<6r4^@Gf^menbsAR+,>r,_l28[8rq7-eX9cAPacdI,9:O.tINO1q0Ws1?!iIe@PpqI4d0d:XHo3(I/TrS=&P%/KVUE,oNVb[qPYMIXHV7otemdq=1Fd->D`+FeSTY[>W512`l3oG#n(7T(j"]-BI*W]t_m^-gR[&Sprhlr-Q0J.sj,PlI#SnNHB!:%ENE4`QR:m59tc!2=ks"%DsGI9h$;CNTAO!Mb$,C_Go%G-bOf\!0gE2@*O`rbcGd`IrPe<uJ);nh!9Z.G/W\3[?-JfO03s!rqAIpd%;4M$@lTIHhc[Fk:XQS%_[smXRqpiBp0/o1MkI,oXPf`+MHeWjb"42f62Z>^an`]CIp@6OXRBE^]P`sG-CqbC<F,rejmiBYkRtFH"%1Y6eWc/??Kk-l,'Y'+FNmb_+#+'.fGrqgD4iSsdh55F`X`:NQra.bcSqm$bbJ,6d54FRo++r9]a@$n"0J&LZ.'2)<,V<p4>8K!DO%dq"dDKGiP>%=bP)e":THTDaI.2\u4T#AQA,TRY"GGOBk63M(Z2+8te>j6O_PKCO$HpV-"X6M0T=qdE8!YW;C0rNIDo3)j8)VVFs?%nu&[ls0s-pn\aAIrGVCb8$b$M[<jUta^Oe8nEu(.'Dd9%j@>.!V`u[D@`ut.dROlR/=icRlp0U'g=6)s_j%5!l+AJ9q2\^t58P?V%R=q[tZU_,[>r%+/Z;%F`Bgg:eX-:6;oI!^eo&d%u2'lEig6l;sq#!Vj^V3gC?hJ6Do#3N`@`btibt]%:rqRPDf_.WlqdJN.oQ!iI%8JdCY)J2EbX_=8%m;f&W8u7Q_$s7?lW`@5$0CI%+hEK9:%[0D,oClU(bdj0jo6f?\jJ03\mb.&]MnAki?@DGb:![-oq-bZ0Q.S!@%CMsr!_H1?Al`E,?PrShK-]_4*f?Zh/s13ORJM$A;HhPp.N<^Y?'2c*:J#3>LE9FP0!>q:M&ch)W\HDlCo3c)(im0Y_JZYtK:EDG-%J4ffGhMVoiN)B[%HBs9dFR0%!fm+s_UbDbbEF)ba24/qZhd,1/bOaIA?glrQ^13et<6\76:!/7uJ*(h7m!kIKSl"7Ah>F,"TX.Ff%eu4KI,]A4>^H=I0o^k_(`t6RH%ThLF)Fo<5]]3;Wre!G6L$<O!G`HFu!A?*?/Esl2YR:^-Gd@#ZbpcfjOInQ`!*/)5pGP88\GHFu%Q(Rf":AihFdKA9PZuehQQLrbfgNhRa],U@OD@c]_)_!)_/7;qYC^/Y)AleN_8T4iWE.Mp>k_fo.[)J:B4Dq"176Xh+9l/[WJ.J8X%@c<Y>bdW^)An;,Rs)(mf^n!TuDA40bhlLJ5UY'X%_BpV\eot8)=T(B1`@BNJ^`dp!Hj.p^7(QX&?u5-$lR-m^(&uPbBo]?^Ldf\u%D83]r(uMq'<l'7=>!R[TA6Hc7P^^/RYkJsS0l>@0D>g\hIiW%M$p!p`qor=KqWh(PGSh`n$3*Hto"YS0i@'YOT6:>52YZo-rbNZF%fSF7&4oFD^*5@8h-G.h&&t$i#\g0da]XSZQ0=E;P@9Un('(.K,Z)PiXBDOtQBq6-gf#;\hTM!Mnq3HJb.B?0Z_Qum]mpc!COQLMf%U_b4$-o'-`<8h32fQ]:JM<#lqX71d*q-D>C]_-nV!.MU)m.Uaq&3g[I[4T=;lU"R:JLi'@$c2SBmcBLj[Ye)PX-i]Fq<VBk"_(BM%VL&!2Xbqg`q>fhZY@@%5_cWp4-+uK$fJ'%ceQC?f\V9_pX),_.KoS%%cC5g=O6hKB?_^Ffrj\WTC[<n!"mqd7qj_#%g#&mDE4A"X%3qY#;rM9"A$-<7a;`?<;#FW4$mVW9gHu,f,T)U1T3CO<JnbbT`c=+^ZnbbT`cGue3iq\'JS;[7\,G+o__RXN[9o^9SE'>J6^Q3>O%CjeW4s%e;hfZBh3?5(WW611',QB=.c34sPoA&R?nGB`:&cIiZtr!sTp!sa;sS^UkB1(u6Hc7G*f@0M_*BoE2kMiW]>g"W!m*J'Qq%oI'S"kk>_U_].Y)q-7d">k8($RB&FDQiDJ^\R[LHr4B0g:R!)q]Y49:l!>N>J,*d89%!PYr8E_tqcZ2Lk4h)9SK-4&D0=]F`%1;/%n@l>&B7ED.HZQ^B<+kUtEg2%0?T2WFMob3;s4lWY].:3=rPHb[R46@CW85@Z!X+:^O'*[@qgWBkYi!SBYWL?4H=Qd(e^)_9a63JO%rV+p'KsBBBbBND*Fnk:Gn"'(!dheq^mrIagajo)/YKIk82jWnrhn4HR8@M>iIXaAkYs<om8&(.,C^=S;>hir"]8`4amVVo$mf(kN%q/#`Qej%R0>1KQ1)t0o';=E2jeG/sqO#uB#VeU^/iS4+ipud["OGkenYnS-CrZgc_D!pH:l1r#nmJ2MBYI=/nO$EAJ5)I,?cd1?q%\)-JE5^[c/?('DMTE"WYhT&._H+q%u^&WYS//iAb'Sk'1M-M0IQI88hoG#FDQaatImlX3](b`/G>;2AbX^ZR'@<Q,_d0J_':F@3C%c^uaO_B7@L([o@N`YT]1hA`*aHh/6OH==54h`kLSot4F/:q:K8ddJ.tgLL*@2][H(F'O6OIpFj6UnMlp->6%JJdcmI)+?>Sb=4QU%rH(0>s8%1*a!V)G'.8P6>a`FMfJBOs;'<CVcknF<JpBTOq`<I.FBR=7*$,/GK&@oQ:Qq9Kp4l?bnc#H/RIEGV\bpd*rpX%#+$T1h%GIsns*g82EDD'9HcjK^sg>9NXKZa$/BK5I:5L0BmrdG#84B(l"0_fY_o>u`jqj>#$!8A[*4U4CAoH*BX<4NAl[N6,nZ%PH)QVhO*%J-Q!J_OlT_m@7=LjX4tVa-C'/Dr/#r[K1&L$1uZ@K1/SBD(E!RhnY1f/Ut?QCZXlcl,0&RgWB2I$AGrN:ZZ/L]b.QZ5R/V-nCOP@%Z)Kosd-k57[=V57ZO_qkA[/kR0n&n-li*7$EB[)eYE^Em0=2E<o^'oaS!I?.9&.cXamJcs0i?4"-Ej$PQ[.>8IN>E6#PVli?bl:C%&,H,hYEei>XOZK00rh5Bn*irHab4Jk]fVK"O$0*%4,/bY_#LL*ZbQ#(cf=.tn)t*#qrM%`O;h6qn.uVqn`cQPZI>l#all)KH0=H?%$)>#D+r3XTD1=<g%LtR@bIne2'MgB2TYS<$a%'B//<`X/cLL1OA#P<-!<h';&mcEi[SQ)%Ir&#LFD&/[RM"b7h&tqT@srjbUaEn=%?6@!<S!dEaVg!iL0b]H#CE!Y9.2r#,D.cEOL%cCUIi(Q#_Oo(dlbT.L;4S$od5O]'Ud4<AIU=n*WnGMbij,2mOLB46]nWPY0Pg;'%-8WF5I/=;_f,.`8afUH2k5>/&r[VFGfmN<MWL.Jjq8S2uJr`j\$EcQWq+Fa7<p[kF^!R@jL8j^nUGHPM3ij3rP+sCQ/6hZC[qEuW%TeE!mmhDWgYVq8TkBL1VT&%S0LX(D_n28'G4j2KU^N5A4R$bqe9:\ZGMk>4KA$l,g2g.TR8#N8a"'Xr#m$R%>jBD+>muI&p/_Qdn%o2:_h&?5HLn"6'3Hhs1sWg^LX+&m@YPmc>0Wkt0iDP'(uGD*<t`bKeJRt#18YI<%m;ki0FcLXB$V08mQV=GSDk#?a]F.+Z8f<HDa%2qR1AI1YPL%[O;4C%<49%mj!]Q:j<h0T]ft2GL$Yr9c<Kis&>`idGD,b:*s7ls7#0_q[0#kXQ`^grg`t^H`1ga=3gjO'MrMj0r:#%\+T[*C[,!o$0,0,RAT_1?-2i$^hofR]Z_@+odC\K,R53Ag$!o7P$;\shhpJS@j%$9a!/'Uq>WgEgcPa<r5U!AY"OZY4[P99;OIJZ%,aYCGs%Xi[4U+6`'?T_=-0ol0g>W%\BRJFC61&W@>(=D6i#C2ArqE>-_.)%9eGB..`W*'"h1f(DYLN+9Y:n<<1c@2paRdm(X$9]/%4hc.:p"s*]TDnTWHq`?MrtiNO_>gAkFIL)H_uun2T7bI"1DbO9:G-6t*;g_E3aTOII_#.?alU:PIsjBXh]"'O]mb3FG^o&!aphSG%p5KsR8TYAPiJ1RC4WQoYNlRk5GN&R/s3K?Jf\G"Z*5UObM8s*<G@>*)27i;hrr39'It(Hed4G7eqSu^VrIdE7(]JXZs7d)Ns4g._%4M:4XI<=KW<rHhc?7N6;f/FIF[ZmYg^2X@=NjC_=d"-_1-!eM>5\_`GGuQ[hm_`]e0(Q);>;3`)7;3B^g&OD\j!"f@d/^]frK%p?%m`!MWJ&^U\EE]]F,R0'RdSZON"Q2KOK-[^&2q"O#CBgH6(k>:-WUdjH=Lo4.AQjC.=j!LAR9A$rc343?`u71*:m>N;<31sZ.@O3Q%HO<$#k+r+,W5+IerZmME1\"T^_sdY(\`0U2io3G9'J#a&hjK?/*'p!k_unZN9GK%@A`>g*c/e"iL;R%`&t+g'%)0^kQRXL[6WmIJ%U8K\+PnOe.1^'30gpF2+Y+RG1cAKgJ3.t8M=mht's!KQD`<FJW#EkoCL7t,rGpnCGC"u9$JjuJt5"j']-Qn.4"<bu7,o.O@cf;M@%Ft(XBRV?)J"iKnP%#_#k%O;TS3k;Luh`/-De;Z'T!Hq7JqHgu&SrNP+JI0OmNH5QpS^:KGb2NEBOK@@AH)SsH"D9WLBK`XIPo!Oq%T#YF/!?@UZMDFc7N)hI_)GkF>A2iTCa\k**S$`b'_\'_($>;jSL"R7SN8eZT`,cZ_oh07:)uucIhG(7Mnf&nAL,9K8>V7>!juplA%TS.BJj?]1X.;?2_()ZuZ'eMjoAD2bZ-M1.F__>9uNhpGOdjd5OMH!GW\S3KGdL?#Ic.QV-CPggQ+UCP?,ak'dW.<!O5S6kC4lgc]%!D=MG75G(!L`#\]fDs=#qFQH.o.2kallcPijTUf;TT=BP!kHV+l4V>iQu/RS0Ye<5m7]c=?\*f@=r^gQmj'OH+qbXM2)AfoQ6fZX%.WGGI"<TW0#[@[k&UjdZ'79<7>B1u)3g17h0$:]lg01LD3oM<?T>Gs\@s&?Q.m23=<`iZlo6Jsl!mG$sk%:J!oUDeOXi15+L[#K(%d2GZVS@8`n`,JHXTTS@d-mSS,C8h^,,WN-1J5%#]I`%^"PXNZq6BhR8"orlP:KE@Z=5(OrKEX=lFp+H`/j4<,O9QV85"!I$5aiS<%+GtaB^u'jsL6(O$.*]l$#*tnO0rB#/WW?!4m*u09:S]I:;P`(op_S*WV0$O(P2`RB*.#HWM3%c_T]=f/#7.+tleiFV-F'L+>Cs*d%)$OaUl<_KH;-1g]M)R5O+pch9l%aR=7a.M:ZN1dUbfJ"M!C]a-*R$9(W=EQ$#D'[RA6Ku2A;-&_o&W+qU>.ElApr5.@>>RO`sX4=%c#NacP2n**Su8hjJ?gFU7tP=[!#RF4dg.o8!+hH1*e:Xu9.J(q)$Pt]=96p'Q+-lT'sO+MIOIdHaHo/^aA(DT#=[6A=tl+JP*X1<%1b<0*KRf`u!?kMmEP41ea+pSt_(dF&3;B]Y!Zi8rI*dXo=i>.gmh#7j(JtS$A5P(Q3^U^r@ttdnUKI(nJ6;0rD$U-32aNWbnDYu3%'H&71KHXp3LLOA:LkRUY0HL4?"k"uMj<6`-i4_6dJNuORb]k*11S:Sp,@K3%H'#CRluO&2W<Z1;>aB*Y,#OdZ;2GCJTs@MW)hr`a%Ei:=&JK4ELo@a1E(ig%CBQuDWHj-N@%Y5'o^g+oN`9@O0JKd>]<QkRGo*Ge2&C[sse5@&:&/Du0!RTs;(b#XfN_ABH3!;[=(i]AH%;#]ZDXX^/'R\OD(=uO58"&KN23fu[3"su?jbQ3Z4TJIX.LK$T;U@=BjU^CCYi_l3?N`.pd!!$dNM@fJ/:'B=KEFj-h72_1l$H857%">^'<r[&d$*cNT*me3+g3-_M+klc@.Ppc_"'XRG!T_.H'"O!A`8MG+<%K_I\Mr+RFOP)!^+n/jV?o76;ZN/Ee6GRl*Gl*m2WDQu'%;Cm>!K9RV(^^R0_n8o3kiW)6'f6kLJLaX.k)b#IBC9SkP$CQW\J<VZn`cW)_O?C'N)cA)6`$quo_;3E?jQ+i.'pt^!o!X<g?/f7D%XBdNHB&,ViA"7*hSFR`a96i-hob`aQ%_#pP$mM%m&R1-;N_jroJCE=#7(PHZbfW'6mauQE"hHefNl?"9]-Cj#,O+Ur3:]e$3RgtQ%/5WVBNe>DTj0<1&cHL/LjW2B@C/YKjmf7p'_`Q!hn(?ft1pT/VmoZi,S_kD(BO#<D1kmtgP*_D6m9kt8!N3SWa=6R!@c\U1&/5Q7%+QYaU))2pX:Q;8@T]%"+,qNAqmdB8*Fa".rmU"X-m\o85Iq#9:Uq?LA@GMq(&4)<N8@lD9=Eg)Cl0^9`Dqo?\b5hU><@I,h[OC:?%C<F?=ZB?_-h-Fn?f%mAI%X%LkEr$`5%tG4BFc2M-O"&#)"-CQ;5Xc@9]VOs*5Z&eY&p_9L%j#b,"V;?X#0;W3*b*D*5a4Z'>(A6&%b3idb4ob`&PSRgS4K4%5`;r__n<!)Lb+V63j=%^/f/cfl*YR7;XBcCd4@;Z)XB@;#9lQl3+bBE%Jt#>ESgXUNQ'"n*U&W&M&lFAg%n+`gd*$:FWnPQA6b6/o@Q;j<m_%$IV?V64sp:&PQIXn$MLVsjF+pQ?>JUe`Z:Jd(3=s1Qa@M0V&RRDLWr==qE8r2+OF<;5L^OP2n%a/hKZ[tSNfZ_S:H:mPa?:>AkOb\]LR\1L`Z,_D4h6]n]+'">iZN!_/Z\DB!MXc4ai[OJ.qL'FGC)MJ3E^n2=OLB'lodV*4'KQH8V%Zu6Or,q*35N<GV`iC,>.W5Z6a^^2o*ZMiAh;.R0.Pt6EEndomIc'>FEmVQf/I_[C+IZfT3K/82O4:+t:%lo=qKenn2=W>;kb#dI#%EV9<IVnbMs/<8>MJCsc'5[J3A6IQ"Sr\C^2VP#&GBaN$.fEteeIX&XKA.Ps@$Yi7S8KiISrgk=SdkAnSrn:PUA$SQ\r%s71AZuTJ%r@:=e,n`[(f`g7$d*4P:![m]rfI^nk%WG^8&6ZfQQ6[4s85:ZW@I-]#PS$8:[8b0\Su`>;9r8(#4%#sfGc?LMB%j1[IdKCn#5qW+%D\a;F`0Z$deWI**H,).2&,D+j]'a<a*!>jFZTdSMRHK0/AnYo:;p,R```8=eJ8";'XMk4#JU5E3#EEhePg,;"QZ?OSTF)(O5b(GK%WFm!(O=gY&1]rk!dXm0bfRm)CrYaN\"m7$r?5Enr_nkTSZVV2-P:%J^Tc$aNBdh#fb"rhlhLIF&P^uFh$hZl-/CY3cYttrkIL/iR%o+oENJsaI\-t&bJ#KK.W6nB%`?a(YeG&V''U,[W?SnF=G19!-!0FO-GZVV/M(5eAjjf&El'BasQdaT%(,+,D!/9B1lJ1B_%mEBCb%B%#fb97]AJZ0IO`ZimqDd"-';:f0j5Sh&`+r"7K=!OnO\`"X&=i%Dr,jL6`)9"GRsTC4C6;B(cFj7oTG".nTt-GUL*RDiWqAJ]U>%END_T('_CAb$$nMa6Fck^fZLe"kApFC:=d]-440UNdrUY%4PQ<49ic^'i_'i3EeDb_GbFSka'Pu*-2!'>[=MgQV!2&KC?GT*#840%4*EV%#T=:F_]?V4(]I0m;NU&]XkNL&aH5m2De%fQ-pu&/fAZd#_EHt,KA7VgJK2@hZe>CZ89eI65\a%ObG[F)5*EiO!(;*A2A"!/%*cRhu6<VDWI(J8iN7$DeTY;^"UZNlVJhg1-n#2JP70'bB#I0BUC[q?4a5j^8J]G&-pIAj%<@,fiR87NH!6ma?;8h=o6Pj;6J6IYJ%"=uZ1kS?3;emeq*#fp),k!Pu6+X\VsLPCb4#kksWbpL:8\q7)-bVZ7<kUql?b1NK)fYS1tXBZ<Y+<Y$tS!+&TB%nhTm9)Xs]??Un%Qo/MY3<6im"l1h(bC^e&.aT%u?L%Yh`48kWZ5[A.=)I%.HXCnN#)J:LQ<@'e5/:?0$a>Bl.-ao-;C4`=^o#R3YU`'7R"X*IBR@sj%hkJ69"-3>*.)q1^*!`I$8;Io*P1)+d-Um+rK&4Q!LIf7=+eUW/KP#825.R!L6f!$X(i*31f8O>C7+2Z3.el2N-cuP*&(S^OGmJ%,%cHSXUBI?*]R,,<Dc$Ij4.BAE0aj+1+"-c5(]A`0G!@Usik&7mi/O<EG0nA^r&P3T9*?YKLPnsJGPlSTH17b15gbK&Dd;jPSV-P"u%`#VfUN=,WA!/a`hn%q7)k+pA[F,>WQp'a8f]8Wj(ORKLfd':4@L)SE!5UYP):dE/K'm7Chb,(^;e,hC[[5cj26nll%a6!27.&@Q'%?"36.!D9(Qc36fjlp##m$P\AL0,X%$"-gga,\u%cHqe:?7\`9tedeW],d1<.lV$Yi6s2&UGpG6@1BBK_>38lb`#4D.0J;n`NJP*]%/'&>H&F>A9)fu7O,.c#ep<M#";j"?iI],t<3VYE?)Dls@3NdO(HMN(l</.g`JQ^lu#Xs((>nc20Q(\R\"Df:i9>NV=[<0:ULj)S`%R!#'QRaP0(&4Cm%&LYHm]2X+9pl;tTWl&nl3;BnA_f8o%]$ULS`6sYWoYZ"87.HFa_)%osG"-Hd`QgQaNS6b>QNjLq2sA9;7S^8^%ah]T@@4=DPY,F+]MGm7QS[*hubFs`s0<B5k6`c6J'S+JN^nrYAFUO/0.4rGSOJ+,<$qk/($[Df9]M-Ph@#m@e;Je:>j&/Bi'e/T>%oVnT$'@pO4AIajDfmM&(22qi02c0o^0K'l3B3g%lCRr7omoj269q!a`FU%HkK[p"dcqTc$aSPHF@7=E.lp,"d3nWSRPqeb;*EH@!%@IFC'=CsF7ni8uE<ALFsYiZ+UK5!6$>\s>0,GI\Uic*GY/#bGOk!`88?6'\Xk(_WDnSlJ>i)[gf@$hhT_e1,^68Kgb/qn]jOXT2M%BAm&DF@aK[/>YW>aCRd?(^FY#ILD+B!NIO]7Ua]5'>R&/6n.O_$hEu<<=Z#qLFh]EF!`X1ToP-Q=]U667#>AlDO9@9h9j>R)'CK[%$OisAMQg1r;hi4mXUn(*GS?>fGm>0mFrjI[+;M-]W'U)E"GAC.9?STE#[VnS"a@dk--E`"H'q;o&<SBd"@Lp[Qn9g^.WS^&>A4Cj%JEE!l<j]okUp3b9(_,>,rPh;D$kTuT1P9<KI5_Ni6a?-V_U_g5AE6/Pb.3S`HV.f;-smjZrg.1;>U*X_WKm&\UR=ai];D#K/eF"D%';keg!C8u?((DBqk*2N^K'a:aS9Z@s!Fl?DI1=/.V*PL9V6Hqk8^.#-.eF2_=+?$V]G,US.BS`B8TpoWSYhL#MaonmopD!WTI*cH%EQ]fb'99g>Lf%?t;Qf2cVX!rhmr)_^cH=3GF5F[S\8car6MA>i*73TmfQCIK(dV:sOi&DQj8rfr?>Y\NcGs#1ZuZA)?BnqJ0cI3o%3kbqYe%h-KDb,H=`#3!?FUoX&&4GO!?D&NQ6NgqTdNdBd@)(D!P#*TL7GuAK*::TD;AOPoh_E-202tlmq\jBZW<:^kQRLdKl$CR:%6:li'K?U%U0g\Bn!6OU`3@qM5dYcciG+cp_E1`i!NXXo5"GdN!FJ/p\mU>90X>R0oBslNDX,//'(8pND*+aD0js>n][#//1F=>Vt%XN,$+90q/E>;4,<-4h#7lDD^40o1'R.^C,`jJ[[tjm4$aZY@"B6nG\,g@Q#l@PnKa6%G&n`-fQA.L\/MFOMg56>Bf6"lXF$+A1`!%D`dMT6A1UojQ%aN\^\*-79guP:W!E.bWV^Q:b^k+=q1\r`C0>([Z7:\(nJ5,di*nB&M\UgG_k`VfIn8A!I7$u:>1A?<h,T,Pq&)/%,qmXW8JR_T&e4_JPJ2rrhG?o:&^qV%mT!HOoVIF<X%GeeoqBlLiK4eB6$JOU8sq[sAhj+*;J<Bf()!qTIF<ga`S;a9:Kb*//`K'M%N.GLS'pTUGLH2eqpV`KLJ`=b*QM>laNj`+aKpg^?F)g"\&5U;/B%[[*k[qZbq=_`6QQU!1PniGQ3sJ_+T4_PFGg7h@gL6-0TZ/.S%MsQ7r0$ml6i,b_/`VkXN4<at^0Z/%;VDoA51VlI@rWSk8K2Q_DbeL0qX73<[.>(ThdJl&P+rE\dM<@pPUj*-.<>IdkIMH)pD9:4t%.1g][,;?;g!TkRgl^5!b$&ie2Y\-4gKgQe'3lqGa2B3rTcru`e_:nZcY/qjT6:YFX?QajZAK0cmV4?iuXK"mfMl$s+jD,bNA"6es%VkM:I.IM=@i70uBPjfVIp"4O7^!X=O[7e<V8_]S(U*[d%A5eTjChjNd.\X&cFh0Uj^F^1Ha=5^2m$:=apI7UkKUOS1N7Poi'YK&h%Cd^BTYUcsnDI"]UX\+4V#t;l@Ub%KDj"Y<q_O=)WTchrECsP+Z>#>_*c2gKNZ@G3'Z!"r^)L3ScZ"`>V`dk=e,o8)X$gCiS8<cP/%>VpTP\sIK;)"1b_@i#:_Q(So.Yt2g?b]cor9ur3..L?TL"e%3EV06pq0!j&],SrbP-aYX#R8uopET-A6![-HmjY8\I5\!]mG87&q%-F#:E40Jq=o0i++0q$L0Ht=J7$O%^i<++(U).$K7CkY=hF[c:`\NihQo8J;h\Q!>4U4?U9R6d"WeZDDjW,6!`XqMUPk</&Bb7qu=%PA<<*Yk,5,gO(Hu;M)pf\I^`%.U01nOaFbHgm+Ue82!>\>q+IA*ZKa?R.qO(H^,:'@aTJR';dbAM-TE;b?W"e[>>:n17ni?5G8*J%.O^P7kQLUbVbT7!QZ9?%/64;/Z_'Bi=^jOK;]\]%#<Hsi=.B7b(J9t863S>V53%CfH,P!_$d?09$]H_\$*e]m9IV\I=aJqn\s,)G%>Lnp5i"\abTOXIYG:PmMK\c(^gWGqAE:D.YKcKR#%.PVic%!YuO3qVd_S5aF7aCa-PBm/C&V(l#_5:d6-9q^B\fR2iTki6F1.1ZO%p0nR1>1^_J8gCDd\?lCD*n8!PohAg<g_@ISZ8RZprD/8QT`C0*Z5\l.LD5^e\NhhO><ruq*gU7[Z`?ZCZSRFoRpuL5rR)PPe:t4F%oi#=c&-;q15kri:rOOB[E^F7e;]V*[0MX23k<R<M]?f$j^S4Z"qklFf0";T$Vkk0c4QnNX!!Og8Bl6)n)ki5M`e"_:OI3'_.=N5u%Xin#b9ir]h<2CGH>m>4++Ju9\D/Yrks&cPqCh/A:+(p[treTW9pi>[u!dT[b\n!MTQHmm3;he/Fel':":)QN#B[7eq%uQN-CieKe%mA65\?(sO9I;SGBcj_toRk[tob1HsBgc%gChD]^RbW(<L[UK0Bb#rSuWlu0$>"4Ph`1@m=Kp\R%J68;'+fbn0V/YIG",QBY.L_,#%9Ng,5+m"5B\[Dqk\b?@c"]H4IbWL>HbT8?XE=RsikQROCn;m_62N]L)=_6B-4]luC3qp:,PBMQdCEsttPNpSb\YJ,j=F1gfD!XMu%IAiQFB,D(nY>ItBNOrH.N?b<k7>+BM096_XX(V8?ks>OF@8G@*fr>WV,[r&9O'1uW8#R)@LMfR+hm+s-QY2"/(-talSJ<Yp!THGi%M1M6TCb6oQ;7PkX>FA3PAfS!mGT+"'-R(GXH]mVa#gB/iHm(%5ETFCdZP'Ou=CR"tqgDrL3r5H&2e`U6LP+ThHccfO#@FfaU6_KY%>'f;2/@Ae=DE":E3V:Kr)6+fJ:b#[!MF]_&$H1[$4Q]3=@/McL'B\Z_*j]Yu]u=LGT9"C(+rE<',8R,!^RJ+\&OfN[6bGRtA"m>/%-7*Mr-Ym1k)k\[SbOM,6[ZZ`HIn#f`#:DlY<nb?$\'7Qf(COMB1(8KRV8Y"'a;$%/j=D_k>lDTik:k8#n@4)^=/pdq+h+Kb0An`[%?kK2pZ[/athqFMDk\ZCp1Ur%M0ZYkp5W'97TJDR*$c`jWKf%je%uP=K$eS=E'ZVs9;J"H1ZoSDI[ENnI2(oF^P%bN_.`Nup#5"m*%Ok>rYb=H`Z`u2o08$UFM2]J&B>lHK-NHIV/]&_ss(qF$'F9+=A#4rjE@M*%&M%Q7\L%bq"==PifX)YQpLJW?[4,3iXaA&Xi_m_C\%(F-XW7a-(=M9^(:7*iE@lM/FeMtJSHcH)Elr:.W>FP_cJo2Vip,"^jPIfP.>2U2S,2GDjZ>4cHoESCbpC%r++b0f2k/Yn3,Y&<]N%4Q::/,\HJ#!%B,ce>@",BMRZg\@KN'@f)R)"kZJS')'aG,5,cpA+fs4#8<FJp&G\qV8?ZbHl(K%4>*J(;QH#0V-K&I0X2G9E(Dm$%GhO'/l&+r-)7&r02&Cg'GrBKf:ak[_rQ`hG[goPP?J0Bgk%`<hrW6#-Y*:[W"FCjj<TfeQ/+&$>`\eTW,/.'r3Cm9R0c.#7nMW[i%R7l<t[\b'ld7\P`@ZQoFEZ6fH$PeunRX=.$f]@rXSht9BMHZ<-+tiWr]i="E8=k*I`A7o%0FgHZqXHI$OM%6'IX9#>&W_/p+u-u)%o!Bkq@!gIg`LSEaJ!Ij,b/NJ/1'"718]XEkS\d?o,639!O:!mt,>R;M3f&;U(>]tj.%\Pj&F;E4Kj$Ya&^*[,B))]TV;%uf,5d6[%,Jd^JXSR";SDN=kN$O1@ns`^@O]9q716TL8(A\ClO4aoP*1^ktW@fdipBslL0HT=RO"JkE>p3.-"8l[haBm.X2'@T"EZ_j3`,7)5%WFTtMkd@Ol2E#d(LL4hf=%CN&]q*'6P?:E&=P4?\qOkSpRS!X<,KLK0W[eW8E.OG33NPfqkNRS4[eG1%X%Z0c=cUMO<#]3;c+:jA%1Ok`j#^:]</Q8<jJ:iR#AWfR]r=3:..;tESVRV_s8\R?;RoCMCZ>isC<9f)E\0cd:p)IZtP^H3.kLK*Z$`*nn@&Zql8^&-JMVRJW%c'U?qU"d;TbfuOR(5#tgZ=q(m4+,TXM:2h)`c2]!b^7R*Z;TFii9W`tO+/061nr.&.Ya8rqK'gNl4LdL4_E"XeAUpb4c@$;Ipt-1%+V-3fIEu1nea^0`95tGQFl3J0V[UV:al=k_@?2p.KfEf%P_uRYi@8l((q.6(+iBb=Y!E:i::!*dfI>"T\<J'B=&^&Ajfk'GJ;+]!%aZ+IVZ:RDjp6'57m,(0r76m4s\L#P&;k;PHR>hC`V-*T&VSs0MUj\NORMMSrOenag&aRl-oOZ&YF(WS7C5BROHpq[bM`;dP&==o3%igVjSQX(fd[cfGqJ4apeMqTj<rQBJ'_Q#)0RG1dl`?*8%99jm80G5rki0B"EDaqrrkoC8X97g#OK`\DK+DtNlbT3,"OsG7Q$NIi"%4+)_kA94SPcWs8qnbL'=ap7;(c"@2%i>$?`61aNkQ.@#;8sN^@jGHP_#J*8M0Kq"`QN[+DM<T/<%_\C-Y`u5b+qsahVB^e$b^g"X%N^-1@O"?`D+9BRc6O/EW'kn?u$`_:sTG5E*9-51*3/a-=r54C/8Q1Hq':=7[dUVu&7guqjOil>P_ECH301&.l0V@O6Pk)2?.rpGq%("-Td><p+?eV<m$+QZQ]@?pG^UXXU<3:1'CmYP"BLVVOq0)2l8Z(##&UDHob5fhf\e&;>g+5<GhG3MAQ9dl`8QLi%VT*9A<?ulgg%&=W&[c*h>,2<=1@H,57A#IEpY77:d^7kOEK'LOHFV=s9uG*3OFHW$=$(_]i#DA]AoF&O[)X^fWs<(s?6334d2>\\Xr0+-c]JN3c\%BI`qb<2_?%3U;Km4dW#7O`%eG9I1bM<7YPQ)mL_LOhh[?p;@U)Gjc6/Eh.A2<JP1c/:D@=Bea;@QqUu$Cd2<*)YA[h0(q5hmp+6?%8gWf.J7'uN,!&<'3&A&f=(7J`fM[c^#ej[l>Z5c]T'U3t@hh>03"%H="Z5&(j[*8",\!R#M]-'0P=\FsI#pi^P!t1R-e]s`!b55c%C9mc"<!^mC;^t2=>Ue9G<_r#@X0<QP"tJ*;_[S=1V.U;t6pT98*c;l`>#Z2\\0706H!#k3bO".&+RBUb0GY\.U4R<&aMA<I^e#0/%0oNVLPet=4j5\ReeND6C9-DNt9jm>HL,JLCgS4j6aHFnug[qh:KlSikPCjeuc>(W7DH&*j@GAf>9iJQb1mEefi+k::JpiuP0B[!e%MC9lQ>.*2#_C^;VDG5i=H,5<:K\tf5%lZnH!6-'teBK`^*c?e0Gp:n15fANeN',lP7F3?tT+)AJG+FC-Xb5:mY#K,g.=8QJ;AoY>%o5LaK@R86nZGqd1'XW-TQj\Wk>;mb]%[%+MJm-oafhj/q]*#q@9RH,V0K.kc&+,jb>W'O+EJ1HB-XYnl"u\jM0<5V^;s_/]S!Q,D%`]PM:dUtV@NP<>l9B12-B(''!7L\EK?j@>)a.Ws^G7XgS<a'-pg+3X'AX3AKV!1M)F?lN+VG6fH;M+@Y*AgI(>aW_VEqe3&@9-+c%f=hf+c'"^rdQ4eiYW[g[;j9lD"8e9aA#(W/A3%*hQ-p<8N(@FMkSMg7b.n'pNh=&[llJ6R#DGuJZ5t;_MZ)J'j-#c4p[FNb>_k/b%B^&k;k!`Q9WD-LaqNpur4oZ7)6jF9#WI:,#cFh/$C\^klRI7rJFdc3bIHZY4!=KHf#";q^V%'FQZO)mfI%Y-sBj3;*`uN3dEZO>P%_!8fNHsbpqWGqSl,D^9B]fbO60qX%Of.lHm-SVU>kgFJmX6<q.MgaX)W^AKf_m-Is<!j1#J@6ec3/9YJq0i?F'Y4`p%XS8`X+sOn%KldF7^4rL'>_WmcG#53C>(tL.`DjHd?^^l^?:`,0o;4NT.[i;I%*!3>@B_iq\I%f14!:[i'7l>bMsCUH$6O&'J\;p%cLu&q#"$Dg%Umm^%ke!A@BBX%PW]R_HU)q7H>;Z%0elp5Xpagl_#a[,opk.N[INSo39&rn^fGqXEj];TFA+DCAV==&AXUau"&.L;O-r#.>W'9C)%9#MQ8YM!R2]G2,goN2Z!7UR1/hV"AM9-kulJpd6NVFPXW+F5f!HK'<dbaUok55_MKQkXg5&o`,TjXG$n*+Hm,B!:0]=i\T]ifM>.%QDGaka!]E4=E&P5:n>-\=.NRQ(=2+49m(eB/=2FfWgVpfcfO3:54N6qHq\H%VLm"3mQD!)jl=;I5L8FSjuIaX=FM\QB9T]-*nr7:%;K-oO/kc*nQ`#ol2Cho_?^pu?P<gS=?6+>494C@H_T0BK5fZK][kh5/$fBiBJW?"'5^8r3+VIju/<<pSMdGraF=c=@f<K_,6n.Q7%eZilLX6<ZB]?p43(-8Yb5f^b2M)`ke0JjuSkZCEfAFF]O&2;-]d'4j*-$#&L*@h_.E^n*DG_V*9KjB`A*=DrtU-QciLtAmoAp#Y`%N6m-9Kl;%!'ci5/.4K"pGaElS@jQsBdBbkL`FMtj/.?m1_:hB!nrmIh-gX/sdBRX/i]tQ$Y3/^'P(;)f4QbcP[Ab%FN^[m"=*-!@%-p.fX/0'TYF=`K/'c!+`Z'*V:,$''-%AYL8(.PToJW>G">R!5)#2CI=*NQW*Kd`#0&k1^h-6[Eh69q#FBC+i98<S!U'>&l?Q5Q8;%8ep&l<jFSCK\`s9N1@BhiB)@/oFgOOG;-u%b:]rZmC0,D(`T&`WncER=c2>qOVJ5PQkaJ*(Gfk"M9/I:TB+I!%ugF*0nCT\V94-5%)R^04]?n%(6)p8V?;E2-Nott4mh($ui%[HV'XQ:'D4&'Pn<aqs!F_I^'lYlC`0u4X(^snrF2Fat,k+)o%e7"0*YWU$HA@J@k1;oE%FV@g3po/<b[MbhC`$qI'RTf/#bKNnD3/dulh$3:YN0LIZ3jP*L'W$dUKO=>TRA1=&.FFuP_Q)7>Qubb@_PG"gHgH>-p+C\+Fu1Y2%7$_j=Re'#U`+O@ZR+9nh6!4BRjBeV'A*f,:+bSFN]F:G#`\EcV+@-)B-]TB$/J52.9?_)?=As/X9(Pl6ci7IXf[\Q<9"f1:l(l8m%>WsSk%kaPTJ@Q[HSC-Y)Qr?UVi,s-u)'(k7X)`>44QW^;%@EG)n2)4I1NT=c9>kQh*b,p*lcGDgZtLA96JTMJl!R9H8u8+R)\p%E%\r,^9ir,m*Y/8,T,3B._78"bdaCbhlE-0_!+q/5rmRL16^d\>E!c_Wi!CjmJLiD'C%N*%U3.[QW:t9:E03:/#Q*?M%/l@];IT[qq%FfgT2iZ)Adgr54BVM;rOPh*=7!bZ1op3N&m<"WW+k<`.IpJukn+(D65E7ppKA5VGfPhnO>V(bECP,c5d>`>\u>`>\uX9OUh]@7`B%*^e3sR9%C.j_c+[bJC4cp55VI.P^Je5#`^GU0?GWrkoP;\_7Tp0gi#^j"(s#q]_,_F+A4+9Rp"(%+aL@#Y)DD]joME=rB/>/p+6q%C#=L&E1UHeEJSA3lP2!3;a+Y.ht0,h&<j]BE"C1=?mPkAlR6^#TSF@4(79NCc^B$XK1e3/QC,]k!i4cQiA#dJ%2!G1X3F54g`,4)%"5$CE2!mma0;VKK;`?\#K?];K.:DL-@U>,8!4K\g*akRWb:.;FE)PN;b$sZSP*kDOcU&$Cmu.J:PIM9oVW$:*R7tdYFt8pI?D?,k%4:;]Cm$o^_CIl@3K(l9sl*f(]UBT\n/F.Z.>#9Wp'l'<dQ0[ioM:kOA9[saM>AK1e;L)qoa2ffGqU-2mA7]5Q-l8e4AHIqG4)ms?%OisZe6uuhH+n:o0)+;MN:"A45gN=Ud,mNckHRk*o1"*^r;_37S('7c%ABkAtJT\TeRN*M@/hh?"N\sCj5u+c@An9t!ZBQ16f2E\q%FkMJtYgm,8Ps`[f-1"!TQmFQ.7KGamZ5a9c.cSTG-n?qel<IH<al<I8kJ+hcKUMt9;PAB*/eh@=-Po*adAfn$*([ckr)a'5&0e!Z%c=Nul?i?/r@=YQiTtic\bFC96KF'CYVR6`2.Ou?hA91ILX#fA,i-3<Q28F_n-,%NFY,rkdDaFkraeCOA<S05saK/.A-BYd+i)d0Z%#&_]Npmo*l0P5GLF_$OOp)qcAJ]sC%g2s/8h^9XJGf0ur*j]I$W/3m!h#7V34`i9'$4#RMemq\!U%,Oo[A_^>g[P:Q:U4jtetOcO%@o::.V+@IW_&?Ub:O>>]a=Rc0.*dd2N$O$:!YIN>>D%7($PcM>6U3Es]'^G%I-"s7Tm=dIS$f4V^`-Sl.]a1Hm%#>%XIr15__pTD%]GMDo-"S]n_oWAQnUPE!6In!ZX)WQj$r#F_;Lh%c/l0e!dlMmH6=>Ylq1>!>cLahupbl<5o.W^:?p7T#s0`5D%N"c6#nu4-Yr,rI%B7F24etp6)/<<pD>?'L*e-/>;"<k7cJ2ORV%U:FV8hjD3$U'RhQH(P//TO$cp;jks4C*Ii3=e\6jLXaDW=I3.CA_6_3ZPTG/:/sH%)^8poTBM(WOjI6tTpQ5Lph""g.rn07Ckio-MDaX#$A;lS/KMVjAVjs\E\(HmF`\?f?'P>:As\7dZk'TL,nK$*<'W)k'hK=!l9Ioo%g'4AfN`pPO!T)2e+H^jhF%-qiO@VfY+d\'MWWZfVU26]/Q]/Ycf4DB)c9WrFZ%%[BoSeS.N"7INc&bIY04q["X7GR3[4+,+ER@/)%\6.aKdM2[ic%['=@si@1ENsTtX0*.#<*Yeg`jc:Fibfp!<("2X;KF-tNJjWS<j]lcd[AdifoVqT11>(=\kkB3A0H/J@;UoDn[:lC%=Z[g:enQV;['7mBUM5i'^]a'ifIKV;/[^,V=BV(#@8(XaO'RiYd3JXL9$CBQZ(fSWU5]%.N]Rq!R66fK:HKD1gQ0Wa(B#e/bG)rA%G4PO*$*./DI0JK5-o#47UoZR35<TH,blp*_)b_!pB:JTd`%DM=ZmZM:NHpIWMmu\1Qdn/VbN>P9/T%=<YV_K=>fWs\Yr96%Yq)Z$%NXf6*@kf;d8Rg^l`T^c>N#p&#SX*<QRFBU<&m8<mjnSe*bf%"5R/3?E]LhWYm92YHRHtJN?g="$I"dQEBYllEpYRl;4C1fuYjX\l%a7]YU9H']\+(%IK2i_-j^>%[f,_Eb@'I`S[454gN%WQ,R@*GLQ-?33XA+'97Pe\T-Kj:fe/_.+/AksN'Rk?X7LG=je;7fm2E3BEc%i>kLbNaulslFg*+XN;Vpe,gjANJPkk1<j3mq7pFBS>+0&`+ZZXlM/40&7]C/<@=0ia-8O&3l)OfUJ;kMl^?KM=L%.FO5]%q7:9D?%Ilh92&@[u<;;mi8OQ6!T@NLLL.O1FG'Y-1IZ$Y<In9Q(C$h*%P3!"`7a9%CVHUr6M"O,IP7sTa_D8Ib25K6?0S$Ud%HiYt>O6L+Y%](R<\RF$/un7*16J]qV,b.Z-=$pTcBA]$9NKT&dQnU(2Z3@kcWVn.kh`N1$kp;qLU*dblg?rotTpVrTZ$cFdt!+Y.dQjl,sQu\^d%(d8"0TFuCjV?F7/"/hiSQ=LskRratW$UgL`JJ#rCR_m":Zk1f/DU/L[b*j8S.@YmA(qpiXA,'LK*5`:@]:Jm!BYm)j0.LoL5JW*6%A,jCO2FO&WQDHe_V533O[ko0reRjOX+O'<YAf*^3Pa$dYdkkZF8.ftoNtYYgqcE3AiR`id$"_-N3D_+mmq!!BGEB+-nVd1F@G6<$%O]`"'BYo2J%,(FPV:%KkgB=?*34RZm5n?dL^idRp'[3-gU^\]jPX1NC7;K6C&pc'(Hf/EcAOXZa)1$"j*QM4?J_9C7%jcsi;Kbmd%oQ=ooNGg4fLPmAH"m!;=[FBrlGVP]pg2qA:(.o#86p%D8ThhRu&'-BUSFaOa8.2k&MYCLik%jL;l[je!1sDg2^1*su2Rf2V4oo?l%UNc5[,_nXmeAbJ0<fGTdPUgleZ]cQ/UcTS)*=+(%H,q\b01!VBTb91d1\9<HFMt8ABF2Za'pG!n;b1KtSImV+&3MaIC9j""MDO+`%/@"?)Fc;V-6]0'%YA00RgO=eb:fPV.L4g[!r>74m)o&#+0f8OL\RJJM9kfW;qe^*GG7dHo^h4h7RDcX+lrP+]i\F@_>-l]12iS[a%d&3'=G26/CECMaJ=jLC5]X/n>j1)/Z7:*&C2dD]:/j?[UJJ4PoF1lLc!s)ua5IZ<s9,'HMUa"iWk9+Rl1I]Al(FP!$r8M0(G?mm'%Q^)/jm&aK]B)0UL&hgR#[V(-T"L5\8n<AUiH57&2197,ti6#U*!i?a@35?OB%l'WJX5HZJ)rHgR2MtbV1JrmRC[26rj5(H*q#T2W%Qjb^/5Rp8_O"D*/c.ck7YZ4\Z1+D,R]3634#:^jj&JPRXAtFn$.CBZn,b3N+Pn?A;[8b1GIDga[\Auf]r88'^=slA!fN2jS8ok+J%qqR28@fQ965S:Iu:ZRc,Z_fUpU>oG*cB98hMKoTgaeue[[MB0O6b\0c2WVJRCk&Kq&pAZp^X.]O4,6D[rb1ErLp$b3Bi.hJ+@]-5%gbgf)2(X:'Tgf-IAUpMDO4`":!iT^$`\5q2ltDA3nsf0UT/@rhjU"5iHpTtsR5kmOU<k1kcbCWN7@HjlEB_q`9%h0%Ddi4b*sgYX%PkioQ)XLc]&!l/tAnN(_lI\4U7;8<OG;Z8[;eBNDkN\FUCMW5Hj+a+.VeLO5:jIRPCnBm4APu9oKsd!uPlKLL<BJ8s6t..(BW@"i%2+Kf<a4[AZmrN2taef7e^u]P`8-3tn*2KZ#ohnc;m,>"Z),2K_3WW(Okd&PM8XUhSp8#^LN_!umc2-jm2miM"3tB&4cuLrRNn`@8%_?cm[P9"Mt"neYtF%@#q%Eao,@V?M4c'Fl?P:%D'C2f=\VIk33Mtt(s_bSFpCk6?9&ppNabCJ5PGXE^6A1%10XaMAlNh$L',2-AD%EdgC!5VTC,N\\^eYlBGAgG1'h3`rMpN\/L;HZgSllZ;C9TEW(_X^cPk.j/mJb:g!/m=SQdP?8H39PRQW6+8`Icl4-\Y@4-.WU^L8%f%[?4_Nsul[LcHb"Ji.K%A\?9po0(7kI4Iu`Q+c10nV3@9,40:#<2qI+Y11brBMg.He4G4!$Vg[Q0[o8bI,j>jK3Fak!pg"(.kV+%CaiG7;p4=*RYX0(M;[.@k<o^'mK#OK!?&EgC5K=g9.?dgg#&)^%7,*n<)OT/`UlX,gJbsF7'_K>"?co;W(KT>(]Y=!.[Y(#%CQg:%f_<;phZ8SU(er2rOELg1oZesk+S8s9'^-/R\Jc^;FNNeb3`*gS&YK;&BN15b6Bj4-`5HTA"sa3K&OX8sBP>SpB#lD;@TMe#c*L6L%F3Ls<5!K^Be%T;`qipB'KR><#\pQ;jiYY':H6p_H=_3^@!o8EQ.7mheE:OQ+g/'GcRA^bTUEik8L7I=i?t*]uC.oM25^Y-bYUqkk%,qiV`m;I,<IVU;KB.`\<l60dDTmTL)$c;V%"CIqF>7gZHg2i_q[ktK6M5A&O]i)*ocOe5J_)DPm_t5;NE/#,P'`]ACVXbEfa$;<j%-T//)H!nVT<pg"$XB#1\K?1$^!hWr>*QY-@5ma*+!P=S+QBR!FYX^]?MA:V]-r6oH)\OK^E,c.pP'PsgLT-NGAl'@mM^(1YPaoi/%qtpb<*TKeQd8PpJT^a;*TI#>kX&(IS95fbUUT*>'1^<Q_KS;,(8*?`u'":"8>9@kr-.[e*6S)@_5hFkW?PYPDMTLOJZ&S$'O(\4s%JeL\p;Tc$Ij78Cm6kkA.!HoNfD&k-#i.-`MfaG?Nq`/)q"6Z+ZW7#L$PlU]@98MBCZ'N=lYln"V`Ib8?RV%7=E2ZsF_M$WogcXpU%?L;SXI8JdnaJ_<CeL)Mt`M5sV-CG&,FTbf8A,mqshk5o9;9!nu]35?Q0m42(34os-'r_e7M=()(P`=fud3Uh&JhjLDVO$M7OERJm%Z9[E;bF*nY7T!4VBRh((Wn$4o1l_$;c2;,G"pT<@b]j_NcP+SVKD$55>ge9]Nk=>'gc#uQ?Pk[b?R[9b!9,7[[LY-"8V#Xb4d6ee%q_[Dn/XD?(92QQ4*#PGOQ=WmIqjW`KmRNLFO*a+Xe2lB3aI0hA<8M^)jC_Of@0:'70V64IhcMg)0$r-T69;rXSoTDq/&Y:]>afnf%L(&i:M#+j%fQc(BJ=Z$i`*+,*P;H7^\[@ahP[A-DAR'F^)m0W!PUS?<a4f'GHR).KU*'/`E#ad*0[M1!K8pXZ?^>9M\(N9mQpZbd%VOd:6q3lELjNo<9P^J@l2+W#2>)QJgX4VI0qnd5(OJ=3iN@U21/^Y5W#<;\06``ON*)n1?,)d"i@_nA/a)Mt'.j]ol)03h;,`X=u%!Yr"!_/?H=:iJd8O9-TjO24;MQI5(D8rP5N&iBGI:W2D5l-MG+[AZA8&@(rQ)J$8?OG%9=,"t8=,t,ZfJ0[km$-segeJnn9]LKng%B$4QtNC&_G#r#eQ&.r9NKtMIYH1igM&t[cHW^I`V?X$/_-9MH6FVY-+gd@*.A*&s']a8]nV,iqTdk'H*$,&0f-%&j0+Uj!tjQfj:%pOEp_$'HW3W^X2*KkK5NjMZ>&ZA=]LP_#U+P??<Y!8EZh=If,nf`"pljJ`Kth35ac([!Me8K#fg*cXe(<&-2U63b;aMHDLLk_fj:%nTi5ILP:1cJ6T$9F<D^@3[c:e/WeEi0Fpq(G$59=G(MTNaQOmf\K0L#j#BrFJ?_Y*:mPW53Y7CRg!<4l<7<QUQU[s-oQNcd&\=>V%kK$":$-mN6$=UZ$^*Ucum)tJr1il'QZ9%'7+NinlTCCVj;9i*]KH*k7OfW035b+$\<A=1]ln:BBpbJ:dg+6+pJ0W2X@\Sef6qSWB%jQOCG#pN(a:6cT`!<>Pre\`QlKp^-0q?1#kSC=e_R3]of,-$U>O/3EnH_nl8.d,s:ckhO!6%gQ,#Z)Lu-d&j*6`Q+@&[GNk2kXq4%h/.5bi/8QmPeGI1h$S\&dL;3L5"@%(+jC7QTEBki4D/^q$@2kPb9T!aLRe>l:BmF"^?WY@!ktr"kAg+A)!g630DRK=!)fnoj=!c3%SrT0iXLN0;GH///6rsqUimIl5#cNpNT_TkR47cG$R9-IP:eT)j:IJ!aV'o>UH]\e0:o;o2_DgJ"AtB]VF+H2[;<DL!o9\Yh#pq[Q%)s2+&JPfXpY$%6G@ftQP($p?\=*V'ck^H;AAD%VAj_V#k.p`5kd#EjL&e3@nZ-hlF*?E'!_$0]8P[YL<H?UR#blY(G!Xe6)8)S,&%["k_J-O?c?iiCL?#Sh.r,NJjF&f%5kKS)'+4>E^.&&;9U1%l.i<s:Da!(HnIf%PbI9(LU:-_`]J,#ml:GSCOmh'BP,cNmD%*_W,`%Ormc7[+E5)#X9#:\MR(j3=$iR@MXf_5/Z8)T\e)Z184nTJir'PV91oG``e9uOCrC_E%OSO1!Uo-egJZSOt5qAZNhIqp(3GN!qS^U%_GGk^+-@i$eD[2s`@V,kHqDZV)2CUWrLQ4)-J34,'($?[_o_OR6:@GOTSXu/e13*b2B%(-QNElfM.9>S&Q#aBAD+%C*psA/TMd1X%DU&CG%)F7(&=^*nmPNJZnkEO"O,-e]^8EURV3<+tKWIS09$V^6$-`Rd=f,f;q_BTaTNV%=nGpV`dRO`AT&O$fh?'CtOsL.)NR'-U%-I&gH7Sob.!IJ$_>]7eR0Noq>F,G6EMZ[GSH0ZX2+64AD$fkC*c"dD\Hb9]LL*TIJ=@\McBfDm5!c%BMbXc1q!1f.'#qQM@oOZ6^%3j'5!Yi[,Q'$[YHd^g9gro74'3YM-U(W$k5qeKrGNX99CCb&uP5o)OEjQ@1,f.E*5O_T#12_K1V[e<Dg2SmT\8k\o<-o+)gcJ?D>%hVA;X`=1MrRm`M&93c1eesrJ1,/kPG'iNTslm`X(CX-@i/,>&jYJ[W%e5#WKI:BQdp?,BLnpDMK;ISQtnk5%'IS1.O^`6IlFFGSe%9!'DT'`p"^fWpP6MuYR"R!aVlL+Xj1.:o5hXB!o^jp];[V(trS:i;g"LkT4H4rdbC3_PT'VN[[/akPDLWi;dQO>UgELa5P8rOB'6%=VCK<?oQ=<cb<@fN:D".90I5ZCb@"'1P_Yg+.R5M-ru'<O?3ZT<gpX+kH]Ye8cug<0g'#b0GR#4O<odT5rK\5=6t3SM)TP1h'F5a%rdoNcKF!CjV&Uk?n<jVr"!=mI_/'gUFOOPE$,igH!G7Kq7jYpF@dfNm@6[i-;SkVK^`D2Z&Z/0?WMCpi"mZG9@mjfU1NA1\H4Jio%U/Y*4<crbo7"%[0YiD3!`/Ji\>qI36-Z!t&]-TkN4:r24G(KT4^%\5+c\)'lk[@aHcVar+/sle(DO:RHOq]&W4&d(YK&3B8]Q,iW%.,n&1TIEU'\XJKGIcC0p.7![&WP5X=r'[;5fFgfc$"AWketVCfG%\O)$4r];>@Jqo2qF5WJ0^fB#2aZ._L[gmV(@9%f1^]gb&Ou(%psQ.qnPJiZ!k)((nreY;le?5n8X,+GrsrD!+Hg>^.G$^@d2^!j^mAUfl+i0Pf0n2EB"#99$G/A>`g8!/64>%]RU^\%%oj&.8FnYh%jZH0LC<hgah3dstE&T*bEn;NAOd&j9*1N8#f`9.k&f_K;*VKXj(FB/P2^X>+Gp[oKB\_/`aZ?Mtl`H%:=j"1qQR3?LBnIGEMAK!Q%eSU8'XdiqfLPrE@=l?CI]?N8^otaWJA201h>Z<dJcsX.<^e5"\S&rXWL[@d\O&GdOKdFT*'1BXX6:M\X.'k1kPsN>^<416\WU</#%E]<)Qf#6saSB\>%$`3jJLWPoNS44n\<XH%.i%cBY1SIM56l!Mqo7/<c.`p7,dL$:83f?oElP&^\@DS)E?82jBdL9hBZ94F7%%k+(%.f0e7Lf13'L#.PRN$.5DJ1MEo.%:ZOW6cqR9i?6tPF.F)5u#.`;OT9tY:/te;XKkK<a1a<KR%0.l^s8<L_Jjde*ft>ejZ3YPV_RC%Y;&QpjL#hK&1b<bkQIm[2ME[(IE[Q@JbPQ)eAmB"4HV_[2<T0AQ;6Q'Zfnm!W&d!&ohUaO]nQ":B$>Sfit4kbUd`=*FMsbjoN9??%Z@r08?:M(ALPTpXbdd%M9h?t?r8]]h9oOKM1.b1$=Lb*jkUQ36P<!;jO?=a=O3@<QZWa@G++pki-D;qZJYt1W,o]5Y.o^m`=@<`W%H"nnZ7&73`8M[`S=S$=jhXZV-<Yj\paOF44lpFGmTkbbD^T\j^A1ONSQ5oK^k%$lE'o@leLe),LM)d.),f?XTq$N=+`*1_#LfVrD%#hK7)h4Z&9DJaP>F,"?ZVfVRr?qW=cWO_W*Z\,[5.gKqrdJqp,l.EO:XGi$Ema:bhZC3SO)CFarm!Qr+)qhi*B99:b#oO!_o:o%:%1o2o+7EO0F7ZbX.&cn,6M$=*J+NN%YQ)/;#!OnaciXAcf'2+p#Itf;ofr,%njs<DdI!-8R7>VZJ^eBHL<gKeR;L!,F-F+tR3(oOP%7)*1Uei.)F*g9OYKN/]%`gBd\(T*EQ_UqH!)Cf3?h-fV#*q:!V`)=<G1\qO2PSCuo<4(ft/4j@Sk\R4$%6RK?C6FBicXYPCibNQt%YDuDG=O:h]LDSB((18#C_!+d*b+*=g$=/A@V2EsRq"DJ!GJnqFVFe!(%//a0kc.QaDTYnnpN-8/W>NPuS.0cQ7e?te0s?364gL0J%(uoUXg4FU$+[JCD01$*9p=U([;$=e>_c\[o@RO]GTOJud1(n!@14I*XQbpcfK8O\[_P4RS\NHSoeKkl5)-o/,Lq,*A:"%,[!#_gD%H85[o'D0"4UJTE+0@qV3_buWZKel13O*IFV`/N(HSK]:B'?4^;Ss)SURS?\%&h2'f>-eNE$"'eQZO&hEmp^sl+@;.<Zclt)-9.SB%&XXb,A2^n6ZO)XFA(-;mS"LR2_LZ7KDM#RJ=J@Km'6FL<2p%Bb@NSJg\.BkH!r'2=Z=/)g8Vb2.hJV=-D`@3R<B(OuLB^*ccuZM:%_Gc.+%+6olq`(EQr%_jt5Om<@+q\TKWU277?DM8V;CpiF",!3hCH"Olg6cAWN86lGenuZd@lM5mXEnVT,.Mh@l_hRB'AVRsa^cj5%J`dRE@lTVJb8O-U?*@ofkYnE?&<-5F&Z.N#N$$>1bRuaY3!01%bA0S$reloc+gKMM906AaXUU-7f1U0_*?kPk"\(s^Wi;*JGgou)%h2jVfENgT"IqKI*'Xo0S[Y_uA,lI\R^1GoZgrf$mmQ]K`!6IJ@K!-:Wd%Hrn#)p:)4L!f4O\s1Pa@9f77S/o>^NZceT+U6%C66DW%Go-sQZ+8c(>!9QP\NQn,p%+QcL8>!>(A0KM<_kCIV-/D0)^]2(`>C-+<;7QFc&VD@p((]`b'FdRgcirf#q)Sh@Y/u8_OY*X%2JCu%AXoB<(M[n=C@A]7&,r"qb3S@VUl9kVd]-V0Y&PQbVs9F&cS)M\-V6%u5_ch.l#%`kEBMOb`Eh@r`52b_j$7njU85A(RbttUq%f/F%Bmr(j1p>k8om'8-,m0rnoVJEc:%QQ;=Xr?E0,-rTN<7?,2al-m-7g14dmC9'_h&cMX83_-A.[^%gWnl;q>H?$(('&lfq_d7UH39N%bl[W;dD1%2D;V[\PRo]1hCr+Y3RZ4@qWW9Cg#T7";=;,FjuUr^r@$]Ir4@)-@;1GS%8_N`9.To[0<O`#N#HHo1.hpj.\C48p4U5Z%_+-h,OgG%#RFEE$]1&\9XZbo_EMKoI3'#63K]gmJ6u*G_[.YDPo\2<G,%JW<s/sW[iBQ$(<*Le,Bl1Lhd+VTVTXB=S>t*n#(4lDu%Mf$PYqAFIS[IKTV[2BW]HQa22c[%nl$)fj">S__[5'*nPe:L#&1Ld^L0Vu/okiOtQomSBP:)\+Bmc>*@>5Rl:%pF=O83q2&/-I:g%Q<fk=LSddd0ee\#bCH-F72Ktib8DQ,?9BmZ^iO5tmcZMc93."9&:^9]-3hI\54dt7,r#u1Q+&HMleUO1HAjpC%4ibU\9MoAdjD.4%eP$:MMu;FQASDYMZHo)]^YT&!]$%U)X@U`%2"!tcBj$p2(n?A:4.7][&+d%sdlLf?0n;i$]hbmE]B5e5#r>Vh7Z\!tbc?2)3KImj%2&t5D_.dKJUK?'+F"pQO/Ph1TYt\pBc`KiN'eYt]6c7.S"0A%Bs$<(Ea(*GsU4kgD>Nqp#ZS0n&j_/WV.dX2VAhM?@)KlrWBl5^Q%W>u2X;e)tt@5,(Q-\XTk!qj)#1sAn`1e+BACD+-V'M)&b^s!2hYLS)3Qf/T>+'EgG>'jis)MhqMFup-2F%t&]G*nURGPX@e<ae^G%R#HkBB$r+P&Pc*h\>;[16[$3^CUcD@DF6Jo-??H'I/.:[%uFp6Xi"*q=4K1IFc"mX.I"hED/S=@Lh4nH"fsVAn8&!`LU<]deZ;dZ%DDoqh4Wg%57'Jh6>?-[Noik4T`K0)4o8Ch.edqb]C1h%V([3;)JL\@oL\@cIF\Lj:5!F8LH_&]=]^JA]*W&T&ZM-CI[@ekkOd.lD%(q>M2Rtm,n7b(X-IpDK$X(m[JkYs.oOUmZfIpBj4;H7Mlk)&!PNbffKQ,FVk:JakY]Zo8V4WnD+?H2hdS@7_t%grfc?2C+Zg-(2c%.3UGCaM'`OBF`0Q)]$ZG,J++193,ma1^QH'Rr5u^XH^$CCYn&#bS/Ih_QmXJWIp<r'ODP?l7_*aW[WC"1"0;pDtu]#0BJ!;Z>B#A%c'LrMjm_q,<3e<V3bnljXEoY_pf'Zdj%jQKEO14qJKH+.p2&4CaP2$L#u50&X1!2ue@D7KZIDEaX3lht"CH=1I913Qb>6b""#Dar%>+3&_QMH\]Z9pK]\$b^oG7(Nm)^peMM!R2UAkk=?Q^]GR+.#_?UuQXajR`(rSo<fc;RhN=:[S+o'f.WnhKrlg^cW4@Mq?NXa3b3F%8icK.Nhcc=0JRXO*D%mE,"]so\'5(*AbSsa?$)b&gH?4I0r:K*k0966TB>F3^76-"h/[N`+Ar[o3HN&iHYD>hp1al`=2.0`Es<3$%S:R(a-iC!4Gi.&+n[MCJE`.3RBJ3HLX#DD4:0he_R<(G!#]J":C-d\khOGPHdml=F@g;m?VtYT+dAq#.@.WLh+M9]:1N-"sZk']@%`)1RdMpD`Sc4-I[j\GMqk01@fmrNO3I+dGu<P#=+8@hIgZ<UXX-#HG.A_0sPluL::>_*`Kqe!<J4>-'M4`-(Uf;L:e?8CN$9:/H]%DF-/F?=$s!hu1!rhWZp-/FH8,Im%>E^u@\/)=MR?mN%mI<^lgDN5tJGgb=3)+8=[,@e`pfIU_7+!UPs8#8k,h:Dk[*1Z;sf0gFCX%*%Hn%0-4bKWp;$"Mr]*ME6W;jB5d$B\6;/QN%J2<NoT(!rKT/\4%IKsM,\ER]HIi%X8PeuZna%j]umNfVY/*HIDqj>)37cLm^M_l%RjkVu;7)FSEPgUi/Wm:q$Yqo*h<ttu#s`EI:[^nl=9^4rmg;`;L&K@J+N;u-F5bj^0N<8T7<?+N,`+;J*3XlFAuiUlP#ok4<2]#-%#saYW8"*Lqko0H]ZC*DmlAFIkiU/cSWQYh3,=QIEa^2M[-:r!]<usTtHdHl<Y=kLs"Y&^(Tc+XL!.#.*!$]sA9So!qPd0i0!W^d"%HCcIMHfe+R?:k_h/[3cP/Zg!,,:1:#kEr.QSIm'H1Om,G8eR"4l2A+\>uk".^"N'/d[M?M"]K;7c%EgS_po[X&^I'KgI!JtB?WN6%>Z(&Q4jR2cbf!_^J-j]rG@L!q_$EXU6Z's[>6.::3fs8>8ZmT3k(oBepb2_TIp#*VTS"&[\m[Dio#[u]0e:-U83uFtOo'*E8Q]/c%TpZlbJXVs8^YPPMjua9SLc;BRWn/,?pHM#1pKeV1:<=a`bdIE2/YFqsq%PLb;E(:f$"AJ;MiaV$6;tk85(?-1bWO"DKtO20[]IpH%VEX\onS(%M-FHSCq[Cr2+5[2_e7jH4_L]4u-Rh"5a'>r1,BK,JOjRs56;_%]J[i-g9aSVZ'i"8V_K0p6JZ?#UcJ&$5JKZTipL;rr%AKPk)jKn#FH_/:99.HU;=odE&hh`)3L?VZ7TqsoYlRS'ZUJn>9J0UUFT`L7(.O-_\`LRRRW8r/_dGG)J<(.s>L@HrD)"'Nt9RgW=%RkVrODb:cj\fl,c#2?otZqs\-V7'p?!+K+@9/2?kgU60=8#Tjm:ATZhC6<XqE]B=#-H.n5]A!$ci.Xn2@G)58b+BT-<(m/7Em;TV%Gcr#Xh?nIkKQP>-o_%U+H*:\;UKC;#X^4jqe`&*U8#+2Z!bo*HN_VhGM;6AoS$k%t#?:M&\`?3>I#5r5cE6eQn$O^K!$-MJD[Uc`%T'#>d-htu0=#u]q+%.+<Y#TTX1!Z/lN;9A)OL*^[@TI,VY_FGW!AhtN]-R+H/"bG&jX[TB;QADQDX:df&Qi1RZ@R4[)aBkghW<[t%SGAt&$W0LYWL4CTHaOqIHRV,pD`bGq86V-j7YK)B?XWoq'6-2tQI=IQQgIH?lo!&@EmC]RJlRf+PQ]EBD:d(dTu#AF1.YJ*aEa[t%RUjYd?/=f)8YkZ/WZ>6<lSO(HdR[H?aVr?M>11R#)5oNXSWG=$GaaF^P">lkl(eEfK[LTXI:g2>a@,Lo?%U#Kj1LNHWF^S(JjMjB%]#ZE#ZKTT4<<h%2,$AfNUm>VImu`9-R9`V*)J42>NY_#89"W(F0YK<)H&lK]S\cVf2#Z-.@'EW+n0^/1NE,+q8%_Dc9PP(So6nft%?(nB92sk[?g\K)l"iQ$J=dU.7k]TO$@;^0bo8;)[`^m!g`mA.Lc`7sA.M]EIVeQ-<>/:h)A&EXHPmPrKkD!)Em_FEO65K&sIgo&C%EE^l<Y\2O2G_I):;g/j`B'QW6Qd&ZL2$j:Dqj@akF7W:W8I`8)Q*3b)%C`G0F=0Y9.n":mh+9TScJ0E]2tst'qDG6UDS967n_hA(%D\l)MXFbe_,g8DAJ?@7L%?$e!X83]Wo-R%YEGq!Z-6-$d&`97("KL_[i`ehObF1NendAg<8T'>]Y/%uF"G"[e6A4m=Rjq^pHe[AR%]mSi):%J.,8J#cPE*r70rI2fJ1'V4KT:WPX<26/qI*nEqI(W\X!P,mMUj4)[=;Eq=LjBZV:l;6]n[FIVUBW'=g3#VraD@"a^p-9P%6k8[^AWD_GDd\Dl@]hBiUg:;n&g2nc3*)R*o9?L:+f>*SEt0P9M3BkFWgB<$3oajp(Jh*7r8\YX:.eNU0Ha:Rbbp1j)OT_b"hV"q%#uF^tJCG[4DjM\;CC[Ofi\<dCWP)2;:)Do0C,Od#`P%imE1spcnlsPM=jGc0#s<9Zk#:P=W@PIkV'JH@Va=hW,uscb.Jnjulh1e:%:YUqd?K4<#!\Nik?U's)&ffZs/(/=`L@Pg9e%KU_fZt_*]]2aP&JK4rO*r/9QsfLTKigbN,G5j[S!oU1ddAF0OQf$/m?ak0iHMfo%qoZTedM>dX#NEn>V3PR2$Nf'u<!7Kc]Nj,!'+IET=!Z78oV.&[P:iXIo=a[#YRP9LD+gX[#A>D7bmWXKqlaFBXpGc4:h)861l8Xc%ON=<Qi8/e//b+L1)[KWIN;1eB/DXM\.d+HR_.BDup^-S7'ZS2GB=`jt)U+RFCde:?Y9c6`Nmr*\#,]N0f*BcKc+Sj[eio6sWDAu<%^eDM%ObP1+?h``o-9'2lHd0&d748$(IZG]""/IcSHr2C$SpLuc+u&c;,A+K$'.2hArJ#nG^T(l/%p2?07<)*i@-tH/Z.39*39-?\%M+$W##ir($<Z(*U17;`s"R5R;Ohg(P`XFC4d0uk>k8c);eqO,G&C$$7mSA5T@Z`t98]\<DUrqDlBc6aaWEVqYpEWGEPihJj\];f5%.l_5"fk!KKH=t:XUZ$-P?c0I/'\tHD1T=lQ,ElGf5h`A"5F'B]eJ`.r]hW)1e>dXYBI!QJQEW3Le(3J69^BE?bF#Pk(Xc#2,?HtD%)s0;u+L&HqP4,n;,:rFFhU^D=I6H3^TnYnrjW(5jSWGmZg;e8<j]T?fi(r1tM$PU0WG_k;=cJ4U$Qb+Z(agkp_c^><D."DoS1kB\%`m!Si)[]+n5ut[mn;^\L_L#]7p<"U?&iWp#l0*"p=[0g`32EDM"F>s#B+$(&N?>]>oK3,J('=/(!2>LRm__k`f3/jghQ*+glm!fE%I2Hi=I2IJKYu7O@6@,7#0EBSW!NDF3>Xs+S+0Ga,htkT]0Oa2s1t-/gL8>'&NgEglRXjUnKYXVbQU<'IT(/([.CCtM62N^*c?n\9%7!S4LMisZb!Os@_L?M-`@GK%+^S!@k.K5lD([dhmjK,Hd9G,'6>j=rfW#b/hW4mr#8hi8;p_*.?c+Kh/`G$+7o^uHePS$1J2,[1X%Eb?7E<CUB]9*iJH=!>EM`^-Qn`l2EMUfSb&72C7h)0M"Wf,`/KT.V+]I+sV5:AGIBRhK<7;;[PhOa1%eC?pReK5mql(J%B:^u?&(%R%59\EaV3/!],-[&%CE[VX.hTYcWOI/Z/ck69%'%K[5cKpf?U0rI]I1>7q]tTigU+YZK8n.#*'BLR?ma@>rAt0(X-sIPm5FC5H*#%1jNGge?_A-4>45.3I\=dkh9`QP_fp8&:^3[`qoNs54@[hID'\qdgaQj?3kJabs>=6Mj%7u`E"Ak`-i$gM'k\K`a@U9B(F8iST.TA%17hQ)R0iOA?T89JE]*U?ad<j:k&5*a@PZQdo]db-`#TR\ru26"fNL=;`=O]S$[\k3V`ZB!f1"Uuj9sR96Pb8P%4lp0^=Ju,HWg@R%a0aX$ajVO94-#OWTrshn"JeR9>afQHgm;jG2Da`!P4=OSTg1qsPVH#k?&8@SRjMlMo98cV$(.LqDk8M2R&T.7qmBVsHD2S#]9nY8%l-]8a[G6*X75fi>B'$n/;EVroAD?>Ra#][b!Dj*4i!D<JU(EFnosdrV"ZPFG:U@2FNX.td"7]n.$1h[6#r?-@&>RM@]d&C0food%%b[K"V@gk^]e/MV6['B2!a3BEP96`U%;&cotO.KlT85!KN1+]2I@SrPZ&^tN+9GDOb8HfaSh5tFkf0bK^:r]NE?7dRrkR-qWdUWY;%1Og7Uf!T6gnRFl8WFcJnHm*mtYg?dOChH`&e'1D,7o!'7BqLaMQ,@Eh\4_gK^-!#O/7/Za0V97>I:9(NS=#\X(jBC01c/qjm_WF7%bk-V@dEiHl1s?W[.:5EcneG7f=P`l^5Jr*;c)^[Yp:P=q`D#rNbIr>A6pS6nNTr2@@Nf#B8Ij6Wq)]>+;Qj[.)'?s4'/_Nl!WkhH%)D4?E4>0*^jh?GJQd=GW]"]=U%6X1E\,%0Q9.N,!I/FCG/,UA?XY;Nd)[YWNr1-q<;<^QUZ84?ih7#o_F\'%s9idj3<E$VhCJ..@%!@BLAP<g7>EHb8U)GFOQ.04M!fcJ^Z:,rT5OZ5AmgW>7spB3CKQNr0.IHO[U\eOm;PX=J^@G]f39=b]7*PIg/]4KqQlK.Y(C_rr#%H;e"P'JISA6i5kc]<UW]S>NTrKT]s;c3bhE\2#D&?5VqhU'eh!+nHSh1f%+ge$0="gs'1kDPMlPK3D[F`eLtgGB1/[0CMoQI35O,%p:./AUYNZ^0^>gt94'kC`;+pB2.?a0^7/gJNUoT$J8Remafu'`/2XVr,b>+gSU#4)>4Ch`bHW!Q4*;j^5#)+W/;&mcO($J4Df6EH%H@lb+9hC%JfhCCeM+'\4#psc&p;Af[<gf:t\6,`1B-88/Cb3ZaQHq>Mdrm1dPh(Y>=iCGKTsR:fa=Sqb@kC>+(g?7@deGU^mT1ra%DEP>1-Y,\Ld5:<o^Ab!g7VIUs.B1IY9@;$!f8Jaj*cm0hJF%=*=Jm21$,#\0W^_CZ;foVtD7O)f^OW9";XZRfRNoUd_M5:LOb7V(%Paqo3DM[.C2iRJIO^$a?HCj#IS<_3KhTKQ7,<aopVjZS7qkDr##tkL@:Uo.4&f)e0?cL8>4=nQ7I5?mPH1),>TCC12o_dlsq,o4n%c\\IK:`R;=K-7/pEW8M-hi:SC\#eRkh:(/j]GGfcAWnRE-,bMF)oaB6LpP#^hK[lo>+J0;29amAcRQ".Z_Gk^epquL#`<&<)iJH1%@?'_SqRH:J<E!=cZZ>`J#]%4N$^+S"%@@NG]IGU94`bT_+RX'KQO[V2ZOIn)g@_#lXg%GuXHkQ,eInab)Ng_]H:[?@C)NPP7#d/%%pII>/b=lS!X/1MO=m^sBXS-tI9NL2s08nqgXHlmXAMpXjOePf1TTWK5.&_-QFsbNC+Kd4o8Ia<UIH=d.$*4JK\$Mo_g<6klJm(P'%$+'B)T[m4Fi(PF;=t/E:-bG<K("::Z;*]U.S'rPmA[k]DRLn):-7nkoe5nC?Qto>.VFjV-C^nj75S4@AKCi/LMKe]kI-l'0?`&kE%LoX/^QHn3m9E-e!aCeiFc`et7rV*f"rnH>Ds3(Fe>K?:5&&2A][14ba[6_k1&$$l.bVd1Ss3'lfs23S%$[LG9PZMW:/NY#'p]5/.%qR4.cqqeFuStK*LAPMKtL1F0RGo6%@9tr=?kf),Z$VoS$Y3u]0>h=(Y+3XP"^\kfNYPOl@Ij+jgqr@XIYNG<C\+bCJG8-$JPkKZ5%5L>3lX$EN(FoEEY#RkNE_:7k-$@I1@8K=Yh^OJbunI"!0-rqSsq#8:?O=[h+^MMD[QW1\>Qh2`[pWN4ADI0tHh0QAoKD],7*+:)k%%3<Nh):GDs(b`pV7h5,KrD2$YViYap.[enVku/Fj1;pKU:[pCq-_/Ak4TBs+]HMM>dWVBkG4u<>?X*X;h#.hp;cqegU!?2C;J=Y4%`(nQY?R<Y0_&WXF+d;2,Z#9LdNK*Q9UaSZF]$:?%(X2?'W2&Zg71oEWC`2bqC<92Re\$Wg#6ZiI_SBC8(U6l58Eoh`)$e=(+Ii#n%rnPjRDu]I\<6?kMqW&tbK('Y>dNOHE.C`_o2B:FYEO#4+$'>("V&i@P%a(u^C\8X2kq)3GI)>Q75h6k?d0kjZTY+k6!.J(_aUaap%&I3#W7i!/#8BHE,4O@/=;G:u2mHYQU&l*e7;r!Z.LpEg>VEA@4?7RD+3Ma/Tm/Hf5:5bTgO#4OO]-2;99!*WmjK.E2WREm_D\`d5%nD!09p-iCcq1TrYh0"1.#(.Y>mOA-sn-qKLo/:5-o<o_8(TG*@R4B)Y^5htl*0L6Nqup$:ijdKaiYN82.WD2GqQl_*.pn$U=7R/E%1-_i5cn4upg8q[+/SC*poH(:[2M/?AL,<irjJ#9%Ylb<-9:%4*GU=ni(1(Z8/$aG&s*ajo%jo"ILe!N$bMuh>ig`OT*1Ob^>fRqS%r<FhdJY(1cG5>[8d(dX>7D*VG&s7b'ek1@EBPd&lLYhdG'@@L`rP#rgF9//1-I!eT/B'a`fSe/XhT#<<or3O^fq=N?D3Z\';Y;+n%g3dXh.bbLOSg;C3&]G+b)=:9HfC%1$*p@iM`g3tS\qliT/<#AaKdH3=\&+!?4r\FpN9(:1XShT\cL<OWDq5!uMd&CD@S?D86f@fj%0JT2qReLuln/&;MMCA(K-k7XrMlO&pScS"UCWeN0DM[AG]LJ8_XqH$h4O+Cr&ut3G6tMLG7OT>q'dt&#>7rkIUQ#)]m3FFB77qMD%*EY"!;=M>+C656??!&A!QFDXfdb$3^dBNVjR(gcMpk<@U\&#_\fU+=1N[S'*p?'-;HNaRfNqfKTIi/?E2XFRoW$1dH6b>)E[jWj,%mnKgn+T\>HWF(1ZLUG[=e-IICl8[3NoB1A1[^+QjZ]2*#"D(`rMVB4`!YQjGmd/G`8b!.SfAO%/g\/'p.Gi"fTijHS>g!.T[mTr?%k=NMS;+l+'3RW3<oYCSI!5a6QBQ'&3_%s`EDJph`>'ORNhI%Y;>=l#Yi,*bXolV*j%0_oL!B(>FrA^stc:<iTc0G[1EuJ6fS"gF3%IgNb/"=>Dhmn2sa]kfs-/Cn56DkO@nH9-JU2>L^o<t.HP#_'b6;[]^][IjRPRi.s0$:[:r#7l)QMl1F+)COK,FG_ulr=uh^iMAd]%!)epmY"N`?(W2te!45K@h'l9&cG>;]U:]WPlQ,Vt.]T7Q,dfkpl<Y`aU#.mR@#(9%PG'5q.G7`eZ:DpI\G,2C`;5YcE(#9oY`jEQ%-R5sU875QFFSXm:Pb"`\ArS-Wqn_sRd`382(C.;Y7B[Acp;Nr;r!T`P#>[k%DT?tb]LI#rZg,"7'GuZ-&3+)(ZM^p^"?o1`DPeBu%T+2/Gk-0nSX>rr,&%da!](S$Q7%<ug9l_Bm2'p6tMTG<mBK\*.$4uR>I?o8/L,92`a(ln33d5b2d^,#sg)"r;,(gNX.S)+!D5H'A%!cDWEj+q8=hBoa5/bqYH+Y,Y-T7r<4"]$*erZLUoBS,7kXV5.k)g@t-EqB!k[u1up.`mcjJZ*tZD7gh`s&1=#,:K`cDAnQr3$XS3%:M=VVGld`WQaar>Dr#q^D^\pKQ*`mD_M[)H82culr!0/hGHs1`l9?\K>e!J-H(<^nB,j3AnI&$?UbR8_c6&&%b^1kt*,7RK?U?hb%F\(e!lX)*Js7>\H<(A>c*2/ekm$.,k.$IUM.@Mam!R&RU.4J!7]6o^5[=Qg7Dd0;7@ucB2Z_h%>QR^3rLkpe?d%3:$CSFYs-(Z35%I"Nd*qKhNF&4,V152orWmW^'I:eHk)6k>^Kh]\MrLV4"G;F#6h9l1Bkrq`o]cp!,ckPkl,rdu[GMCnJZ)Ne-7R):P.r/S&iP:<+6%eiC8h]KmVGl=+/tGcOa4oG%A,;"$XF"?LcJI_>UZD_n8:rX;+9Qg".Rodq?5H&"^!l\nFC"8P;6268(!h3#]dmgX+<:3de-X.g7<%A6b;546lrRe/TV4\=HHS"7?HG^2?SW-D?%\*rCVqej`2II>/t-$Q'%n>s?HpHdEN1PQ&PDl!f&O!+tAQK-8\d3fm"gY8OS[IZ+n4%LRe=9Zp),)+HoXo,lf<9;=.K4grK(n+_)Rr,\qmXK=^liFU\?J\)^4:J(93\ojGBV-Q%<*Ls>Y+`!bd7?NC^gA).aJRm[h,\k!!6%IkCrpI0_?Rg*D<n@amuLZ>=kAMKqgo$EPK)o;d-pq$@]\Vm`I]6m;A,q$""T3RhQ:4p7nHH0m)a4,bT3jV6/Ll>p5$o!MM`[6--u%>"I$Y2/I-Vj+A6N6f?XK0JRnb]/1)E1ktqf\m;HHCe2i.WV"Eb^TPPEgT$*R`"r)e"B)`>XGkc5M`OCj/l9n'#A^&L.BMQRXd+:U%>,Fu.IA2mbk$eQ+f(f[X1YN;!?c_nEk29dC5XZn]W?HsCi$JZs<h[LM*Ht=*L&KYm]T95]Hq"@H7PY.pR7X_UdO]DKJfr-fF^Ltk%%ql_O$GmY3XXQ';%^>sRc3QKj=dKTB.B1/diJ6rc&K3:N&<+fM4!*s:[eWVf.,G&r0W2u+??g+%i:qsTQ&<*A&U0+R6.u`b#CI)W%[^r]/cmRf9U5BcZGe!3^Y"gG9;,Df`-ZuXW./Z:ZcXBa1$`pkGq3n)E=`0s1i<%Y'/Nf_s^i`PN4I^TcqFg?WSNNo+C/?3tnuZ#d%?%)g.%W:(.8;4GZ3L8lg_1:3W$=-'8Fc^8Y'#!erjU?JSFmR^+>7[#$3J@^7#0;n#"TtDn7a3u4(U%3[86LRXPF;r]2c`a)6DuTm%gfMY6WQ->S@>QSp<`/A)?;F<p]9kgPe]5kWT=NQF6%Y[i@.ZP^e9%I1nHa/pd`$U,drVN4B$EIKEa_Se;3+gSZdNmsN5.\@J<KI<%E,qN]P&j50Eh5kJ$^1ju7*d$15Y_i9NhgYbGC#;33Lu[1dh2YQ;OZ.7H'qFKY;\"ZeO7K@)\%*QUZ=j<+\&B7W&;t>Wb+`TBC<%0%4T9c%JksRS]PK$KY*9o_h5]8"Uu\LljXgr3FhM^B:1^/lRT:mOi>`7Q\lNFs\sB8`b/FCW+]c^hjAS*)Q`'l^&A.?QRH`*gG`fq/%)T(9(PZZn5Lt?4t9W4;SD16q&PR^'e+%&:>UX<LM4fL%n9(OqE<lSFA*kTT%?ni`k;=,8Lip3';.c@:hPlT<Rq8PdDmrH=0C@W1]%&17/*2TbnC3DH_2bWR5k:@)/HKksa+&[qLEF!ZJWl+3riD`cZQU,MfT6/WH#+>k5n6,1=9(YPSsmBB*bA.p@gLTk-VNdrZ9IU[Yf%/&sF[Ip_6o!uOpgL$Or"ZR"e%9oC&a)?SQrW'"j^W)(r)oZN/b3JDSOY"[^&UE&'LgEB7i:1,?biH"o<c5k7_(kOkY+IL//HeWi3%KTQ)N#RcTHEp%ZO"T@99iO<lV0"D5)4FDfqgG98C=UZ`llEblN#JH!\IqBnG%QOK;rJ\2>i85Q[0DdIrG%nP?e<sDqkjI'&cD";Q%6ThEUBJc1E`1\=f;r,ta[(=6@5rgbI8:i@rF(ctE>_L-BLBbrI5.37T<IL$^7=u=cSL&SQ!INqTXQ9kZ!Qq#X^Y+kKl<%M1l9\R*%5Jqkn<Tr>L]QZ2l$n6[l&EV4N6N/MF5t6R:/,?gJB/&'kR?R8.FSY.GTHUubBNQs%aJ9$(MDJpgMH@-H)OcP:_]jk:eTio0[#-q7%3%jc8'ja#aF:O7PY;;)kXZtB["D=Qh`5=+(*Fap7((H)ADOkZ:&e&;%)VR^GM+,<8AksCM;iQpE0`D_/2(/qEASH*sNt^k'/mHQl%_4]ap*A&*MX9UkNNC!/ZM6IFZaIltr\m/]T^KBl-(_^K-@(;^aGMo9U5Js:)ZOd$D#YaU$T04S$n=)a1$'B@gBI`;.-@Go.>)3Z\%)pH_a]a\DI87lS]4&7$+)o5us%p<9e!D[KH7cbFSi#>Hm.3Y2jbJZ>:LKlM1c:hB!`:PTk!\s-nl592j#==FXiP9D$Y2X&J;Mb\Z%p9kT,).UclQ%RV/*%?hEAf<<7f'$>be80j#TAh>4Sg=XEKO)5^8fk@UMBe`/5'q):(CUAf4k?lYS(!Y>Y5/NPW+g\?Df;UJ&Vl?5%eQ:P2qi3"An1B?dLMFZ?_]m!-I>3+PieeYYStg]8`,CBTm<sSrXphj\-s)0fm4k*+4Y,N6(Un<QJ[:O3;MTS]R,6!>U"Kc@FC0f*%eQb%V4en($[:_p5fi*qpH\i?/D9joSAl7XIq(*WVJXp10VPN%RG3I4.LN_+:).G[H+![m,_NAHYbW,[08-?&_&/JqJ]*[f4ELXh_%$5G7r9ckp[-e8C6_)q(^N\>EIB--=#-&Blkk_8g6QjB&ZP4bm#,W^>:VVU]#M`8Df%_LHId/fSugi)aii9H#k"UE*je1C-4gr=\h%![n;FO=k8G4!R&$<t/0&HPJatgg69F+C2&(R>CN%ABBfi&Pgc:S3h[V]F&<r]dW=(6+O-C4)PR?.UEh?<#`,YRXgLc0'!XA>OJan%'#5T7iXP^ACP1+KO/?PPPoJAq9WrU8/P`V`qs-C/LH,)9G@D)Q&kJOi["LPfO/9R2>tf_:d\@;sAM*[$/s1RM*5=/WE@E9nD.V]%%$UK.Bn#&B6$P77OAV8,m_Y\dLC;CqT85]A\LgR]LP='+6=IUWPQC[Xh9gr>&=`BB2\OeD+QG7*lV8gI\K@C,+k$M.aG#[Y0Oba@.%CI39(GQf.1r7#nVl6ONk=:<P0SKnVWWoCm$T\o\sbW$'-Z,sLnW-*d58p!TT2f$&E]G=QXobpn^H(2GOY/2GSnC]rHDU==hhZp7j%9kk?:j&VnlG*U4Vr.-#nM9=`0[Ai:`gYCL90:Qh6)n$.B?C3!)Kt_2qMtZh>H3BN?=\<A$8`pkmH;(B<@0%i$nl,,YQUFUJMTH4,%/ZthB0TZdK`s\"j[k_gSVFWAsW.m-p+3a>*7IVXJG&EhM1qZ3qkc_/`"FZBtK#jVJSpWMqI&'I>\Vk3Tio;OP6l+B8L1?%aH5&*;%K1eT2KYcB9A?b"'VTl<3`4;*]P.upT7_,JI<XC9"Wsmk$Zc^=qkG1L^WmKdr4K_&!!O0mhIc;Ul(r9(gY7U/*7e+qq.Ab-MpEf8W%E[(9)+j+9bCCJ!P:%dUiUl-/sSp8=H[*OrKc#lR4\$'-]HVIen""CO!qT'E[D4-4!+&K4o-qg6GPJRUNg^m[sCN7;.:$j_-OZTE!%M"a/:qUnP&Pa^c$[O34HN.L%s6TtTQUaEiWq;p$&N)MjMcmM;<EfT<;AKe%\dBI;U<(Q;<V:TC&VX"eNYLcL%ahKDh)Rb!&gS7IZ%;Z8uoQ-rKL]njlUL\c#WP:?gk#DdHj"/lWDL5YgaT3c*_N3XPl0gNPuHH^&O%?n%_abnk\9u`ekcLiB3UWBS(<oh8RG_X#@5Oj-o%l:!N]C-_MlS5!E0B!CfJd4\b['!W[_!AqpTQK5jFY5lWsI#t<;@p;9[+%t[krN7J:kc]1*rb@egU0#;aSeQ2cJF3s%3sC_n'*PBm%Q/t(k:P`7]e]M6-`b3Llf/$[nZNCSj,8s;TBFG_K'm3u5.KXIIce#ZSG(eF6(P?i/3t/G.bg7WNo].c/[]b)[BnCb/RkWoH(9.#B%=0dfkbSf?Yg3$<*>9b,-c@qd1qZK`t`XNM4r5X'kS69@Un2Y\JPUlunVd(5(p"SnTK]I\3D_1W=hJ9I<5X`LTWin#?]F/)Jd$(Xh%*=s"GqRYGN+ap&k%J+TPa[Zq^MGR9GNKDfYX/4QM=0'<,QfZPR!12bpONgh7/L/-@3ML=/$BW(?\LUUe-*q?1Y,r\,296@*J6iqe%/([hci,`p(iS'/i`TkaWd?f1Kdr45dhI5m;_O#,LHlpP#?f;\fm?ds^B#t_%\9ZO`2b0*T6d>n?<F&`d6n(Guf:@%oin!GRGJ.!Q%c3Fb\=2o&$0!%O3b>;1;&6nBB8K@)1TH;XH02Pe10hV$T@,2/Rnj=`1f$2sp\g<$2>AB@E95S7rSf@*`;2"pe5"f%fKQM4lDA4Uc%Fb;L*+Tt>=2`RU!IFOO)KBr6t6")\MRB*g]qaM70+UHs.T<52!1mN,TJ?Wa5f!!.Fj&W`.1V;C5%<+CC!47rY0P+9]PXSa&VR;kY%4R^\9*7`;/g;LoFUra3-i)N?3rX+=T1_?pVZ=XT]H*NSXQBK;=%&NU3&0dg&;C5Q]b!\lO,.7a2@OdAGfh.a0&a<mXeW6Jp_6cjS%D%D8uRdQ1-'U@CaR7"S#''_*g_SgfF)*NX\qO=.Te01gr[?mJJpnFh&<)`2:`Ko4i0/^[LpO3BgF^agMn"uq8AbE.U/m@HZ,\`0p%4!Vd3[.\6L1IiaIY'N^KPu8e1,IPRsr>11;T2n;4Ze&4rn:K"TqN6:#7%h(M`d;H]2<DrL\+QnE#a[LV;fOOXR#r\(E(KX<[/2$P%6rN::<2UKacTP&ko>RQJa02'?$7`._,%4_LC;4-o:KYDd'XK(iF'*G\YB?DK-`@irg+6[VeDrg:+mM^(\EG0^oZl)jH*P&kDu8Q/%j;N`6,H)tGH_m1?%>"0kf#MZo6>M?.0bCTJ9&fV``^j)dKXDHgFg2Y.@A[C9b=7i,4WV*(dc;IuVj[)e9r-6*#Js.`<p8I\$udHQ%I>i*t^3bulhV%%?TLGQc\K;5/+JDHQT_Gh_9KLhccW/&HYnc+*mfPqA#DT^?YYO2+d!dfPb3LL428`0Cd\NP5BK+fMY^jE3S&XB]%#\+u?#-7sUVY:+M_]u*2Ikf95.k'6ZRd/D$-u0-Gf$_2AON:S-&G&*4"@UE2+r(*GD=]?0gN>>!=CKDG+<>DM9qdGd5-T2i*uJJ4%#G&#_6E2:RU*+<%&+9VIqF*fb%hQ*-MXar='DArJpAqQH`1KniWcdJ2)%1pN@5>gkW?DX4S.AAj(*o)Vc3FI!2uJiXq-Ym]N,:Tt%4H<hGR+4_EN,M1=nT@5;?^N$_>3l6@E6+Isk6n?e;0MTaOttGA&m!=%]WuRlW9OI:D/d4.q;qtrc52dnUiTDY(?XJ]AoPJg(n\]+%?^T5NOeq#AYI9_ZKlMEqb+7.q)=3"=71h.SR#L2s(hIR#dDBdYb9M7<(tG>KnfB=`jlD);UZBEkQIfS<Q0#u*+M3fA]\[gt2^)^W%;k#=VC+IL)h!/EcV@,er]EnV^$_I]0oZ$I]jd(uEAU._W4dU5$AiOt%qH=tC+bSg//UI/^HX'N[3m4#Hb4B45=PQ%-=6,Y27>rop%/+-&J5bhfTK9=;FK^f<*p./:Up\>+,VFLI-/#"]o&PmjEi`GUp^Q32e5Q(LMaZ'O56q+VXqSg6r\=9^A0PRlQMT#D>0*Y*@ji=-F%0q`_eG]`V:_3`l/2ht`KaBob75qR:LoH@N=@`Srfr_'F2;B?ETeM!e:8]>6Hb0i,\$Rpb;>\e,*qSf*obn?EU(2nZcF'DT*6cGMo%S]Ul*fnsqh^R0\Q?VEf)p)$/QAj[4dFn^e;6S*9ks,e<G&H$!6Ns3h+h>LdopsMRp+au._MriYF5qEYS#+5Ch6$O*OMYb;R.G2Lb%WoQC%>dL4g;L`=,g4[-m/J&m;=JnmC!0*s5#Bbt+Z;`!c=0HqhR0Bur=lUtWq8F%JLO-rO3Cr`*4Q=+Q<j.BLW4Q]disZm7U+Q<p%12D3Ui+O:NdL`R;#lF7Qn[<ea,_VaDfJrZgF`i(_bo7']GL%+.oOmH>LcF>pkS]"EXYTk:\B#BcLtt4(SeJjP-Z6qC*fn.P/=3.4%XhCI;ULsug.q'UO1PY)"GF&:X\]Y''1FBN[1WC%$N(F;g3iKu&Ue:9<+aIs2m-k_d.Bf>+:IRBUa:T2nj)e*_)ZkLjcPUT4B8e)'%)<6Nt`h9m8.qX0uQ5AcQ)+/PJmbelR.o\!7_p8M1IM!?!4_'$+pYn?%NhGdrKu$U3(ee$8..N6f?$Q5UnR.@tb<,PXHVT[eM6/u7%OnuuE3??f<;m5*2l;M_bqGs57+kp$fgU>gtf]k_4X&%hZCo^?o:"!'<e\/n%:SH(JePl$^pf:T\[b?hqC.!*DVkcNGXel]rbZd4V%f%7AL)0Y+VP?#85aY)S:D)Lb+3HL5jgM1V%\XRE9Oe"dakZ11iDY4^-U$^K\8!D4?INV1b`u9+)?;Nk:XbEA!+;f"YJNUZ4L*e'7%kX%Yh%3n)fJX/9QS`9!_:a(7'#@L7egB&$-IBGpDK+og`T'$R0B*G(EMG\K@0COTrrdgIp%cKj1_b(IqiA0@;Y"`nu;^GP#Ou;Ph%<q?&TE^13[,^LKOi7J7\_M+B*6dBma[KuT)4")X>L!^YaCfr(Oq^":RK5@Q[C=b@E).Pt277*\FLURl=Gaq\Z9VaI#"7qWta?MO2%Zf).Ld&>Y9'\/UF"F^gZ#aMu/837ZYgm"MQ1bYOp&s+da'0I;QB@R^]m81&+U?YV*I(SSfdhU7X(+.?KD9e>J:^qu$*a(RoqW!+G%+lKMWK+FcT9-dqtUI>D<Z8i):TUP6,NSbk:(Dm9&_Z6fu2f7K%U;M-I%XK$cYc9Y4MOY6T#Cq"^EksS[Zir*Orhc[6&Q=qXe]&R^%S*$\C&t3'1g,k(I=]N1_CVi`*q`S0m,Bj2aWNKiGmX?E[rJCYrSEK,"8.^R'22FE?iqkR[5uUYl;oh3BVF.Gf1aWY+6h)tb1cNdK%,183OmjM2_2N.a9]UC#eAP>sD8GR7D]BnoUQ&J$@kFoT/!d9FJVhrIJ&ocGmo_?K5,d85l,^BkQ:Rm7nfkZt*d+U1*oRY_oL-T?=%^jf;Es5+^<Nj*+@_HN2M+D2mXK2EGa:;\fbKn=:KVq0Rl3V1+5&'-WP8O][)$q87<MmGqUMV,g%jY0jhU:)G^"OTEoX@\!XMu],A%.rn)*KZ?L#Xa!l$C'trMTGUp)0*9n#0@+-l9N*L3CS1WNj=e$=a6!Yl%YkT-Ek^B_ElZVVA-aX?B),[QQ;s;3@dPDJ\R;d_)1l#\%^cdXF/Ag2lhD`8\?rfg"o8Q&6ALG@fGa#nuNDmnH>?fl,%Q"Klr5]-rG0-@H&p&.dITJdhXY!,.C/$k@oa_-]>&^VdE*$cNi=?'2%CPhn`]E3'L4DosIogRCBNFA7gmg(<%k&tfLP3/#$EE2$<pH3_Qk95ShUM`Y4G=]fQ[Ah@29I39!l;`biG.h3"4?/e=BaH7hmUYRU%/7,[49\.c_HMiI>.>BSG;,VR)"'J]7GUsQSOJ:9J4R&HFSc;6:32ml1jD6peSjE5AC_#Ir:hA1('NK`6PEX_s$qGCT5(_)Nq&X8s%3"UhoP*J94B5X`TWPR=KP3`<sP[*D97gAM(n-5PsD389oN\G_j19-K7J0,YuWluZbK5IVLR=?d\?n):!I&)sV(7n+mgnWSc'R`Et%r"X`f@b^u&+//;_ElEr[Y;=@#$h[l)[mtP%,eO%Z?sqE:YAJc<'c"b>J4*d,"8:;Ge&CQacXb;;pSaW"+b#lMOS?VI7#gmhSBmK$%4qt,8C+%#sMQg-]-&)DKb$BTLR^nXCEoL4uZVGn'YQWGj#](nfmPfD8P,ZR)O]Rd:=b_=&@R<)C^a989K1fAC&bANTp$a"qZ=b+:%n[;PW6nq?MfCjYC'-CQ!.Sa<)Ah>dfdZm?b,b%(uk>0lP9fA/8#uP/m8d&nIe>,_+Dr(N"8o:PfQRRik5or04G$Yf%*Aa':dH7.3%mFT^hVYY[8A2)K1Da0>i3T#bW.RI]Ta_,rRkH$[sU^MjRkLn^?27hp%/K.'TD+4Y&6niru'MjlJ.#bC<eTXiAF,1O8NI^VmkD0k&%m"maSJWWCL0)H^"=&n.=#keV,EDuT@hhoM6Ce,.]SP(5br,"?Rfu83PP)eHSp\#q@\=@%sL[&"^C$bE!>;@3bFf!3I-qQ72dses^%f;HVq`7?7]RAoai[R$*/TX^BMCc;D=;"2.)kKC<0<(-k/mkI5RL;O3a/:rp2F@8fq+g.Z^J]O1U"!7F"Lg#:9Qkcp`[]m\l%r\WD%`O43V9Wm*2r3q.Q:mYM0%2JW:>uoF2DE,KM2*khU\0`.NK!h&LH^fquTu?[H8?+e)\fb1W$<a2Cq9-qk,kA4==p[AYX;diLBiC5e%lOE5u^V^^O4ollN.)WOp4G%[qq1K-Lhg+Jf(>RPqB\F+6YUS5ND2S(3@)AWeVCoX%*H3'nd2Eee=$fg;>9;m<fF_QHUTP#EhDcZO%4c?r=.QLjLhWtU_hAE,-&eXG,r0me,%&K[,Vl[-(.71-&\j$4c1Nl1THWl8Z<g#7n%7j9h0ZHr.<MA'f(de>VjQ7Xr9OFO^(KiS[%/V^]`8q3FMZ[g`/RtW'Sb21)"fmCM!/\#8*3`BjF^\3(od\`RU<AcYJ1&E8<=;q=lnY%]\_UZ=/]0]T\ZQNO)&(H`"./+T7@DMl`%^Nq)[Z=rVg[E#hS4bO@&V5W[hJESZn[`#1s-;k`&AE<\'J&eV7H48Z]LIt\+'J[Y*!D7Ch-@bu/WYXfLW8/dD''b$j4X>k)78p.Y%a]5qAMS/FW'mJBLF<RBeS$%6L>_5XL2mG+-IJO8&T=\^Rp8r[XDVRL501!NGCc_]lcFr5H>E#B&j/Sp>f:O9+OTD.dLNF^(i+kBk%N;G8JWY((RJO!MO^$WNFNi6.r@t2dK^ZSf<97^_+O'fK<\J<Z.'M3SX[bR&T3n,KUXjmKs[Nog0P+4o*TL^q+4;JO\es;,jj.+L!%24BTbr.qg,o"u$H^ETmt*iI?RrW[St!J)Uh3/I$2S1J>mML/i3a%O>kSOm]fnB/-!nIiKTC/0-A0j'O:%1`p"-4,f&`sDXkY6=AT%8'`86j+VCn4as3dr=^p&`9?(%J2e+T\]AGI`oi.@)f\;X57lp.Nj^b\K=#nIr[iGdZ?ZQFJ."$gCC(jJ_h@($k+YS;ke5#)Jd],p%)*p0W2B,aUW6N&hCmC=g@E-?;HTO)XjJ`W8?=Lg&B9eI;s7l;WJ+uh"J,\K#rpAaD^]45T%mR`*ju<>5Va(1YhgYCcIt.@kQa]3Y%jeollr;P0;rq,Bgrq+g7s3LA)pHSZJo3_Lnk?i[es3(H=oD\o5rPZ;Iju<>8LOXXIs&H(lIK~>%AI9_PrivateDataEnd